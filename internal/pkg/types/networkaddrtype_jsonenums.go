// generated by jsonenums -type=NetworkAddrType; DO NOT EDIT

package types

import (
	"encoding/json"
	"fmt"
)

var (
	_NetworkAddrTypeNameToValue = map[string]NetworkAddrType{
		"TCP": TCP,
	}

	_NetworkAddrTypeValueToName = map[NetworkAddrType]string{
		TCP: "TCP",
	}
)

func init() {
	var v NetworkAddrType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_NetworkAddrTypeNameToValue = map[string]NetworkAddrType{
			interface{}(TCP).(fmt.Stringer).String(): TCP,
		}
	}
}

// MarshalJSON is generated so NetworkAddrType satisfies json.Marshaler.
func (r NetworkAddrType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _NetworkAddrTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid NetworkAddrType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so NetworkAddrType satisfies json.Unmarshaler.
func (r *NetworkAddrType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("NetworkAddrType should be a string, got %s", data)
	}
	v, ok := _NetworkAddrTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid NetworkAddrType %q", s)
	}
	*r = v
	return nil
}
