@0xfb2d77234707241e; # unique file ID, generated by `capnp id`
using Go = import "/go.capnp";
$Go.package("proto");
$Go.import("rains/proto");

struct RainsMessage  {
    #RainsMessage contains the data of a message
	token           @0 :Data;
	content         @1 :List(MessageSection);
	signatures      @2 :List(Signature);
	capabilities    @3 :List(Text);
}

struct MessageSection  {
    union {
        assertion           @0 :AssertionSection;     
        shard               @1 :ShardSection; 
        zone                @2 :ZoneSection;      
        query               @3 :QuerySection;      
        notification        @4 :NotificationSection;
        addressQuery        @5 :AddressQuerySection;
        addressAssertion    @6 :AddressAssertionSection;
		addressZone			@7 :AddressZoneSection;
    }         
}

struct AssertionSection  {
    #AssertionSection contains information about the assertion
	subjectName @0 :Text;
	content     @1 :List(Obj);
	signatures  @2 :List(Signature);
	subjectZone @3 :Text;
	context     @4 :Text;
}

struct ShardSection  {
    #ShardSection contains information about the shard
	content     @0 :List(AssertionSection);
	signatures  @1 :List(Signature);
	subjectZone @2 :Text;
	context     @3 :Text;
	rangeFrom   @4 :Text;
	rangeTo     @5 :Text;
}


struct ZoneSection  {
    #ZoneSection contains information about the zone
	signatures  @0  :List(Signature);
	subjectZone @1  :Text;
	context     @2  :Text;
	content     @3  :List(MessageSection);
}

struct QuerySection  {
    #QuerySection contains information about the query
	token   @0      :Data;
	name    @1      :Text;
	context @2      :Text;
	type    @3      :Int32;
	expires @4      :Int64; #time when this query expires represented as the number of seconds elapsed since January 1, 1970 UTC
	options @5      :List(Int32);
}

struct SubjectAddr  {
	addressFamily @0    :Text;
	prefixLength  @1    :UInt32;
	address       @2    :Text;
}

struct AddressAssertionSection  {
    #AddressAssertionSection contains information about the address assertion
	subjectAddr @0  :SubjectAddr;
	content     @1  :List(Obj);
	signatures  @2  :List(Signature);
	context     @3  :Text;
}


struct AddressZoneSection  {
    #AddressZoneSection contains information about the address zone
	subjectAddr @0  :SubjectAddr;
	signatures  @1  :List(Signature);
	context     @2  :Text;
	content     @3  :List(AddressAssertionSection);
}

struct AddressQuerySection  {
    #AddressQuerySection contains information about the address query
	subjectAddr @0 :SubjectAddr;
	token       @1 :Data;
	context     @2 :Text;
	types       @3 :Int32;
	expires     @4 :Int64;
	options     @5 :List(Int32);
}


struct NotificationSection  {
    #NotificationSection contains information about the notification
	token @0    :Data;
	type  @1    :Int32;
	data  @2    :Text;
}


struct Signature  {
    #Signature on a Rains message or section
	keySpace   @0 :Int32;
	algorithm  @1 :Int32;
	validSince @2 :Int64;
	validUntil @3 :Int64;
	data       @4 :Data;
}

struct PublicKey  {
    #PublicKey contains information about a public key
	keySpace   @0 :Int32;
	type  	     @1 :Int32;
	key        @2 :Data;
	validSince  @3 :Int64;
	validUntil @4 :Int64;
}

struct CertificateObject  {
    #CertificateObject contains certificate information
	type     @0 :Int32;
	usage    @1 :Int32;
	hashAlgo @2 :Int32;
	data     @3 :Data;
}

struct ServiceInfo  {
    #ServiceInfo contains information how to access a named service
	name     @0 :Text;
	port     @1 :UInt16;
	priority @2 :UInt32;
}

struct Obj  {
    #Object is a container for different values determined by the given type.
	type  @0    :Int32;
	value   :union {
		name 	@1 	:List(Text);
        ip6 	@2 	:Text;
        ip4 	@3 	:Text;
		redir 	@4 	:Text;
		deleg 	@5	:PublicKey;
		nameset @6  :Text;
		cert 	@7 	:CertificateObject;
		service @8 	:ServiceInfo;
		regr 	@9 	:Text;
		regt 	@10 :Text;
		infra 	@11 :PublicKey;
		extra	@12 :PublicKey;
    }
}


