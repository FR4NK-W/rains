@0xfb2d77234707241e; # unique file ID, generated by `capnp id`
using Go = import "go.capnp";
$Go.package("proto");
$Go.import("proto");

struct RainsMessage  {
    #RainsMessage contains the data of a message
	Token           @0 :Data;
	Content         @1 :List(MessageSection);
	Signatures      @2 :List(Signature);
	Capabilities    @3 :List(Text);
}

interface MessageSection  {
}

const NoCapability :Text = "";
const TLSOverTCP :Text = "urn:x-rains:tlssrv";


interface MessageSectionWithSig extends(MessageSection) {
    #MessageSectionWithSig can be either an Assertion, Shard or Zone
	Sigs            @0 () -> (sig :Signature);
	AddSig          @1 (sig :Signature);
	DeleteSig       @2 (int :Int32);
	DeleteAllSigs   @3 ();
    #TODO CFE what is the syntax of a method without arguments
	GetContext      @4 () -> (context :Text);
	GetSubjectZone  @5 () -> (zone :Text);
	CreateStub      @6 () -> (section :MessageSectionWithSig);
	ValidFrom       @7 () -> (validFrom :int64);
	ValidUntil      @8 () -> (validUntil :int64);
	Hash            @9 () -> (hash :Text);
	Interval        @10 :Interval;
}

interface Interval  {
    #Interval defines an interval over strings
	Begin   @0 () -> (begin :Text)
	End     @1 () -> (end :Text)
}


interface Hashable  {
    #Hashable can be implemented by objects that are not natively hashable.
	Hash @0 () -> (hash :Text);
}


struct AssertionSection  {
    #AssertionSection contains information about the assertion
	SubjectName @0 :Text;
	Content     @1 :List(Object);
	Signatures  @2 :List(Signature);
	SubjectZone @3 :Text;
	Context     @4 :Text;
}


struct ShardSection  {
    #ShardSection contains information about the shard
	Content     @0 :List(AssertionSection);
	Signatures  @1 :List(Signature);
	SubjectZone @2 :Text;
	Context     @3 :Text;
	RangeFrom   @4 :Text;
	RangeTo     @5 :Text;
}


struct ZoneSection  {
    #ZoneSection contains information about the zone
	Signatures  @0  :List(Signature);
	SubjectZone @1  :Text;
	Context     @2  :Text;
	Content     @3  :List(MessageSectionWithSig);
}


struct QuerySection  {
    #QuerySection contains information about the query
	Token   @0      :Data;
	Name    @1      :Text;
	Context @2      :Text;
	Type    @3      :ObjectType;
	Expires @4      :Int64; #time when this query expires represented as the number of seconds elapsed since January 1, 1970 UTC
	Options @5      :List(QueryOption);
}

enum QueryOption {
	MinE2ELatency            @1;
	MinLastHopAnswerSize     @2;
	MinInfoLeakage           @3;
	CachedAnswersOnly        @4;
	ExpiredAssertionsOk      @5;
	TokenTracing             @6;
	NoVerificationDelegation @7;
	NoProactiveCaching       @8;
}

enum ObjectType {
	OTName        @1;
	OTIP6Addr     @2;
	OTIP4Addr     @3;
	OTRedirection @4;
	OTDelegation  @5;
	OTNameset     @6;
	OTCertInfo    @7;
	OTServiceInfo @8;
	OTRegistrar   @9;
	OTRegistrant  @10;
	OTInfraKey    @11;
	OTExtraKey    @12;
}

struct SubjectAddr  {
	AddressFamily @0    :Text;
	PrefixLength  @1    :UInt32;
	Address       @2    :Text;
}


struct AddressAssertionSection  {
    #AddressAssertionSection contains information about the address assertion
	SubjectAddr @0  :SubjectAddr;
	Content     @1  :List(Object);
	Signatures  @2  :List(Signature);
	Context     @3  :Text;
}


struct AddressZoneSection  {
    #AddressZoneSection contains information about the address zone
	SubjectAddr @0  :SubjectAddr;
	Signatures  @1  :List:(Signature);
	Context     @2  :Text;
	Content     @3  :List(AddressAssertionSection);
}


struct AddressQuerySection  {
    #AddressQuerySection contains information about the address query
	SubjectAddr @0 :SubjectAddr;
	Token       @1 :Data;
	Context     @2 :Text;
	Types       @3 :List(Int32);
	Expires     @4 :Int64
	Options     @5 :List(QueryOption);
}


struct NotificationSection  {
    #NotificationSection contains information about the notification
	Token @0    :Data;
	Type  @1    :NotificationType;
	Data  @2    :Text;
}

enum NotificationType {
	Heartbeat          @0;
	CapHashNotKnown    @1;
	BadMessage         @2;
	RcvInconsistentMsg @3;
	NoAssertionsExist  @4;
	MsgTooLarge        @5;
	UnspecServerErr    @6;
	ServerNotCapable   @7;
	NoAssertionAvail   @8;
}


struct Signature  {
    #Signature on a Rains message or section
	KeySpace   @0 :KeySpaceID;
	Algorithm  @1 :SignatureAlgorithmType;
	ValidSince @2 :Int64;
	ValidUntil @3 :Int64;
	Data       @4 :Data;
}


enum KeySpaceID {
#KeySpaceID identifies a key space
	RainsKeySpace @0;
}



enum SignatureAlgorithmType {
#SignatureAlgorithmType specifies a signature algorithm type
	Ed25519  @0;
	Ed448    @1;
	Ecdsa256 @2;
	Ecdsa384 @3;
}



enum HashAlgorithmType {
#HashAlgorithmType specifies a hash algorithm type
	NoHashAlgo @0;
	Sha256     @1;
	Sha384     @2;
	Sha512     @3;
}


struct PublicKey  {
    #PublicKey contains information about a public key
	Type       @0 :SignatureAlgorithmType;
	Key        @1 :Data;
	ValidFrom  @2 :Int64;
	ValidUntil @3 :Int64;
}


struct CertificateObject  {
    #CertificateObject contains certificate information
	Type     @0 :ProtocolType;
	Usage    @1 :CertificateUsage;
	HashAlgo @2 :HashAlgorithmType;
	Data     @3 :Data;
}

enum ProtocolType {
	PTUnspecified @0;
	PTTLS         @1;
}

enum CertificateUsage {
	CUTrustAnchor @0;
	CUEndEntity   @1;
}

struct ServiceInfo  {
    #ServiceInfo contains information how to access a named service
	Name     @0 :Text;
	Port     @1 :UInt16;
	Priority @2 :UInt32;
}

struct Object  {
    #Object is a container for different values determined by the given type.
	Type  @0    :ObjectType;
	Value @1    :Data;
}