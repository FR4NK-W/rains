// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	context "golang.org/x/net/context"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// Constants defined in rainsMsg.capnp.
const (
	NoCapability = ""
	TLSOverTCP   = "urn:x-rains:tlssrv"
)

type RainsMessage struct{ capnp.Struct }

// RainsMessage_TypeID is the unique identifier for the type RainsMessage.
const RainsMessage_TypeID = 0xbd157ada88cf152d

func NewRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func NewRootRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func ReadRootRainsMessage(msg *capnp.Message) (RainsMessage, error) {
	root, err := msg.RootPtr()
	return RainsMessage{root.Struct()}, err
}

func (s RainsMessage) String() string {
	str, _ := text.Marshal(0xbd157ada88cf152d, s.Struct)
	return str
}

func (s RainsMessage) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s RainsMessage) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s RainsMessage) Content() (MessageSection_List, error) {
	p, err := s.Struct.Ptr(1)
	return MessageSection_List{List: p.List()}, err
}

func (s RainsMessage) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetContent(v MessageSection_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated MessageSection_List, preferring placement in s's segment.
func (s RainsMessage) NewContent(n int32) (MessageSection_List, error) {
	l, err := NewMessageSection_List(s.Struct.Segment(), n)
	if err != nil {
		return MessageSection_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s RainsMessage) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s RainsMessage) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Capabilities() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s RainsMessage) HasCapabilities() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetCapabilities(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewCapabilities sets the capabilities field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RainsMessage) NewCapabilities(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// RainsMessage_List is a list of RainsMessage.
type RainsMessage_List struct{ capnp.List }

// NewRainsMessage creates a new list of RainsMessage.
func NewRainsMessage_List(s *capnp.Segment, sz int32) (RainsMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return RainsMessage_List{l}, err
}

func (s RainsMessage_List) At(i int) RainsMessage { return RainsMessage{s.List.Struct(i)} }

func (s RainsMessage_List) Set(i int, v RainsMessage) error { return s.List.SetStruct(i, v.Struct) }

// RainsMessage_Promise is a wrapper for a RainsMessage promised by a client call.
type RainsMessage_Promise struct{ *capnp.Pipeline }

func (p RainsMessage_Promise) Struct() (RainsMessage, error) {
	s, err := p.Pipeline.Struct()
	return RainsMessage{s}, err
}

type MessageSection struct{ capnp.Struct }
type MessageSection_Which uint16

const (
	MessageSection_Which_assertion        MessageSection_Which = 0
	MessageSection_Which_shard            MessageSection_Which = 1
	MessageSection_Which_zone             MessageSection_Which = 2
	MessageSection_Which_query            MessageSection_Which = 3
	MessageSection_Which_notification     MessageSection_Which = 4
	MessageSection_Which_addressQuery     MessageSection_Which = 5
	MessageSection_Which_addressAssertion MessageSection_Which = 6
)

func (w MessageSection_Which) String() string {
	const s = "assertionshardzonequerynotificationaddressQueryaddressAssertion"
	switch w {
	case MessageSection_Which_assertion:
		return s[0:9]
	case MessageSection_Which_shard:
		return s[9:14]
	case MessageSection_Which_zone:
		return s[14:18]
	case MessageSection_Which_query:
		return s[18:23]
	case MessageSection_Which_notification:
		return s[23:35]
	case MessageSection_Which_addressQuery:
		return s[35:47]
	case MessageSection_Which_addressAssertion:
		return s[47:63]

	}
	return "MessageSection_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageSection_TypeID is the unique identifier for the type MessageSection.
const MessageSection_TypeID = 0xf4f09607a66adddc

func NewMessageSection(s *capnp.Segment) (MessageSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageSection{st}, err
}

func NewRootMessageSection(s *capnp.Segment) (MessageSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageSection{st}, err
}

func ReadRootMessageSection(msg *capnp.Message) (MessageSection, error) {
	root, err := msg.RootPtr()
	return MessageSection{root.Struct()}, err
}

func (s MessageSection) String() string {
	str, _ := text.Marshal(0xf4f09607a66adddc, s.Struct)
	return str
}

func (s MessageSection) Which() MessageSection_Which {
	return MessageSection_Which(s.Struct.Uint16(0))
}
func (s MessageSection) Assertion() (AssertionSection, error) {
	p, err := s.Struct.Ptr(0)
	return AssertionSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAssertion() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAssertion(v AssertionSection) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAssertion sets the assertion field to a newly
// allocated AssertionSection struct, preferring placement in s's segment.
func (s MessageSection) NewAssertion() (AssertionSection, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAssertionSection(s.Struct.Segment())
	if err != nil {
		return AssertionSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Shard() (ShardSection, error) {
	p, err := s.Struct.Ptr(0)
	return ShardSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasShard() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetShard(v ShardSection) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewShard sets the shard field to a newly
// allocated ShardSection struct, preferring placement in s's segment.
func (s MessageSection) NewShard() (ShardSection, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewShardSection(s.Struct.Segment())
	if err != nil {
		return ShardSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Zone() (ZoneSection, error) {
	p, err := s.Struct.Ptr(0)
	return ZoneSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasZone() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetZone(v ZoneSection) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZone sets the zone field to a newly
// allocated ZoneSection struct, preferring placement in s's segment.
func (s MessageSection) NewZone() (ZoneSection, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewZoneSection(s.Struct.Segment())
	if err != nil {
		return ZoneSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Query() (QuerySection, error) {
	p, err := s.Struct.Ptr(0)
	return QuerySection{Struct: p.Struct()}, err
}

func (s MessageSection) HasQuery() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetQuery(v QuerySection) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated QuerySection struct, preferring placement in s's segment.
func (s MessageSection) NewQuery() (QuerySection, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewQuerySection(s.Struct.Segment())
	if err != nil {
		return QuerySection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Notification() (NotificationSection, error) {
	p, err := s.Struct.Ptr(0)
	return NotificationSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasNotification() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetNotification(v NotificationSection) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNotification sets the notification field to a newly
// allocated NotificationSection struct, preferring placement in s's segment.
func (s MessageSection) NewNotification() (NotificationSection, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewNotificationSection(s.Struct.Segment())
	if err != nil {
		return NotificationSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressQuery() (AddressQuerySection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressQuerySection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressQuery() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressQuery(v AddressQuerySection) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressQuery sets the addressQuery field to a newly
// allocated AddressQuerySection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressQuery() (AddressQuerySection, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewAddressQuerySection(s.Struct.Segment())
	if err != nil {
		return AddressQuerySection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressAssertion() (AddressAssertionSection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressAssertionSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressAssertion() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressAssertion(v AddressAssertionSection) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressAssertion sets the addressAssertion field to a newly
// allocated AddressAssertionSection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressAssertion() (AddressAssertionSection, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewAddressAssertionSection(s.Struct.Segment())
	if err != nil {
		return AddressAssertionSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MessageSection_List is a list of MessageSection.
type MessageSection_List struct{ capnp.List }

// NewMessageSection creates a new list of MessageSection.
func NewMessageSection_List(s *capnp.Segment, sz int32) (MessageSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MessageSection_List{l}, err
}

func (s MessageSection_List) At(i int) MessageSection { return MessageSection{s.List.Struct(i)} }

func (s MessageSection_List) Set(i int, v MessageSection) error { return s.List.SetStruct(i, v.Struct) }

// MessageSection_Promise is a wrapper for a MessageSection promised by a client call.
type MessageSection_Promise struct{ *capnp.Pipeline }

func (p MessageSection_Promise) Struct() (MessageSection, error) {
	s, err := p.Pipeline.Struct()
	return MessageSection{s}, err
}

func (p MessageSection_Promise) Assertion() AssertionSection_Promise {
	return AssertionSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Shard() ShardSection_Promise {
	return ShardSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Zone() ZoneSection_Promise {
	return ZoneSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Query() QuerySection_Promise {
	return QuerySection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Notification() NotificationSection_Promise {
	return NotificationSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressQuery() AddressQuerySection_Promise {
	return AddressQuerySection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressAssertion() AddressAssertionSection_Promise {
	return AddressAssertionSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MessageSectionWithSig struct{ Client capnp.Client }

// MessageSectionWithSig_TypeID is the unique identifier for the type MessageSectionWithSig.
const MessageSectionWithSig_TypeID = 0x9f30b9a1389539e7

func (c MessageSectionWithSig) Sigs(ctx context.Context, params func(MessageSectionWithSig_sigs_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_sigs_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_sigs_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "sigs",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_sigs_Params{Struct: s}) }
	}
	return MessageSectionWithSig_sigs_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) AddSig(ctx context.Context, params func(MessageSectionWithSig_addSig_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_addSig_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_addSig_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "addSig",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_addSig_Params{Struct: s}) }
	}
	return MessageSectionWithSig_addSig_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) DeleteSig(ctx context.Context, params func(MessageSectionWithSig_deleteSig_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_deleteSig_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_deleteSig_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      2,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "deleteSig",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_deleteSig_Params{Struct: s}) }
	}
	return MessageSectionWithSig_deleteSig_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) DeleteAllSigs(ctx context.Context, params func(MessageSectionWithSig_deleteAllSigs_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_deleteAllSigs_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_deleteAllSigs_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      3,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "deleteAllSigs",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_deleteAllSigs_Params{Struct: s}) }
	}
	return MessageSectionWithSig_deleteAllSigs_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) GetContext(ctx context.Context, params func(MessageSectionWithSig_getContext_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_getContext_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_getContext_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      4,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "getContext",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_getContext_Params{Struct: s}) }
	}
	return MessageSectionWithSig_getContext_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) GetSubjectZone(ctx context.Context, params func(MessageSectionWithSig_getSubjectZone_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_getSubjectZone_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_getSubjectZone_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      5,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "getSubjectZone",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_getSubjectZone_Params{Struct: s}) }
	}
	return MessageSectionWithSig_getSubjectZone_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) CreateStub(ctx context.Context, params func(MessageSectionWithSig_createStub_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_createStub_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_createStub_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      6,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "createStub",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_createStub_Params{Struct: s}) }
	}
	return MessageSectionWithSig_createStub_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) ValidFrom(ctx context.Context, params func(MessageSectionWithSig_validFrom_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_validFrom_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_validFrom_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      7,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "validFrom",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_validFrom_Params{Struct: s}) }
	}
	return MessageSectionWithSig_validFrom_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) ValidUntil(ctx context.Context, params func(MessageSectionWithSig_validUntil_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_validUntil_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_validUntil_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      8,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "validUntil",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_validUntil_Params{Struct: s}) }
	}
	return MessageSectionWithSig_validUntil_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) Hash(ctx context.Context, params func(MessageSectionWithSig_hash_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_hash_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_hash_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      9,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "hash",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_hash_Params{Struct: s}) }
	}
	return MessageSectionWithSig_hash_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) Begin(ctx context.Context, params func(Interval_begin_Params) error, opts ...capnp.CallOption) Interval_begin_Results_Promise {
	if c.Client == nil {
		return Interval_begin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "begin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Interval_begin_Params{Struct: s}) }
	}
	return Interval_begin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) End(ctx context.Context, params func(Interval_end_Params) error, opts ...capnp.CallOption) Interval_end_Results_Promise {
	if c.Client == nil {
		return Interval_end_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "end",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Interval_end_Params{Struct: s}) }
	}
	return Interval_end_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type MessageSectionWithSig_Server interface {
	Sigs(MessageSectionWithSig_sigs) error

	AddSig(MessageSectionWithSig_addSig) error

	DeleteSig(MessageSectionWithSig_deleteSig) error

	DeleteAllSigs(MessageSectionWithSig_deleteAllSigs) error

	GetContext(MessageSectionWithSig_getContext) error

	GetSubjectZone(MessageSectionWithSig_getSubjectZone) error

	CreateStub(MessageSectionWithSig_createStub) error

	ValidFrom(MessageSectionWithSig_validFrom) error

	ValidUntil(MessageSectionWithSig_validUntil) error

	Hash(MessageSectionWithSig_hash) error

	Begin(Interval_begin) error

	End(Interval_end) error
}

func MessageSectionWithSig_ServerToClient(s MessageSectionWithSig_Server) MessageSectionWithSig {
	c, _ := s.(server.Closer)
	return MessageSectionWithSig{Client: server.New(MessageSectionWithSig_Methods(nil, s), c)}
}

func MessageSectionWithSig_Methods(methods []server.Method, s MessageSectionWithSig_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 12)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "sigs",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_sigs{c, opts, MessageSectionWithSig_sigs_Params{Struct: p}, MessageSectionWithSig_sigs_Results{Struct: r}}
			return s.Sigs(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "addSig",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_addSig{c, opts, MessageSectionWithSig_addSig_Params{Struct: p}, MessageSectionWithSig_addSig_Results{Struct: r}}
			return s.AddSig(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      2,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "deleteSig",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_deleteSig{c, opts, MessageSectionWithSig_deleteSig_Params{Struct: p}, MessageSectionWithSig_deleteSig_Results{Struct: r}}
			return s.DeleteSig(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      3,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "deleteAllSigs",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_deleteAllSigs{c, opts, MessageSectionWithSig_deleteAllSigs_Params{Struct: p}, MessageSectionWithSig_deleteAllSigs_Results{Struct: r}}
			return s.DeleteAllSigs(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      4,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "getContext",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_getContext{c, opts, MessageSectionWithSig_getContext_Params{Struct: p}, MessageSectionWithSig_getContext_Results{Struct: r}}
			return s.GetContext(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      5,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "getSubjectZone",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_getSubjectZone{c, opts, MessageSectionWithSig_getSubjectZone_Params{Struct: p}, MessageSectionWithSig_getSubjectZone_Results{Struct: r}}
			return s.GetSubjectZone(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      6,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "createStub",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_createStub{c, opts, MessageSectionWithSig_createStub_Params{Struct: p}, MessageSectionWithSig_createStub_Results{Struct: r}}
			return s.CreateStub(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      7,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "validFrom",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_validFrom{c, opts, MessageSectionWithSig_validFrom_Params{Struct: p}, MessageSectionWithSig_validFrom_Results{Struct: r}}
			return s.ValidFrom(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      8,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "validUntil",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_validUntil{c, opts, MessageSectionWithSig_validUntil_Params{Struct: p}, MessageSectionWithSig_validUntil_Results{Struct: r}}
			return s.ValidUntil(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      9,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "hash",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_hash{c, opts, MessageSectionWithSig_hash_Params{Struct: p}, MessageSectionWithSig_hash_Results{Struct: r}}
			return s.Hash(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "begin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Interval_begin{c, opts, Interval_begin_Params{Struct: p}, Interval_begin_Results{Struct: r}}
			return s.Begin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "end",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Interval_end{c, opts, Interval_end_Params{Struct: p}, Interval_end_Results{Struct: r}}
			return s.End(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// MessageSectionWithSig_sigs holds the arguments for a server call to MessageSectionWithSig.sigs.
type MessageSectionWithSig_sigs struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_sigs_Params
	Results MessageSectionWithSig_sigs_Results
}

// MessageSectionWithSig_addSig holds the arguments for a server call to MessageSectionWithSig.addSig.
type MessageSectionWithSig_addSig struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_addSig_Params
	Results MessageSectionWithSig_addSig_Results
}

// MessageSectionWithSig_deleteSig holds the arguments for a server call to MessageSectionWithSig.deleteSig.
type MessageSectionWithSig_deleteSig struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_deleteSig_Params
	Results MessageSectionWithSig_deleteSig_Results
}

// MessageSectionWithSig_deleteAllSigs holds the arguments for a server call to MessageSectionWithSig.deleteAllSigs.
type MessageSectionWithSig_deleteAllSigs struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_deleteAllSigs_Params
	Results MessageSectionWithSig_deleteAllSigs_Results
}

// MessageSectionWithSig_getContext holds the arguments for a server call to MessageSectionWithSig.getContext.
type MessageSectionWithSig_getContext struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_getContext_Params
	Results MessageSectionWithSig_getContext_Results
}

// MessageSectionWithSig_getSubjectZone holds the arguments for a server call to MessageSectionWithSig.getSubjectZone.
type MessageSectionWithSig_getSubjectZone struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_getSubjectZone_Params
	Results MessageSectionWithSig_getSubjectZone_Results
}

// MessageSectionWithSig_createStub holds the arguments for a server call to MessageSectionWithSig.createStub.
type MessageSectionWithSig_createStub struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_createStub_Params
	Results MessageSectionWithSig_createStub_Results
}

// MessageSectionWithSig_validFrom holds the arguments for a server call to MessageSectionWithSig.validFrom.
type MessageSectionWithSig_validFrom struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_validFrom_Params
	Results MessageSectionWithSig_validFrom_Results
}

// MessageSectionWithSig_validUntil holds the arguments for a server call to MessageSectionWithSig.validUntil.
type MessageSectionWithSig_validUntil struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_validUntil_Params
	Results MessageSectionWithSig_validUntil_Results
}

// MessageSectionWithSig_hash holds the arguments for a server call to MessageSectionWithSig.hash.
type MessageSectionWithSig_hash struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_hash_Params
	Results MessageSectionWithSig_hash_Results
}

type MessageSectionWithSig_sigs_Params struct{ capnp.Struct }

// MessageSectionWithSig_sigs_Params_TypeID is the unique identifier for the type MessageSectionWithSig_sigs_Params.
const MessageSectionWithSig_sigs_Params_TypeID = 0xa5dedc367594e97a

func NewMessageSectionWithSig_sigs_Params(s *capnp.Segment) (MessageSectionWithSig_sigs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_sigs_Params{st}, err
}

func NewRootMessageSectionWithSig_sigs_Params(s *capnp.Segment) (MessageSectionWithSig_sigs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_sigs_Params{st}, err
}

func ReadRootMessageSectionWithSig_sigs_Params(msg *capnp.Message) (MessageSectionWithSig_sigs_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_sigs_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_sigs_Params) String() string {
	str, _ := text.Marshal(0xa5dedc367594e97a, s.Struct)
	return str
}

// MessageSectionWithSig_sigs_Params_List is a list of MessageSectionWithSig_sigs_Params.
type MessageSectionWithSig_sigs_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_sigs_Params creates a new list of MessageSectionWithSig_sigs_Params.
func NewMessageSectionWithSig_sigs_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_sigs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_sigs_Params_List{l}, err
}

func (s MessageSectionWithSig_sigs_Params_List) At(i int) MessageSectionWithSig_sigs_Params {
	return MessageSectionWithSig_sigs_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_sigs_Params_List) Set(i int, v MessageSectionWithSig_sigs_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_sigs_Params_Promise is a wrapper for a MessageSectionWithSig_sigs_Params promised by a client call.
type MessageSectionWithSig_sigs_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_sigs_Params_Promise) Struct() (MessageSectionWithSig_sigs_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_sigs_Params{s}, err
}

type MessageSectionWithSig_sigs_Results struct{ capnp.Struct }

// MessageSectionWithSig_sigs_Results_TypeID is the unique identifier for the type MessageSectionWithSig_sigs_Results.
const MessageSectionWithSig_sigs_Results_TypeID = 0xbd3d681e8600457f

func NewMessageSectionWithSig_sigs_Results(s *capnp.Segment) (MessageSectionWithSig_sigs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_sigs_Results{st}, err
}

func NewRootMessageSectionWithSig_sigs_Results(s *capnp.Segment) (MessageSectionWithSig_sigs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_sigs_Results{st}, err
}

func ReadRootMessageSectionWithSig_sigs_Results(msg *capnp.Message) (MessageSectionWithSig_sigs_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_sigs_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_sigs_Results) String() string {
	str, _ := text.Marshal(0xbd3d681e8600457f, s.Struct)
	return str
}

func (s MessageSectionWithSig_sigs_Results) Sig() (Signature, error) {
	p, err := s.Struct.Ptr(0)
	return Signature{Struct: p.Struct()}, err
}

func (s MessageSectionWithSig_sigs_Results) HasSig() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_sigs_Results) SetSig(v Signature) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSig sets the sig field to a newly
// allocated Signature struct, preferring placement in s's segment.
func (s MessageSectionWithSig_sigs_Results) NewSig() (Signature, error) {
	ss, err := NewSignature(s.Struct.Segment())
	if err != nil {
		return Signature{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MessageSectionWithSig_sigs_Results_List is a list of MessageSectionWithSig_sigs_Results.
type MessageSectionWithSig_sigs_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_sigs_Results creates a new list of MessageSectionWithSig_sigs_Results.
func NewMessageSectionWithSig_sigs_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_sigs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_sigs_Results_List{l}, err
}

func (s MessageSectionWithSig_sigs_Results_List) At(i int) MessageSectionWithSig_sigs_Results {
	return MessageSectionWithSig_sigs_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_sigs_Results_List) Set(i int, v MessageSectionWithSig_sigs_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_sigs_Results_Promise is a wrapper for a MessageSectionWithSig_sigs_Results promised by a client call.
type MessageSectionWithSig_sigs_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_sigs_Results_Promise) Struct() (MessageSectionWithSig_sigs_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_sigs_Results{s}, err
}

func (p MessageSectionWithSig_sigs_Results_Promise) Sig() Signature_Promise {
	return Signature_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MessageSectionWithSig_addSig_Params struct{ capnp.Struct }

// MessageSectionWithSig_addSig_Params_TypeID is the unique identifier for the type MessageSectionWithSig_addSig_Params.
const MessageSectionWithSig_addSig_Params_TypeID = 0xd4ee6164b4bdc4eb

func NewMessageSectionWithSig_addSig_Params(s *capnp.Segment) (MessageSectionWithSig_addSig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_addSig_Params{st}, err
}

func NewRootMessageSectionWithSig_addSig_Params(s *capnp.Segment) (MessageSectionWithSig_addSig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_addSig_Params{st}, err
}

func ReadRootMessageSectionWithSig_addSig_Params(msg *capnp.Message) (MessageSectionWithSig_addSig_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_addSig_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_addSig_Params) String() string {
	str, _ := text.Marshal(0xd4ee6164b4bdc4eb, s.Struct)
	return str
}

func (s MessageSectionWithSig_addSig_Params) Sig() (Signature, error) {
	p, err := s.Struct.Ptr(0)
	return Signature{Struct: p.Struct()}, err
}

func (s MessageSectionWithSig_addSig_Params) HasSig() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_addSig_Params) SetSig(v Signature) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSig sets the sig field to a newly
// allocated Signature struct, preferring placement in s's segment.
func (s MessageSectionWithSig_addSig_Params) NewSig() (Signature, error) {
	ss, err := NewSignature(s.Struct.Segment())
	if err != nil {
		return Signature{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MessageSectionWithSig_addSig_Params_List is a list of MessageSectionWithSig_addSig_Params.
type MessageSectionWithSig_addSig_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_addSig_Params creates a new list of MessageSectionWithSig_addSig_Params.
func NewMessageSectionWithSig_addSig_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_addSig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_addSig_Params_List{l}, err
}

func (s MessageSectionWithSig_addSig_Params_List) At(i int) MessageSectionWithSig_addSig_Params {
	return MessageSectionWithSig_addSig_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_addSig_Params_List) Set(i int, v MessageSectionWithSig_addSig_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_addSig_Params_Promise is a wrapper for a MessageSectionWithSig_addSig_Params promised by a client call.
type MessageSectionWithSig_addSig_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_addSig_Params_Promise) Struct() (MessageSectionWithSig_addSig_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_addSig_Params{s}, err
}

func (p MessageSectionWithSig_addSig_Params_Promise) Sig() Signature_Promise {
	return Signature_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MessageSectionWithSig_addSig_Results struct{ capnp.Struct }

// MessageSectionWithSig_addSig_Results_TypeID is the unique identifier for the type MessageSectionWithSig_addSig_Results.
const MessageSectionWithSig_addSig_Results_TypeID = 0xbb86a24042c66855

func NewMessageSectionWithSig_addSig_Results(s *capnp.Segment) (MessageSectionWithSig_addSig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_addSig_Results{st}, err
}

func NewRootMessageSectionWithSig_addSig_Results(s *capnp.Segment) (MessageSectionWithSig_addSig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_addSig_Results{st}, err
}

func ReadRootMessageSectionWithSig_addSig_Results(msg *capnp.Message) (MessageSectionWithSig_addSig_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_addSig_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_addSig_Results) String() string {
	str, _ := text.Marshal(0xbb86a24042c66855, s.Struct)
	return str
}

// MessageSectionWithSig_addSig_Results_List is a list of MessageSectionWithSig_addSig_Results.
type MessageSectionWithSig_addSig_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_addSig_Results creates a new list of MessageSectionWithSig_addSig_Results.
func NewMessageSectionWithSig_addSig_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_addSig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_addSig_Results_List{l}, err
}

func (s MessageSectionWithSig_addSig_Results_List) At(i int) MessageSectionWithSig_addSig_Results {
	return MessageSectionWithSig_addSig_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_addSig_Results_List) Set(i int, v MessageSectionWithSig_addSig_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_addSig_Results_Promise is a wrapper for a MessageSectionWithSig_addSig_Results promised by a client call.
type MessageSectionWithSig_addSig_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_addSig_Results_Promise) Struct() (MessageSectionWithSig_addSig_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_addSig_Results{s}, err
}

type MessageSectionWithSig_deleteSig_Params struct{ capnp.Struct }

// MessageSectionWithSig_deleteSig_Params_TypeID is the unique identifier for the type MessageSectionWithSig_deleteSig_Params.
const MessageSectionWithSig_deleteSig_Params_TypeID = 0xb950ba19ca79c37f

func NewMessageSectionWithSig_deleteSig_Params(s *capnp.Segment) (MessageSectionWithSig_deleteSig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_deleteSig_Params{st}, err
}

func NewRootMessageSectionWithSig_deleteSig_Params(s *capnp.Segment) (MessageSectionWithSig_deleteSig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_deleteSig_Params{st}, err
}

func ReadRootMessageSectionWithSig_deleteSig_Params(msg *capnp.Message) (MessageSectionWithSig_deleteSig_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_deleteSig_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_deleteSig_Params) String() string {
	str, _ := text.Marshal(0xb950ba19ca79c37f, s.Struct)
	return str
}

func (s MessageSectionWithSig_deleteSig_Params) Int() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s MessageSectionWithSig_deleteSig_Params) SetInt(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// MessageSectionWithSig_deleteSig_Params_List is a list of MessageSectionWithSig_deleteSig_Params.
type MessageSectionWithSig_deleteSig_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_deleteSig_Params creates a new list of MessageSectionWithSig_deleteSig_Params.
func NewMessageSectionWithSig_deleteSig_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_deleteSig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MessageSectionWithSig_deleteSig_Params_List{l}, err
}

func (s MessageSectionWithSig_deleteSig_Params_List) At(i int) MessageSectionWithSig_deleteSig_Params {
	return MessageSectionWithSig_deleteSig_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_deleteSig_Params_List) Set(i int, v MessageSectionWithSig_deleteSig_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_deleteSig_Params_Promise is a wrapper for a MessageSectionWithSig_deleteSig_Params promised by a client call.
type MessageSectionWithSig_deleteSig_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_deleteSig_Params_Promise) Struct() (MessageSectionWithSig_deleteSig_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_deleteSig_Params{s}, err
}

type MessageSectionWithSig_deleteSig_Results struct{ capnp.Struct }

// MessageSectionWithSig_deleteSig_Results_TypeID is the unique identifier for the type MessageSectionWithSig_deleteSig_Results.
const MessageSectionWithSig_deleteSig_Results_TypeID = 0x9439232ee1625745

func NewMessageSectionWithSig_deleteSig_Results(s *capnp.Segment) (MessageSectionWithSig_deleteSig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteSig_Results{st}, err
}

func NewRootMessageSectionWithSig_deleteSig_Results(s *capnp.Segment) (MessageSectionWithSig_deleteSig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteSig_Results{st}, err
}

func ReadRootMessageSectionWithSig_deleteSig_Results(msg *capnp.Message) (MessageSectionWithSig_deleteSig_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_deleteSig_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_deleteSig_Results) String() string {
	str, _ := text.Marshal(0x9439232ee1625745, s.Struct)
	return str
}

// MessageSectionWithSig_deleteSig_Results_List is a list of MessageSectionWithSig_deleteSig_Results.
type MessageSectionWithSig_deleteSig_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_deleteSig_Results creates a new list of MessageSectionWithSig_deleteSig_Results.
func NewMessageSectionWithSig_deleteSig_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_deleteSig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_deleteSig_Results_List{l}, err
}

func (s MessageSectionWithSig_deleteSig_Results_List) At(i int) MessageSectionWithSig_deleteSig_Results {
	return MessageSectionWithSig_deleteSig_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_deleteSig_Results_List) Set(i int, v MessageSectionWithSig_deleteSig_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_deleteSig_Results_Promise is a wrapper for a MessageSectionWithSig_deleteSig_Results promised by a client call.
type MessageSectionWithSig_deleteSig_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_deleteSig_Results_Promise) Struct() (MessageSectionWithSig_deleteSig_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_deleteSig_Results{s}, err
}

type MessageSectionWithSig_deleteAllSigs_Params struct{ capnp.Struct }

// MessageSectionWithSig_deleteAllSigs_Params_TypeID is the unique identifier for the type MessageSectionWithSig_deleteAllSigs_Params.
const MessageSectionWithSig_deleteAllSigs_Params_TypeID = 0xc698b99f896737c7

func NewMessageSectionWithSig_deleteAllSigs_Params(s *capnp.Segment) (MessageSectionWithSig_deleteAllSigs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteAllSigs_Params{st}, err
}

func NewRootMessageSectionWithSig_deleteAllSigs_Params(s *capnp.Segment) (MessageSectionWithSig_deleteAllSigs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteAllSigs_Params{st}, err
}

func ReadRootMessageSectionWithSig_deleteAllSigs_Params(msg *capnp.Message) (MessageSectionWithSig_deleteAllSigs_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_deleteAllSigs_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_deleteAllSigs_Params) String() string {
	str, _ := text.Marshal(0xc698b99f896737c7, s.Struct)
	return str
}

// MessageSectionWithSig_deleteAllSigs_Params_List is a list of MessageSectionWithSig_deleteAllSigs_Params.
type MessageSectionWithSig_deleteAllSigs_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_deleteAllSigs_Params creates a new list of MessageSectionWithSig_deleteAllSigs_Params.
func NewMessageSectionWithSig_deleteAllSigs_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_deleteAllSigs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_deleteAllSigs_Params_List{l}, err
}

func (s MessageSectionWithSig_deleteAllSigs_Params_List) At(i int) MessageSectionWithSig_deleteAllSigs_Params {
	return MessageSectionWithSig_deleteAllSigs_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_deleteAllSigs_Params_List) Set(i int, v MessageSectionWithSig_deleteAllSigs_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_deleteAllSigs_Params_Promise is a wrapper for a MessageSectionWithSig_deleteAllSigs_Params promised by a client call.
type MessageSectionWithSig_deleteAllSigs_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_deleteAllSigs_Params_Promise) Struct() (MessageSectionWithSig_deleteAllSigs_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_deleteAllSigs_Params{s}, err
}

type MessageSectionWithSig_deleteAllSigs_Results struct{ capnp.Struct }

// MessageSectionWithSig_deleteAllSigs_Results_TypeID is the unique identifier for the type MessageSectionWithSig_deleteAllSigs_Results.
const MessageSectionWithSig_deleteAllSigs_Results_TypeID = 0xf6bdb0430ec96918

func NewMessageSectionWithSig_deleteAllSigs_Results(s *capnp.Segment) (MessageSectionWithSig_deleteAllSigs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteAllSigs_Results{st}, err
}

func NewRootMessageSectionWithSig_deleteAllSigs_Results(s *capnp.Segment) (MessageSectionWithSig_deleteAllSigs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteAllSigs_Results{st}, err
}

func ReadRootMessageSectionWithSig_deleteAllSigs_Results(msg *capnp.Message) (MessageSectionWithSig_deleteAllSigs_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_deleteAllSigs_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_deleteAllSigs_Results) String() string {
	str, _ := text.Marshal(0xf6bdb0430ec96918, s.Struct)
	return str
}

// MessageSectionWithSig_deleteAllSigs_Results_List is a list of MessageSectionWithSig_deleteAllSigs_Results.
type MessageSectionWithSig_deleteAllSigs_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_deleteAllSigs_Results creates a new list of MessageSectionWithSig_deleteAllSigs_Results.
func NewMessageSectionWithSig_deleteAllSigs_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_deleteAllSigs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_deleteAllSigs_Results_List{l}, err
}

func (s MessageSectionWithSig_deleteAllSigs_Results_List) At(i int) MessageSectionWithSig_deleteAllSigs_Results {
	return MessageSectionWithSig_deleteAllSigs_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_deleteAllSigs_Results_List) Set(i int, v MessageSectionWithSig_deleteAllSigs_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_deleteAllSigs_Results_Promise is a wrapper for a MessageSectionWithSig_deleteAllSigs_Results promised by a client call.
type MessageSectionWithSig_deleteAllSigs_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_deleteAllSigs_Results_Promise) Struct() (MessageSectionWithSig_deleteAllSigs_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_deleteAllSigs_Results{s}, err
}

type MessageSectionWithSig_getContext_Params struct{ capnp.Struct }

// MessageSectionWithSig_getContext_Params_TypeID is the unique identifier for the type MessageSectionWithSig_getContext_Params.
const MessageSectionWithSig_getContext_Params_TypeID = 0xdef6357752ebba29

func NewMessageSectionWithSig_getContext_Params(s *capnp.Segment) (MessageSectionWithSig_getContext_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_getContext_Params{st}, err
}

func NewRootMessageSectionWithSig_getContext_Params(s *capnp.Segment) (MessageSectionWithSig_getContext_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_getContext_Params{st}, err
}

func ReadRootMessageSectionWithSig_getContext_Params(msg *capnp.Message) (MessageSectionWithSig_getContext_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_getContext_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_getContext_Params) String() string {
	str, _ := text.Marshal(0xdef6357752ebba29, s.Struct)
	return str
}

// MessageSectionWithSig_getContext_Params_List is a list of MessageSectionWithSig_getContext_Params.
type MessageSectionWithSig_getContext_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_getContext_Params creates a new list of MessageSectionWithSig_getContext_Params.
func NewMessageSectionWithSig_getContext_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_getContext_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_getContext_Params_List{l}, err
}

func (s MessageSectionWithSig_getContext_Params_List) At(i int) MessageSectionWithSig_getContext_Params {
	return MessageSectionWithSig_getContext_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_getContext_Params_List) Set(i int, v MessageSectionWithSig_getContext_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_getContext_Params_Promise is a wrapper for a MessageSectionWithSig_getContext_Params promised by a client call.
type MessageSectionWithSig_getContext_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_getContext_Params_Promise) Struct() (MessageSectionWithSig_getContext_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_getContext_Params{s}, err
}

type MessageSectionWithSig_getContext_Results struct{ capnp.Struct }

// MessageSectionWithSig_getContext_Results_TypeID is the unique identifier for the type MessageSectionWithSig_getContext_Results.
const MessageSectionWithSig_getContext_Results_TypeID = 0xfe7e3774c0f9bf1f

func NewMessageSectionWithSig_getContext_Results(s *capnp.Segment) (MessageSectionWithSig_getContext_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_getContext_Results{st}, err
}

func NewRootMessageSectionWithSig_getContext_Results(s *capnp.Segment) (MessageSectionWithSig_getContext_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_getContext_Results{st}, err
}

func ReadRootMessageSectionWithSig_getContext_Results(msg *capnp.Message) (MessageSectionWithSig_getContext_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_getContext_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_getContext_Results) String() string {
	str, _ := text.Marshal(0xfe7e3774c0f9bf1f, s.Struct)
	return str
}

func (s MessageSectionWithSig_getContext_Results) Context() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MessageSectionWithSig_getContext_Results) HasContext() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_getContext_Results) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MessageSectionWithSig_getContext_Results) SetContext(v string) error {
	return s.Struct.SetText(0, v)
}

// MessageSectionWithSig_getContext_Results_List is a list of MessageSectionWithSig_getContext_Results.
type MessageSectionWithSig_getContext_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_getContext_Results creates a new list of MessageSectionWithSig_getContext_Results.
func NewMessageSectionWithSig_getContext_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_getContext_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_getContext_Results_List{l}, err
}

func (s MessageSectionWithSig_getContext_Results_List) At(i int) MessageSectionWithSig_getContext_Results {
	return MessageSectionWithSig_getContext_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_getContext_Results_List) Set(i int, v MessageSectionWithSig_getContext_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_getContext_Results_Promise is a wrapper for a MessageSectionWithSig_getContext_Results promised by a client call.
type MessageSectionWithSig_getContext_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_getContext_Results_Promise) Struct() (MessageSectionWithSig_getContext_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_getContext_Results{s}, err
}

type MessageSectionWithSig_getSubjectZone_Params struct{ capnp.Struct }

// MessageSectionWithSig_getSubjectZone_Params_TypeID is the unique identifier for the type MessageSectionWithSig_getSubjectZone_Params.
const MessageSectionWithSig_getSubjectZone_Params_TypeID = 0xd48a054099ff07a6

func NewMessageSectionWithSig_getSubjectZone_Params(s *capnp.Segment) (MessageSectionWithSig_getSubjectZone_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_getSubjectZone_Params{st}, err
}

func NewRootMessageSectionWithSig_getSubjectZone_Params(s *capnp.Segment) (MessageSectionWithSig_getSubjectZone_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_getSubjectZone_Params{st}, err
}

func ReadRootMessageSectionWithSig_getSubjectZone_Params(msg *capnp.Message) (MessageSectionWithSig_getSubjectZone_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_getSubjectZone_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_getSubjectZone_Params) String() string {
	str, _ := text.Marshal(0xd48a054099ff07a6, s.Struct)
	return str
}

// MessageSectionWithSig_getSubjectZone_Params_List is a list of MessageSectionWithSig_getSubjectZone_Params.
type MessageSectionWithSig_getSubjectZone_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_getSubjectZone_Params creates a new list of MessageSectionWithSig_getSubjectZone_Params.
func NewMessageSectionWithSig_getSubjectZone_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_getSubjectZone_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_getSubjectZone_Params_List{l}, err
}

func (s MessageSectionWithSig_getSubjectZone_Params_List) At(i int) MessageSectionWithSig_getSubjectZone_Params {
	return MessageSectionWithSig_getSubjectZone_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_getSubjectZone_Params_List) Set(i int, v MessageSectionWithSig_getSubjectZone_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_getSubjectZone_Params_Promise is a wrapper for a MessageSectionWithSig_getSubjectZone_Params promised by a client call.
type MessageSectionWithSig_getSubjectZone_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_getSubjectZone_Params_Promise) Struct() (MessageSectionWithSig_getSubjectZone_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_getSubjectZone_Params{s}, err
}

type MessageSectionWithSig_getSubjectZone_Results struct{ capnp.Struct }

// MessageSectionWithSig_getSubjectZone_Results_TypeID is the unique identifier for the type MessageSectionWithSig_getSubjectZone_Results.
const MessageSectionWithSig_getSubjectZone_Results_TypeID = 0xc660dbd95ff47272

func NewMessageSectionWithSig_getSubjectZone_Results(s *capnp.Segment) (MessageSectionWithSig_getSubjectZone_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_getSubjectZone_Results{st}, err
}

func NewRootMessageSectionWithSig_getSubjectZone_Results(s *capnp.Segment) (MessageSectionWithSig_getSubjectZone_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_getSubjectZone_Results{st}, err
}

func ReadRootMessageSectionWithSig_getSubjectZone_Results(msg *capnp.Message) (MessageSectionWithSig_getSubjectZone_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_getSubjectZone_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_getSubjectZone_Results) String() string {
	str, _ := text.Marshal(0xc660dbd95ff47272, s.Struct)
	return str
}

func (s MessageSectionWithSig_getSubjectZone_Results) Zone() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MessageSectionWithSig_getSubjectZone_Results) HasZone() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_getSubjectZone_Results) ZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MessageSectionWithSig_getSubjectZone_Results) SetZone(v string) error {
	return s.Struct.SetText(0, v)
}

// MessageSectionWithSig_getSubjectZone_Results_List is a list of MessageSectionWithSig_getSubjectZone_Results.
type MessageSectionWithSig_getSubjectZone_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_getSubjectZone_Results creates a new list of MessageSectionWithSig_getSubjectZone_Results.
func NewMessageSectionWithSig_getSubjectZone_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_getSubjectZone_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_getSubjectZone_Results_List{l}, err
}

func (s MessageSectionWithSig_getSubjectZone_Results_List) At(i int) MessageSectionWithSig_getSubjectZone_Results {
	return MessageSectionWithSig_getSubjectZone_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_getSubjectZone_Results_List) Set(i int, v MessageSectionWithSig_getSubjectZone_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_getSubjectZone_Results_Promise is a wrapper for a MessageSectionWithSig_getSubjectZone_Results promised by a client call.
type MessageSectionWithSig_getSubjectZone_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_getSubjectZone_Results_Promise) Struct() (MessageSectionWithSig_getSubjectZone_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_getSubjectZone_Results{s}, err
}

type MessageSectionWithSig_createStub_Params struct{ capnp.Struct }

// MessageSectionWithSig_createStub_Params_TypeID is the unique identifier for the type MessageSectionWithSig_createStub_Params.
const MessageSectionWithSig_createStub_Params_TypeID = 0xa23710e0ed103b12

func NewMessageSectionWithSig_createStub_Params(s *capnp.Segment) (MessageSectionWithSig_createStub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_createStub_Params{st}, err
}

func NewRootMessageSectionWithSig_createStub_Params(s *capnp.Segment) (MessageSectionWithSig_createStub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_createStub_Params{st}, err
}

func ReadRootMessageSectionWithSig_createStub_Params(msg *capnp.Message) (MessageSectionWithSig_createStub_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_createStub_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_createStub_Params) String() string {
	str, _ := text.Marshal(0xa23710e0ed103b12, s.Struct)
	return str
}

// MessageSectionWithSig_createStub_Params_List is a list of MessageSectionWithSig_createStub_Params.
type MessageSectionWithSig_createStub_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_createStub_Params creates a new list of MessageSectionWithSig_createStub_Params.
func NewMessageSectionWithSig_createStub_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_createStub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_createStub_Params_List{l}, err
}

func (s MessageSectionWithSig_createStub_Params_List) At(i int) MessageSectionWithSig_createStub_Params {
	return MessageSectionWithSig_createStub_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_createStub_Params_List) Set(i int, v MessageSectionWithSig_createStub_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_createStub_Params_Promise is a wrapper for a MessageSectionWithSig_createStub_Params promised by a client call.
type MessageSectionWithSig_createStub_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_createStub_Params_Promise) Struct() (MessageSectionWithSig_createStub_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_createStub_Params{s}, err
}

type MessageSectionWithSig_createStub_Results struct{ capnp.Struct }

// MessageSectionWithSig_createStub_Results_TypeID is the unique identifier for the type MessageSectionWithSig_createStub_Results.
const MessageSectionWithSig_createStub_Results_TypeID = 0x9cbf543afc5b2ef8

func NewMessageSectionWithSig_createStub_Results(s *capnp.Segment) (MessageSectionWithSig_createStub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_createStub_Results{st}, err
}

func NewRootMessageSectionWithSig_createStub_Results(s *capnp.Segment) (MessageSectionWithSig_createStub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_createStub_Results{st}, err
}

func ReadRootMessageSectionWithSig_createStub_Results(msg *capnp.Message) (MessageSectionWithSig_createStub_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_createStub_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_createStub_Results) String() string {
	str, _ := text.Marshal(0x9cbf543afc5b2ef8, s.Struct)
	return str
}

func (s MessageSectionWithSig_createStub_Results) Section() MessageSectionWithSig {
	p, _ := s.Struct.Ptr(0)
	return MessageSectionWithSig{Client: p.Interface().Client()}
}

func (s MessageSectionWithSig_createStub_Results) HasSection() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_createStub_Results) SetSection(v MessageSectionWithSig) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// MessageSectionWithSig_createStub_Results_List is a list of MessageSectionWithSig_createStub_Results.
type MessageSectionWithSig_createStub_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_createStub_Results creates a new list of MessageSectionWithSig_createStub_Results.
func NewMessageSectionWithSig_createStub_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_createStub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_createStub_Results_List{l}, err
}

func (s MessageSectionWithSig_createStub_Results_List) At(i int) MessageSectionWithSig_createStub_Results {
	return MessageSectionWithSig_createStub_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_createStub_Results_List) Set(i int, v MessageSectionWithSig_createStub_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_createStub_Results_Promise is a wrapper for a MessageSectionWithSig_createStub_Results promised by a client call.
type MessageSectionWithSig_createStub_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_createStub_Results_Promise) Struct() (MessageSectionWithSig_createStub_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_createStub_Results{s}, err
}

func (p MessageSectionWithSig_createStub_Results_Promise) Section() MessageSectionWithSig {
	return MessageSectionWithSig{Client: p.Pipeline.GetPipeline(0).Client()}
}

type MessageSectionWithSig_validFrom_Params struct{ capnp.Struct }

// MessageSectionWithSig_validFrom_Params_TypeID is the unique identifier for the type MessageSectionWithSig_validFrom_Params.
const MessageSectionWithSig_validFrom_Params_TypeID = 0x85070a6faf2dcb4d

func NewMessageSectionWithSig_validFrom_Params(s *capnp.Segment) (MessageSectionWithSig_validFrom_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_validFrom_Params{st}, err
}

func NewRootMessageSectionWithSig_validFrom_Params(s *capnp.Segment) (MessageSectionWithSig_validFrom_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_validFrom_Params{st}, err
}

func ReadRootMessageSectionWithSig_validFrom_Params(msg *capnp.Message) (MessageSectionWithSig_validFrom_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_validFrom_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_validFrom_Params) String() string {
	str, _ := text.Marshal(0x85070a6faf2dcb4d, s.Struct)
	return str
}

// MessageSectionWithSig_validFrom_Params_List is a list of MessageSectionWithSig_validFrom_Params.
type MessageSectionWithSig_validFrom_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_validFrom_Params creates a new list of MessageSectionWithSig_validFrom_Params.
func NewMessageSectionWithSig_validFrom_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_validFrom_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_validFrom_Params_List{l}, err
}

func (s MessageSectionWithSig_validFrom_Params_List) At(i int) MessageSectionWithSig_validFrom_Params {
	return MessageSectionWithSig_validFrom_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_validFrom_Params_List) Set(i int, v MessageSectionWithSig_validFrom_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_validFrom_Params_Promise is a wrapper for a MessageSectionWithSig_validFrom_Params promised by a client call.
type MessageSectionWithSig_validFrom_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_validFrom_Params_Promise) Struct() (MessageSectionWithSig_validFrom_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_validFrom_Params{s}, err
}

type MessageSectionWithSig_validFrom_Results struct{ capnp.Struct }

// MessageSectionWithSig_validFrom_Results_TypeID is the unique identifier for the type MessageSectionWithSig_validFrom_Results.
const MessageSectionWithSig_validFrom_Results_TypeID = 0xddcec9b635b388d9

func NewMessageSectionWithSig_validFrom_Results(s *capnp.Segment) (MessageSectionWithSig_validFrom_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_validFrom_Results{st}, err
}

func NewRootMessageSectionWithSig_validFrom_Results(s *capnp.Segment) (MessageSectionWithSig_validFrom_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_validFrom_Results{st}, err
}

func ReadRootMessageSectionWithSig_validFrom_Results(msg *capnp.Message) (MessageSectionWithSig_validFrom_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_validFrom_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_validFrom_Results) String() string {
	str, _ := text.Marshal(0xddcec9b635b388d9, s.Struct)
	return str
}

func (s MessageSectionWithSig_validFrom_Results) ValidFrom() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s MessageSectionWithSig_validFrom_Results) SetValidFrom(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// MessageSectionWithSig_validFrom_Results_List is a list of MessageSectionWithSig_validFrom_Results.
type MessageSectionWithSig_validFrom_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_validFrom_Results creates a new list of MessageSectionWithSig_validFrom_Results.
func NewMessageSectionWithSig_validFrom_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_validFrom_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MessageSectionWithSig_validFrom_Results_List{l}, err
}

func (s MessageSectionWithSig_validFrom_Results_List) At(i int) MessageSectionWithSig_validFrom_Results {
	return MessageSectionWithSig_validFrom_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_validFrom_Results_List) Set(i int, v MessageSectionWithSig_validFrom_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_validFrom_Results_Promise is a wrapper for a MessageSectionWithSig_validFrom_Results promised by a client call.
type MessageSectionWithSig_validFrom_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_validFrom_Results_Promise) Struct() (MessageSectionWithSig_validFrom_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_validFrom_Results{s}, err
}

type MessageSectionWithSig_validUntil_Params struct{ capnp.Struct }

// MessageSectionWithSig_validUntil_Params_TypeID is the unique identifier for the type MessageSectionWithSig_validUntil_Params.
const MessageSectionWithSig_validUntil_Params_TypeID = 0xf53b9c54e2e0158b

func NewMessageSectionWithSig_validUntil_Params(s *capnp.Segment) (MessageSectionWithSig_validUntil_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_validUntil_Params{st}, err
}

func NewRootMessageSectionWithSig_validUntil_Params(s *capnp.Segment) (MessageSectionWithSig_validUntil_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_validUntil_Params{st}, err
}

func ReadRootMessageSectionWithSig_validUntil_Params(msg *capnp.Message) (MessageSectionWithSig_validUntil_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_validUntil_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_validUntil_Params) String() string {
	str, _ := text.Marshal(0xf53b9c54e2e0158b, s.Struct)
	return str
}

// MessageSectionWithSig_validUntil_Params_List is a list of MessageSectionWithSig_validUntil_Params.
type MessageSectionWithSig_validUntil_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_validUntil_Params creates a new list of MessageSectionWithSig_validUntil_Params.
func NewMessageSectionWithSig_validUntil_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_validUntil_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_validUntil_Params_List{l}, err
}

func (s MessageSectionWithSig_validUntil_Params_List) At(i int) MessageSectionWithSig_validUntil_Params {
	return MessageSectionWithSig_validUntil_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_validUntil_Params_List) Set(i int, v MessageSectionWithSig_validUntil_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_validUntil_Params_Promise is a wrapper for a MessageSectionWithSig_validUntil_Params promised by a client call.
type MessageSectionWithSig_validUntil_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_validUntil_Params_Promise) Struct() (MessageSectionWithSig_validUntil_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_validUntil_Params{s}, err
}

type MessageSectionWithSig_validUntil_Results struct{ capnp.Struct }

// MessageSectionWithSig_validUntil_Results_TypeID is the unique identifier for the type MessageSectionWithSig_validUntil_Results.
const MessageSectionWithSig_validUntil_Results_TypeID = 0x838419d256dc1071

func NewMessageSectionWithSig_validUntil_Results(s *capnp.Segment) (MessageSectionWithSig_validUntil_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_validUntil_Results{st}, err
}

func NewRootMessageSectionWithSig_validUntil_Results(s *capnp.Segment) (MessageSectionWithSig_validUntil_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_validUntil_Results{st}, err
}

func ReadRootMessageSectionWithSig_validUntil_Results(msg *capnp.Message) (MessageSectionWithSig_validUntil_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_validUntil_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_validUntil_Results) String() string {
	str, _ := text.Marshal(0x838419d256dc1071, s.Struct)
	return str
}

func (s MessageSectionWithSig_validUntil_Results) ValidUntil() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s MessageSectionWithSig_validUntil_Results) SetValidUntil(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// MessageSectionWithSig_validUntil_Results_List is a list of MessageSectionWithSig_validUntil_Results.
type MessageSectionWithSig_validUntil_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_validUntil_Results creates a new list of MessageSectionWithSig_validUntil_Results.
func NewMessageSectionWithSig_validUntil_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_validUntil_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MessageSectionWithSig_validUntil_Results_List{l}, err
}

func (s MessageSectionWithSig_validUntil_Results_List) At(i int) MessageSectionWithSig_validUntil_Results {
	return MessageSectionWithSig_validUntil_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_validUntil_Results_List) Set(i int, v MessageSectionWithSig_validUntil_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_validUntil_Results_Promise is a wrapper for a MessageSectionWithSig_validUntil_Results promised by a client call.
type MessageSectionWithSig_validUntil_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_validUntil_Results_Promise) Struct() (MessageSectionWithSig_validUntil_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_validUntil_Results{s}, err
}

type MessageSectionWithSig_hash_Params struct{ capnp.Struct }

// MessageSectionWithSig_hash_Params_TypeID is the unique identifier for the type MessageSectionWithSig_hash_Params.
const MessageSectionWithSig_hash_Params_TypeID = 0x98ebe8ee44b55fad

func NewMessageSectionWithSig_hash_Params(s *capnp.Segment) (MessageSectionWithSig_hash_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_hash_Params{st}, err
}

func NewRootMessageSectionWithSig_hash_Params(s *capnp.Segment) (MessageSectionWithSig_hash_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_hash_Params{st}, err
}

func ReadRootMessageSectionWithSig_hash_Params(msg *capnp.Message) (MessageSectionWithSig_hash_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_hash_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_hash_Params) String() string {
	str, _ := text.Marshal(0x98ebe8ee44b55fad, s.Struct)
	return str
}

// MessageSectionWithSig_hash_Params_List is a list of MessageSectionWithSig_hash_Params.
type MessageSectionWithSig_hash_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_hash_Params creates a new list of MessageSectionWithSig_hash_Params.
func NewMessageSectionWithSig_hash_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_hash_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_hash_Params_List{l}, err
}

func (s MessageSectionWithSig_hash_Params_List) At(i int) MessageSectionWithSig_hash_Params {
	return MessageSectionWithSig_hash_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_hash_Params_List) Set(i int, v MessageSectionWithSig_hash_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_hash_Params_Promise is a wrapper for a MessageSectionWithSig_hash_Params promised by a client call.
type MessageSectionWithSig_hash_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_hash_Params_Promise) Struct() (MessageSectionWithSig_hash_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_hash_Params{s}, err
}

type MessageSectionWithSig_hash_Results struct{ capnp.Struct }

// MessageSectionWithSig_hash_Results_TypeID is the unique identifier for the type MessageSectionWithSig_hash_Results.
const MessageSectionWithSig_hash_Results_TypeID = 0x897430f9f1af94c2

func NewMessageSectionWithSig_hash_Results(s *capnp.Segment) (MessageSectionWithSig_hash_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_hash_Results{st}, err
}

func NewRootMessageSectionWithSig_hash_Results(s *capnp.Segment) (MessageSectionWithSig_hash_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_hash_Results{st}, err
}

func ReadRootMessageSectionWithSig_hash_Results(msg *capnp.Message) (MessageSectionWithSig_hash_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_hash_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_hash_Results) String() string {
	str, _ := text.Marshal(0x897430f9f1af94c2, s.Struct)
	return str
}

func (s MessageSectionWithSig_hash_Results) Hash() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MessageSectionWithSig_hash_Results) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_hash_Results) HashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MessageSectionWithSig_hash_Results) SetHash(v string) error {
	return s.Struct.SetText(0, v)
}

// MessageSectionWithSig_hash_Results_List is a list of MessageSectionWithSig_hash_Results.
type MessageSectionWithSig_hash_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_hash_Results creates a new list of MessageSectionWithSig_hash_Results.
func NewMessageSectionWithSig_hash_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_hash_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_hash_Results_List{l}, err
}

func (s MessageSectionWithSig_hash_Results_List) At(i int) MessageSectionWithSig_hash_Results {
	return MessageSectionWithSig_hash_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_hash_Results_List) Set(i int, v MessageSectionWithSig_hash_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_hash_Results_Promise is a wrapper for a MessageSectionWithSig_hash_Results promised by a client call.
type MessageSectionWithSig_hash_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_hash_Results_Promise) Struct() (MessageSectionWithSig_hash_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_hash_Results{s}, err
}

type Interval struct{ Client capnp.Client }

// Interval_TypeID is the unique identifier for the type Interval.
const Interval_TypeID = 0xb288e1a44d8ed064

func (c Interval) Begin(ctx context.Context, params func(Interval_begin_Params) error, opts ...capnp.CallOption) Interval_begin_Results_Promise {
	if c.Client == nil {
		return Interval_begin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "begin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Interval_begin_Params{Struct: s}) }
	}
	return Interval_begin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Interval) End(ctx context.Context, params func(Interval_end_Params) error, opts ...capnp.CallOption) Interval_end_Results_Promise {
	if c.Client == nil {
		return Interval_end_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "end",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Interval_end_Params{Struct: s}) }
	}
	return Interval_end_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Interval_Server interface {
	Begin(Interval_begin) error

	End(Interval_end) error
}

func Interval_ServerToClient(s Interval_Server) Interval {
	c, _ := s.(server.Closer)
	return Interval{Client: server.New(Interval_Methods(nil, s), c)}
}

func Interval_Methods(methods []server.Method, s Interval_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "begin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Interval_begin{c, opts, Interval_begin_Params{Struct: p}, Interval_begin_Results{Struct: r}}
			return s.Begin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "end",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Interval_end{c, opts, Interval_end_Params{Struct: p}, Interval_end_Results{Struct: r}}
			return s.End(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Interval_begin holds the arguments for a server call to Interval.begin.
type Interval_begin struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Interval_begin_Params
	Results Interval_begin_Results
}

// Interval_end holds the arguments for a server call to Interval.end.
type Interval_end struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Interval_end_Params
	Results Interval_end_Results
}

type Interval_begin_Params struct{ capnp.Struct }

// Interval_begin_Params_TypeID is the unique identifier for the type Interval_begin_Params.
const Interval_begin_Params_TypeID = 0xa00b05371373e6d6

func NewInterval_begin_Params(s *capnp.Segment) (Interval_begin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Interval_begin_Params{st}, err
}

func NewRootInterval_begin_Params(s *capnp.Segment) (Interval_begin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Interval_begin_Params{st}, err
}

func ReadRootInterval_begin_Params(msg *capnp.Message) (Interval_begin_Params, error) {
	root, err := msg.RootPtr()
	return Interval_begin_Params{root.Struct()}, err
}

func (s Interval_begin_Params) String() string {
	str, _ := text.Marshal(0xa00b05371373e6d6, s.Struct)
	return str
}

// Interval_begin_Params_List is a list of Interval_begin_Params.
type Interval_begin_Params_List struct{ capnp.List }

// NewInterval_begin_Params creates a new list of Interval_begin_Params.
func NewInterval_begin_Params_List(s *capnp.Segment, sz int32) (Interval_begin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Interval_begin_Params_List{l}, err
}

func (s Interval_begin_Params_List) At(i int) Interval_begin_Params {
	return Interval_begin_Params{s.List.Struct(i)}
}

func (s Interval_begin_Params_List) Set(i int, v Interval_begin_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// Interval_begin_Params_Promise is a wrapper for a Interval_begin_Params promised by a client call.
type Interval_begin_Params_Promise struct{ *capnp.Pipeline }

func (p Interval_begin_Params_Promise) Struct() (Interval_begin_Params, error) {
	s, err := p.Pipeline.Struct()
	return Interval_begin_Params{s}, err
}

type Interval_begin_Results struct{ capnp.Struct }

// Interval_begin_Results_TypeID is the unique identifier for the type Interval_begin_Results.
const Interval_begin_Results_TypeID = 0x9ccb60a0785e0ebe

func NewInterval_begin_Results(s *capnp.Segment) (Interval_begin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Interval_begin_Results{st}, err
}

func NewRootInterval_begin_Results(s *capnp.Segment) (Interval_begin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Interval_begin_Results{st}, err
}

func ReadRootInterval_begin_Results(msg *capnp.Message) (Interval_begin_Results, error) {
	root, err := msg.RootPtr()
	return Interval_begin_Results{root.Struct()}, err
}

func (s Interval_begin_Results) String() string {
	str, _ := text.Marshal(0x9ccb60a0785e0ebe, s.Struct)
	return str
}

func (s Interval_begin_Results) Begin() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Interval_begin_Results) HasBegin() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Interval_begin_Results) BeginBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Interval_begin_Results) SetBegin(v string) error {
	return s.Struct.SetText(0, v)
}

// Interval_begin_Results_List is a list of Interval_begin_Results.
type Interval_begin_Results_List struct{ capnp.List }

// NewInterval_begin_Results creates a new list of Interval_begin_Results.
func NewInterval_begin_Results_List(s *capnp.Segment, sz int32) (Interval_begin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Interval_begin_Results_List{l}, err
}

func (s Interval_begin_Results_List) At(i int) Interval_begin_Results {
	return Interval_begin_Results{s.List.Struct(i)}
}

func (s Interval_begin_Results_List) Set(i int, v Interval_begin_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// Interval_begin_Results_Promise is a wrapper for a Interval_begin_Results promised by a client call.
type Interval_begin_Results_Promise struct{ *capnp.Pipeline }

func (p Interval_begin_Results_Promise) Struct() (Interval_begin_Results, error) {
	s, err := p.Pipeline.Struct()
	return Interval_begin_Results{s}, err
}

type Interval_end_Params struct{ capnp.Struct }

// Interval_end_Params_TypeID is the unique identifier for the type Interval_end_Params.
const Interval_end_Params_TypeID = 0xe37f36219a0e109a

func NewInterval_end_Params(s *capnp.Segment) (Interval_end_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Interval_end_Params{st}, err
}

func NewRootInterval_end_Params(s *capnp.Segment) (Interval_end_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Interval_end_Params{st}, err
}

func ReadRootInterval_end_Params(msg *capnp.Message) (Interval_end_Params, error) {
	root, err := msg.RootPtr()
	return Interval_end_Params{root.Struct()}, err
}

func (s Interval_end_Params) String() string {
	str, _ := text.Marshal(0xe37f36219a0e109a, s.Struct)
	return str
}

// Interval_end_Params_List is a list of Interval_end_Params.
type Interval_end_Params_List struct{ capnp.List }

// NewInterval_end_Params creates a new list of Interval_end_Params.
func NewInterval_end_Params_List(s *capnp.Segment, sz int32) (Interval_end_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Interval_end_Params_List{l}, err
}

func (s Interval_end_Params_List) At(i int) Interval_end_Params {
	return Interval_end_Params{s.List.Struct(i)}
}

func (s Interval_end_Params_List) Set(i int, v Interval_end_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// Interval_end_Params_Promise is a wrapper for a Interval_end_Params promised by a client call.
type Interval_end_Params_Promise struct{ *capnp.Pipeline }

func (p Interval_end_Params_Promise) Struct() (Interval_end_Params, error) {
	s, err := p.Pipeline.Struct()
	return Interval_end_Params{s}, err
}

type Interval_end_Results struct{ capnp.Struct }

// Interval_end_Results_TypeID is the unique identifier for the type Interval_end_Results.
const Interval_end_Results_TypeID = 0xe0b5130f36b01c23

func NewInterval_end_Results(s *capnp.Segment) (Interval_end_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Interval_end_Results{st}, err
}

func NewRootInterval_end_Results(s *capnp.Segment) (Interval_end_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Interval_end_Results{st}, err
}

func ReadRootInterval_end_Results(msg *capnp.Message) (Interval_end_Results, error) {
	root, err := msg.RootPtr()
	return Interval_end_Results{root.Struct()}, err
}

func (s Interval_end_Results) String() string {
	str, _ := text.Marshal(0xe0b5130f36b01c23, s.Struct)
	return str
}

func (s Interval_end_Results) End() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Interval_end_Results) HasEnd() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Interval_end_Results) EndBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Interval_end_Results) SetEnd(v string) error {
	return s.Struct.SetText(0, v)
}

// Interval_end_Results_List is a list of Interval_end_Results.
type Interval_end_Results_List struct{ capnp.List }

// NewInterval_end_Results creates a new list of Interval_end_Results.
func NewInterval_end_Results_List(s *capnp.Segment, sz int32) (Interval_end_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Interval_end_Results_List{l}, err
}

func (s Interval_end_Results_List) At(i int) Interval_end_Results {
	return Interval_end_Results{s.List.Struct(i)}
}

func (s Interval_end_Results_List) Set(i int, v Interval_end_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// Interval_end_Results_Promise is a wrapper for a Interval_end_Results promised by a client call.
type Interval_end_Results_Promise struct{ *capnp.Pipeline }

func (p Interval_end_Results_Promise) Struct() (Interval_end_Results, error) {
	s, err := p.Pipeline.Struct()
	return Interval_end_Results{s}, err
}

type Hashable struct{ Client capnp.Client }

// Hashable_TypeID is the unique identifier for the type Hashable.
const Hashable_TypeID = 0xa26fe791fa514c3f

func (c Hashable) Hash(ctx context.Context, params func(Hashable_hash_Params) error, opts ...capnp.CallOption) Hashable_hash_Results_Promise {
	if c.Client == nil {
		return Hashable_hash_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa26fe791fa514c3f,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Hashable",
			MethodName:    "hash",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Hashable_hash_Params{Struct: s}) }
	}
	return Hashable_hash_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Hashable_Server interface {
	Hash(Hashable_hash) error
}

func Hashable_ServerToClient(s Hashable_Server) Hashable {
	c, _ := s.(server.Closer)
	return Hashable{Client: server.New(Hashable_Methods(nil, s), c)}
}

func Hashable_Methods(methods []server.Method, s Hashable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa26fe791fa514c3f,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Hashable",
			MethodName:    "hash",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Hashable_hash{c, opts, Hashable_hash_Params{Struct: p}, Hashable_hash_Results{Struct: r}}
			return s.Hash(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Hashable_hash holds the arguments for a server call to Hashable.hash.
type Hashable_hash struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Hashable_hash_Params
	Results Hashable_hash_Results
}

type Hashable_hash_Params struct{ capnp.Struct }

// Hashable_hash_Params_TypeID is the unique identifier for the type Hashable_hash_Params.
const Hashable_hash_Params_TypeID = 0x920d76878fcb1040

func NewHashable_hash_Params(s *capnp.Segment) (Hashable_hash_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hashable_hash_Params{st}, err
}

func NewRootHashable_hash_Params(s *capnp.Segment) (Hashable_hash_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hashable_hash_Params{st}, err
}

func ReadRootHashable_hash_Params(msg *capnp.Message) (Hashable_hash_Params, error) {
	root, err := msg.RootPtr()
	return Hashable_hash_Params{root.Struct()}, err
}

func (s Hashable_hash_Params) String() string {
	str, _ := text.Marshal(0x920d76878fcb1040, s.Struct)
	return str
}

// Hashable_hash_Params_List is a list of Hashable_hash_Params.
type Hashable_hash_Params_List struct{ capnp.List }

// NewHashable_hash_Params creates a new list of Hashable_hash_Params.
func NewHashable_hash_Params_List(s *capnp.Segment, sz int32) (Hashable_hash_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Hashable_hash_Params_List{l}, err
}

func (s Hashable_hash_Params_List) At(i int) Hashable_hash_Params {
	return Hashable_hash_Params{s.List.Struct(i)}
}

func (s Hashable_hash_Params_List) Set(i int, v Hashable_hash_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// Hashable_hash_Params_Promise is a wrapper for a Hashable_hash_Params promised by a client call.
type Hashable_hash_Params_Promise struct{ *capnp.Pipeline }

func (p Hashable_hash_Params_Promise) Struct() (Hashable_hash_Params, error) {
	s, err := p.Pipeline.Struct()
	return Hashable_hash_Params{s}, err
}

type Hashable_hash_Results struct{ capnp.Struct }

// Hashable_hash_Results_TypeID is the unique identifier for the type Hashable_hash_Results.
const Hashable_hash_Results_TypeID = 0x89bef2e379450ee3

func NewHashable_hash_Results(s *capnp.Segment) (Hashable_hash_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hashable_hash_Results{st}, err
}

func NewRootHashable_hash_Results(s *capnp.Segment) (Hashable_hash_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hashable_hash_Results{st}, err
}

func ReadRootHashable_hash_Results(msg *capnp.Message) (Hashable_hash_Results, error) {
	root, err := msg.RootPtr()
	return Hashable_hash_Results{root.Struct()}, err
}

func (s Hashable_hash_Results) String() string {
	str, _ := text.Marshal(0x89bef2e379450ee3, s.Struct)
	return str
}

func (s Hashable_hash_Results) Hash() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Hashable_hash_Results) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Hashable_hash_Results) HashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Hashable_hash_Results) SetHash(v string) error {
	return s.Struct.SetText(0, v)
}

// Hashable_hash_Results_List is a list of Hashable_hash_Results.
type Hashable_hash_Results_List struct{ capnp.List }

// NewHashable_hash_Results creates a new list of Hashable_hash_Results.
func NewHashable_hash_Results_List(s *capnp.Segment, sz int32) (Hashable_hash_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Hashable_hash_Results_List{l}, err
}

func (s Hashable_hash_Results_List) At(i int) Hashable_hash_Results {
	return Hashable_hash_Results{s.List.Struct(i)}
}

func (s Hashable_hash_Results_List) Set(i int, v Hashable_hash_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// Hashable_hash_Results_Promise is a wrapper for a Hashable_hash_Results promised by a client call.
type Hashable_hash_Results_Promise struct{ *capnp.Pipeline }

func (p Hashable_hash_Results_Promise) Struct() (Hashable_hash_Results, error) {
	s, err := p.Pipeline.Struct()
	return Hashable_hash_Results{s}, err
}

type AssertionSection struct{ capnp.Struct }

// AssertionSection_TypeID is the unique identifier for the type AssertionSection.
const AssertionSection_TypeID = 0xecb99c4b492abf4a

func NewAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func NewRootAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func ReadRootAssertionSection(msg *capnp.Message) (AssertionSection, error) {
	root, err := msg.RootPtr()
	return AssertionSection{root.Struct()}, err
}

func (s AssertionSection) String() string {
	str, _ := text.Marshal(0xecb99c4b492abf4a, s.Struct)
	return str
}

func (s AssertionSection) SubjectName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s AssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(1)
	return Obj_List{List: p.List()}, err
}

func (s AssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s AssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(3, v)
}

func (s AssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s AssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s AssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s AssertionSection) SetContext(v string) error {
	return s.Struct.SetText(4, v)
}

// AssertionSection_List is a list of AssertionSection.
type AssertionSection_List struct{ capnp.List }

// NewAssertionSection creates a new list of AssertionSection.
func NewAssertionSection_List(s *capnp.Segment, sz int32) (AssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return AssertionSection_List{l}, err
}

func (s AssertionSection_List) At(i int) AssertionSection { return AssertionSection{s.List.Struct(i)} }

func (s AssertionSection_List) Set(i int, v AssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AssertionSection_Promise is a wrapper for a AssertionSection promised by a client call.
type AssertionSection_Promise struct{ *capnp.Pipeline }

func (p AssertionSection_Promise) Struct() (AssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AssertionSection{s}, err
}

type ShardSection struct{ capnp.Struct }

// ShardSection_TypeID is the unique identifier for the type ShardSection.
const ShardSection_TypeID = 0xc0d7ec4193d608ef

func NewShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func NewRootShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func ReadRootShardSection(msg *capnp.Message) (ShardSection, error) {
	root, err := msg.RootPtr()
	return ShardSection{root.Struct()}, err
}

func (s ShardSection) String() string {
	str, _ := text.Marshal(0xc0d7ec4193d608ef, s.Struct)
	return str
}

func (s ShardSection) Content() (AssertionSection_List, error) {
	p, err := s.Struct.Ptr(0)
	return AssertionSection_List{List: p.List()}, err
}

func (s ShardSection) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetContent(v AssertionSection_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AssertionSection_List, preferring placement in s's segment.
func (s ShardSection) NewContent(n int32) (AssertionSection_List, error) {
	l, err := NewAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ShardSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(1)
	return Signature_List{List: p.List()}, err
}

func (s ShardSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ShardSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s ShardSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ShardSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ShardSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ShardSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ShardSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s ShardSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ShardSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s ShardSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

func (s ShardSection) RangeFrom() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s ShardSection) HasRangeFrom() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeFromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeFrom(v string) error {
	return s.Struct.SetText(4, v)
}

func (s ShardSection) RangeTo() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s ShardSection) HasRangeTo() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeTo(v string) error {
	return s.Struct.SetText(5, v)
}

// ShardSection_List is a list of ShardSection.
type ShardSection_List struct{ capnp.List }

// NewShardSection creates a new list of ShardSection.
func NewShardSection_List(s *capnp.Segment, sz int32) (ShardSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return ShardSection_List{l}, err
}

func (s ShardSection_List) At(i int) ShardSection { return ShardSection{s.List.Struct(i)} }

func (s ShardSection_List) Set(i int, v ShardSection) error { return s.List.SetStruct(i, v.Struct) }

// ShardSection_Promise is a wrapper for a ShardSection promised by a client call.
type ShardSection_Promise struct{ *capnp.Pipeline }

func (p ShardSection_Promise) Struct() (ShardSection, error) {
	s, err := p.Pipeline.Struct()
	return ShardSection{s}, err
}

type ZoneSection struct{ capnp.Struct }

// ZoneSection_TypeID is the unique identifier for the type ZoneSection.
const ZoneSection_TypeID = 0xcfe323414bf5b98f

func NewZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func NewRootZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func ReadRootZoneSection(msg *capnp.Message) (ZoneSection, error) {
	root, err := msg.RootPtr()
	return ZoneSection{root.Struct()}, err
}

func (s ZoneSection) String() string {
	str, _ := text.Marshal(0xcfe323414bf5b98f, s.Struct)
	return str
}

func (s ZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s ZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ZoneSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ZoneSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ZoneSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ZoneSection) Content() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.PointerList{List: p.List()}, err
}

func (s ZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetContent(v capnp.PointerList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s ZoneSection) NewContent(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// ZoneSection_List is a list of ZoneSection.
type ZoneSection_List struct{ capnp.List }

// NewZoneSection creates a new list of ZoneSection.
func NewZoneSection_List(s *capnp.Segment, sz int32) (ZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return ZoneSection_List{l}, err
}

func (s ZoneSection_List) At(i int) ZoneSection { return ZoneSection{s.List.Struct(i)} }

func (s ZoneSection_List) Set(i int, v ZoneSection) error { return s.List.SetStruct(i, v.Struct) }

// ZoneSection_Promise is a wrapper for a ZoneSection promised by a client call.
type ZoneSection_Promise struct{ *capnp.Pipeline }

func (p ZoneSection_Promise) Struct() (ZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return ZoneSection{s}, err
}

type QuerySection struct{ capnp.Struct }

// QuerySection_TypeID is the unique identifier for the type QuerySection.
const QuerySection_TypeID = 0xcc368c426d5175df

func NewQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return QuerySection{st}, err
}

func NewRootQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return QuerySection{st}, err
}

func ReadRootQuerySection(msg *capnp.Message) (QuerySection, error) {
	root, err := msg.RootPtr()
	return QuerySection{root.Struct()}, err
}

func (s QuerySection) String() string {
	str, _ := text.Marshal(0xcc368c426d5175df, s.Struct)
	return str
}

func (s QuerySection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s QuerySection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s QuerySection) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s QuerySection) HasName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s QuerySection) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s QuerySection) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s QuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s QuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s QuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s QuerySection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s QuerySection) Type() ObjectType {
	return ObjectType(s.Struct.Uint16(0))
}

func (s QuerySection) SetType(v ObjectType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s QuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s QuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s QuerySection) Options() (QueryOption_List, error) {
	p, err := s.Struct.Ptr(3)
	return QueryOption_List{List: p.List()}, err
}

func (s QuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetOptions(v QueryOption_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated QueryOption_List, preferring placement in s's segment.
func (s QuerySection) NewOptions(n int32) (QueryOption_List, error) {
	l, err := NewQueryOption_List(s.Struct.Segment(), n)
	if err != nil {
		return QueryOption_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// QuerySection_List is a list of QuerySection.
type QuerySection_List struct{ capnp.List }

// NewQuerySection creates a new list of QuerySection.
func NewQuerySection_List(s *capnp.Segment, sz int32) (QuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return QuerySection_List{l}, err
}

func (s QuerySection_List) At(i int) QuerySection { return QuerySection{s.List.Struct(i)} }

func (s QuerySection_List) Set(i int, v QuerySection) error { return s.List.SetStruct(i, v.Struct) }

// QuerySection_Promise is a wrapper for a QuerySection promised by a client call.
type QuerySection_Promise struct{ *capnp.Pipeline }

func (p QuerySection_Promise) Struct() (QuerySection, error) {
	s, err := p.Pipeline.Struct()
	return QuerySection{s}, err
}

type QueryOption uint16

// QueryOption_TypeID is the unique identifier for the type QueryOption.
const QueryOption_TypeID = 0xabc9ff4fbb5f0b04

// Values of QueryOption.
const (
	QueryOption_minE2ELatency            QueryOption = 0
	QueryOption_minLastHopAnswerSize     QueryOption = 1
	QueryOption_minInfoLeakage           QueryOption = 2
	QueryOption_cachedAnswersOnly        QueryOption = 3
	QueryOption_expiredAssertionsOk      QueryOption = 4
	QueryOption_tokenTracing             QueryOption = 5
	QueryOption_noVerificationDelegation QueryOption = 6
	QueryOption_noProactiveCaching       QueryOption = 7
)

// String returns the enum's constant name.
func (c QueryOption) String() string {
	switch c {
	case QueryOption_minE2ELatency:
		return "minE2ELatency"
	case QueryOption_minLastHopAnswerSize:
		return "minLastHopAnswerSize"
	case QueryOption_minInfoLeakage:
		return "minInfoLeakage"
	case QueryOption_cachedAnswersOnly:
		return "cachedAnswersOnly"
	case QueryOption_expiredAssertionsOk:
		return "expiredAssertionsOk"
	case QueryOption_tokenTracing:
		return "tokenTracing"
	case QueryOption_noVerificationDelegation:
		return "noVerificationDelegation"
	case QueryOption_noProactiveCaching:
		return "noProactiveCaching"

	default:
		return ""
	}
}

// QueryOptionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func QueryOptionFromString(c string) QueryOption {
	switch c {
	case "minE2ELatency":
		return QueryOption_minE2ELatency
	case "minLastHopAnswerSize":
		return QueryOption_minLastHopAnswerSize
	case "minInfoLeakage":
		return QueryOption_minInfoLeakage
	case "cachedAnswersOnly":
		return QueryOption_cachedAnswersOnly
	case "expiredAssertionsOk":
		return QueryOption_expiredAssertionsOk
	case "tokenTracing":
		return QueryOption_tokenTracing
	case "noVerificationDelegation":
		return QueryOption_noVerificationDelegation
	case "noProactiveCaching":
		return QueryOption_noProactiveCaching

	default:
		return 0
	}
}

type QueryOption_List struct{ capnp.List }

func NewQueryOption_List(s *capnp.Segment, sz int32) (QueryOption_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return QueryOption_List{l.List}, err
}

func (l QueryOption_List) At(i int) QueryOption {
	ul := capnp.UInt16List{List: l.List}
	return QueryOption(ul.At(i))
}

func (l QueryOption_List) Set(i int, v QueryOption) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type ObjectType uint16

// ObjectType_TypeID is the unique identifier for the type ObjectType.
const ObjectType_TypeID = 0xfd4f6f21b80818a8

// Values of ObjectType.
const (
	ObjectType_oTName        ObjectType = 0
	ObjectType_oTIP6Addr     ObjectType = 1
	ObjectType_oTIP4Addr     ObjectType = 2
	ObjectType_oTRedirection ObjectType = 3
	ObjectType_oTDelegation  ObjectType = 4
	ObjectType_oTNameset     ObjectType = 5
	ObjectType_oTCertInfo    ObjectType = 6
	ObjectType_oTServiceInfo ObjectType = 7
	ObjectType_oTRegistrar   ObjectType = 8
	ObjectType_oTRegistrant  ObjectType = 9
	ObjectType_oTInfraKey    ObjectType = 10
	ObjectType_oTExtraKey    ObjectType = 11
)

// String returns the enum's constant name.
func (c ObjectType) String() string {
	switch c {
	case ObjectType_oTName:
		return "oTName"
	case ObjectType_oTIP6Addr:
		return "oTIP6Addr"
	case ObjectType_oTIP4Addr:
		return "oTIP4Addr"
	case ObjectType_oTRedirection:
		return "oTRedirection"
	case ObjectType_oTDelegation:
		return "oTDelegation"
	case ObjectType_oTNameset:
		return "oTNameset"
	case ObjectType_oTCertInfo:
		return "oTCertInfo"
	case ObjectType_oTServiceInfo:
		return "oTServiceInfo"
	case ObjectType_oTRegistrar:
		return "oTRegistrar"
	case ObjectType_oTRegistrant:
		return "oTRegistrant"
	case ObjectType_oTInfraKey:
		return "oTInfraKey"
	case ObjectType_oTExtraKey:
		return "oTExtraKey"

	default:
		return ""
	}
}

// ObjectTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ObjectTypeFromString(c string) ObjectType {
	switch c {
	case "oTName":
		return ObjectType_oTName
	case "oTIP6Addr":
		return ObjectType_oTIP6Addr
	case "oTIP4Addr":
		return ObjectType_oTIP4Addr
	case "oTRedirection":
		return ObjectType_oTRedirection
	case "oTDelegation":
		return ObjectType_oTDelegation
	case "oTNameset":
		return ObjectType_oTNameset
	case "oTCertInfo":
		return ObjectType_oTCertInfo
	case "oTServiceInfo":
		return ObjectType_oTServiceInfo
	case "oTRegistrar":
		return ObjectType_oTRegistrar
	case "oTRegistrant":
		return ObjectType_oTRegistrant
	case "oTInfraKey":
		return ObjectType_oTInfraKey
	case "oTExtraKey":
		return ObjectType_oTExtraKey

	default:
		return 0
	}
}

type ObjectType_List struct{ capnp.List }

func NewObjectType_List(s *capnp.Segment, sz int32) (ObjectType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ObjectType_List{l.List}, err
}

func (l ObjectType_List) At(i int) ObjectType {
	ul := capnp.UInt16List{List: l.List}
	return ObjectType(ul.At(i))
}

func (l ObjectType_List) Set(i int, v ObjectType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type SubjectAddr struct{ capnp.Struct }

// SubjectAddr_TypeID is the unique identifier for the type SubjectAddr.
const SubjectAddr_TypeID = 0xe48faf3beca83da0

func NewSubjectAddr(s *capnp.Segment) (SubjectAddr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SubjectAddr{st}, err
}

func NewRootSubjectAddr(s *capnp.Segment) (SubjectAddr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SubjectAddr{st}, err
}

func ReadRootSubjectAddr(msg *capnp.Message) (SubjectAddr, error) {
	root, err := msg.RootPtr()
	return SubjectAddr{root.Struct()}, err
}

func (s SubjectAddr) String() string {
	str, _ := text.Marshal(0xe48faf3beca83da0, s.Struct)
	return str
}

func (s SubjectAddr) AddressFamily() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SubjectAddr) HasAddressFamily() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SubjectAddr) AddressFamilyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SubjectAddr) SetAddressFamily(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SubjectAddr) PrefixLength() uint32 {
	return s.Struct.Uint32(0)
}

func (s SubjectAddr) SetPrefixLength(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SubjectAddr) Address() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SubjectAddr) HasAddress() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SubjectAddr) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SubjectAddr) SetAddress(v string) error {
	return s.Struct.SetText(1, v)
}

// SubjectAddr_List is a list of SubjectAddr.
type SubjectAddr_List struct{ capnp.List }

// NewSubjectAddr creates a new list of SubjectAddr.
func NewSubjectAddr_List(s *capnp.Segment, sz int32) (SubjectAddr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SubjectAddr_List{l}, err
}

func (s SubjectAddr_List) At(i int) SubjectAddr { return SubjectAddr{s.List.Struct(i)} }

func (s SubjectAddr_List) Set(i int, v SubjectAddr) error { return s.List.SetStruct(i, v.Struct) }

// SubjectAddr_Promise is a wrapper for a SubjectAddr promised by a client call.
type SubjectAddr_Promise struct{ *capnp.Pipeline }

func (p SubjectAddr_Promise) Struct() (SubjectAddr, error) {
	s, err := p.Pipeline.Struct()
	return SubjectAddr{s}, err
}

type AddressAssertionSection struct{ capnp.Struct }

// AddressAssertionSection_TypeID is the unique identifier for the type AddressAssertionSection.
const AddressAssertionSection_TypeID = 0xdbf0b70cd25804f1

func NewAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func NewRootAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func ReadRootAddressAssertionSection(msg *capnp.Message) (AddressAssertionSection, error) {
	root, err := msg.RootPtr()
	return AddressAssertionSection{root.Struct()}, err
}

func (s AddressAssertionSection) String() string {
	str, _ := text.Marshal(0xdbf0b70cd25804f1, s.Struct)
	return str
}

func (s AddressAssertionSection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressAssertionSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressAssertionSection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressAssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(1)
	return Obj_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AddressAssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AddressAssertionSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

// AddressAssertionSection_List is a list of AddressAssertionSection.
type AddressAssertionSection_List struct{ capnp.List }

// NewAddressAssertionSection creates a new list of AddressAssertionSection.
func NewAddressAssertionSection_List(s *capnp.Segment, sz int32) (AddressAssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressAssertionSection_List{l}, err
}

func (s AddressAssertionSection_List) At(i int) AddressAssertionSection {
	return AddressAssertionSection{s.List.Struct(i)}
}

func (s AddressAssertionSection_List) Set(i int, v AddressAssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressAssertionSection_Promise is a wrapper for a AddressAssertionSection promised by a client call.
type AddressAssertionSection_Promise struct{ *capnp.Pipeline }

func (p AddressAssertionSection_Promise) Struct() (AddressAssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressAssertionSection{s}, err
}

func (p AddressAssertionSection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddressZoneSection struct{ capnp.Struct }

// AddressZoneSection_TypeID is the unique identifier for the type AddressZoneSection.
const AddressZoneSection_TypeID = 0xb6e3b8602914cca6

func NewAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func NewRootAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func ReadRootAddressZoneSection(msg *capnp.Message) (AddressZoneSection, error) {
	root, err := msg.RootPtr()
	return AddressZoneSection{root.Struct()}, err
}

func (s AddressZoneSection) String() string {
	str, _ := text.Marshal(0xb6e3b8602914cca6, s.Struct)
	return str
}

func (s AddressZoneSection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressZoneSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressZoneSection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(1)
	return Signature_List{List: p.List()}, err
}

func (s AddressZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AddressZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressZoneSection) Content() (AddressAssertionSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return AddressAssertionSection_List{List: p.List()}, err
}

func (s AddressZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetContent(v AddressAssertionSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AddressAssertionSection_List, preferring placement in s's segment.
func (s AddressZoneSection) NewContent(n int32) (AddressAssertionSection_List, error) {
	l, err := NewAddressAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AddressAssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// AddressZoneSection_List is a list of AddressZoneSection.
type AddressZoneSection_List struct{ capnp.List }

// NewAddressZoneSection creates a new list of AddressZoneSection.
func NewAddressZoneSection_List(s *capnp.Segment, sz int32) (AddressZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressZoneSection_List{l}, err
}

func (s AddressZoneSection_List) At(i int) AddressZoneSection {
	return AddressZoneSection{s.List.Struct(i)}
}

func (s AddressZoneSection_List) Set(i int, v AddressZoneSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressZoneSection_Promise is a wrapper for a AddressZoneSection promised by a client call.
type AddressZoneSection_Promise struct{ *capnp.Pipeline }

func (p AddressZoneSection_Promise) Struct() (AddressZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressZoneSection{s}, err
}

func (p AddressZoneSection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddressQuerySection struct{ capnp.Struct }

// AddressQuerySection_TypeID is the unique identifier for the type AddressQuerySection.
const AddressQuerySection_TypeID = 0xaa95f2c2154f801a

func NewAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return AddressQuerySection{st}, err
}

func NewRootAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return AddressQuerySection{st}, err
}

func ReadRootAddressQuerySection(msg *capnp.Message) (AddressQuerySection, error) {
	root, err := msg.RootPtr()
	return AddressQuerySection{root.Struct()}, err
}

func (s AddressQuerySection) String() string {
	str, _ := text.Marshal(0xaa95f2c2154f801a, s.Struct)
	return str
}

func (s AddressQuerySection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressQuerySection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressQuerySection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressQuerySection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s AddressQuerySection) HasToken() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetToken(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s AddressQuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressQuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressQuerySection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressQuerySection) Types() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Int32List{List: p.List()}, err
}

func (s AddressQuerySection) HasTypes() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetTypes(v capnp.Int32List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s AddressQuerySection) NewTypes(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s AddressQuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s AddressQuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s AddressQuerySection) Options() (QueryOption_List, error) {
	p, err := s.Struct.Ptr(4)
	return QueryOption_List{List: p.List()}, err
}

func (s AddressQuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetOptions(v QueryOption_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated QueryOption_List, preferring placement in s's segment.
func (s AddressQuerySection) NewOptions(n int32) (QueryOption_List, error) {
	l, err := NewQueryOption_List(s.Struct.Segment(), n)
	if err != nil {
		return QueryOption_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// AddressQuerySection_List is a list of AddressQuerySection.
type AddressQuerySection_List struct{ capnp.List }

// NewAddressQuerySection creates a new list of AddressQuerySection.
func NewAddressQuerySection_List(s *capnp.Segment, sz int32) (AddressQuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return AddressQuerySection_List{l}, err
}

func (s AddressQuerySection_List) At(i int) AddressQuerySection {
	return AddressQuerySection{s.List.Struct(i)}
}

func (s AddressQuerySection_List) Set(i int, v AddressQuerySection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressQuerySection_Promise is a wrapper for a AddressQuerySection promised by a client call.
type AddressQuerySection_Promise struct{ *capnp.Pipeline }

func (p AddressQuerySection_Promise) Struct() (AddressQuerySection, error) {
	s, err := p.Pipeline.Struct()
	return AddressQuerySection{s}, err
}

func (p AddressQuerySection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type NotificationSection struct{ capnp.Struct }

// NotificationSection_TypeID is the unique identifier for the type NotificationSection.
const NotificationSection_TypeID = 0x844542c0bc50f248

func NewNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func NewRootNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func ReadRootNotificationSection(msg *capnp.Message) (NotificationSection, error) {
	root, err := msg.RootPtr()
	return NotificationSection{root.Struct()}, err
}

func (s NotificationSection) String() string {
	str, _ := text.Marshal(0x844542c0bc50f248, s.Struct)
	return str
}

func (s NotificationSection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s NotificationSection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NotificationSection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s NotificationSection) Type() NotificationType {
	return NotificationType(s.Struct.Uint16(0))
}

func (s NotificationSection) SetType(v NotificationType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s NotificationSection) Data() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s NotificationSection) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NotificationSection) DataBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s NotificationSection) SetData(v string) error {
	return s.Struct.SetText(1, v)
}

// NotificationSection_List is a list of NotificationSection.
type NotificationSection_List struct{ capnp.List }

// NewNotificationSection creates a new list of NotificationSection.
func NewNotificationSection_List(s *capnp.Segment, sz int32) (NotificationSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return NotificationSection_List{l}, err
}

func (s NotificationSection_List) At(i int) NotificationSection {
	return NotificationSection{s.List.Struct(i)}
}

func (s NotificationSection_List) Set(i int, v NotificationSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// NotificationSection_Promise is a wrapper for a NotificationSection promised by a client call.
type NotificationSection_Promise struct{ *capnp.Pipeline }

func (p NotificationSection_Promise) Struct() (NotificationSection, error) {
	s, err := p.Pipeline.Struct()
	return NotificationSection{s}, err
}

type NotificationType uint16

// NotificationType_TypeID is the unique identifier for the type NotificationType.
const NotificationType_TypeID = 0xcbd9cd959c154da1

// Values of NotificationType.
const (
	NotificationType_heartbeat          NotificationType = 0
	NotificationType_capHashNotKnown    NotificationType = 1
	NotificationType_badMessage         NotificationType = 2
	NotificationType_rcvInconsistentMsg NotificationType = 3
	NotificationType_noAssertionsExist  NotificationType = 4
	NotificationType_msgTooLarge        NotificationType = 5
	NotificationType_unspecServerErr    NotificationType = 6
	NotificationType_serverNotCapable   NotificationType = 7
	NotificationType_noAssertionAvail   NotificationType = 8
)

// String returns the enum's constant name.
func (c NotificationType) String() string {
	switch c {
	case NotificationType_heartbeat:
		return "heartbeat"
	case NotificationType_capHashNotKnown:
		return "capHashNotKnown"
	case NotificationType_badMessage:
		return "badMessage"
	case NotificationType_rcvInconsistentMsg:
		return "rcvInconsistentMsg"
	case NotificationType_noAssertionsExist:
		return "noAssertionsExist"
	case NotificationType_msgTooLarge:
		return "msgTooLarge"
	case NotificationType_unspecServerErr:
		return "unspecServerErr"
	case NotificationType_serverNotCapable:
		return "serverNotCapable"
	case NotificationType_noAssertionAvail:
		return "noAssertionAvail"

	default:
		return ""
	}
}

// NotificationTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func NotificationTypeFromString(c string) NotificationType {
	switch c {
	case "heartbeat":
		return NotificationType_heartbeat
	case "capHashNotKnown":
		return NotificationType_capHashNotKnown
	case "badMessage":
		return NotificationType_badMessage
	case "rcvInconsistentMsg":
		return NotificationType_rcvInconsistentMsg
	case "noAssertionsExist":
		return NotificationType_noAssertionsExist
	case "msgTooLarge":
		return NotificationType_msgTooLarge
	case "unspecServerErr":
		return NotificationType_unspecServerErr
	case "serverNotCapable":
		return NotificationType_serverNotCapable
	case "noAssertionAvail":
		return NotificationType_noAssertionAvail

	default:
		return 0
	}
}

type NotificationType_List struct{ capnp.List }

func NewNotificationType_List(s *capnp.Segment, sz int32) (NotificationType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return NotificationType_List{l.List}, err
}

func (l NotificationType_List) At(i int) NotificationType {
	ul := capnp.UInt16List{List: l.List}
	return NotificationType(ul.At(i))
}

func (l NotificationType_List) Set(i int, v NotificationType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Signature struct{ capnp.Struct }

// Signature_TypeID is the unique identifier for the type Signature.
const Signature_TypeID = 0xcf61cf65228728bc

func NewSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func NewRootSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func ReadRootSignature(msg *capnp.Message) (Signature, error) {
	root, err := msg.RootPtr()
	return Signature{root.Struct()}, err
}

func (s Signature) String() string {
	str, _ := text.Marshal(0xcf61cf65228728bc, s.Struct)
	return str
}

func (s Signature) KeySpace() KeySpaceID {
	return KeySpaceID(s.Struct.Uint16(0))
}

func (s Signature) SetKeySpace(v KeySpaceID) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Signature) Algorithm() SignatureAlgorithmType {
	return SignatureAlgorithmType(s.Struct.Uint16(2))
}

func (s Signature) SetAlgorithm(v SignatureAlgorithmType) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s Signature) ValidSince() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Signature) SetValidSince(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Signature) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s Signature) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s Signature) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Signature) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Signature) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Signature_List is a list of Signature.
type Signature_List struct{ capnp.List }

// NewSignature creates a new list of Signature.
func NewSignature_List(s *capnp.Segment, sz int32) (Signature_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Signature_List{l}, err
}

func (s Signature_List) At(i int) Signature { return Signature{s.List.Struct(i)} }

func (s Signature_List) Set(i int, v Signature) error { return s.List.SetStruct(i, v.Struct) }

// Signature_Promise is a wrapper for a Signature promised by a client call.
type Signature_Promise struct{ *capnp.Pipeline }

func (p Signature_Promise) Struct() (Signature, error) {
	s, err := p.Pipeline.Struct()
	return Signature{s}, err
}

type KeySpaceID uint16

// KeySpaceID_TypeID is the unique identifier for the type KeySpaceID.
const KeySpaceID_TypeID = 0x8c6fb57d7725ec03

// Values of KeySpaceID.
const (
	KeySpaceID_rainsKeySpace KeySpaceID = 0
)

// String returns the enum's constant name.
func (c KeySpaceID) String() string {
	switch c {
	case KeySpaceID_rainsKeySpace:
		return "rainsKeySpace"

	default:
		return ""
	}
}

// KeySpaceIDFromString returns the enum value with a name,
// or the zero value if there's no such value.
func KeySpaceIDFromString(c string) KeySpaceID {
	switch c {
	case "rainsKeySpace":
		return KeySpaceID_rainsKeySpace

	default:
		return 0
	}
}

type KeySpaceID_List struct{ capnp.List }

func NewKeySpaceID_List(s *capnp.Segment, sz int32) (KeySpaceID_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return KeySpaceID_List{l.List}, err
}

func (l KeySpaceID_List) At(i int) KeySpaceID {
	ul := capnp.UInt16List{List: l.List}
	return KeySpaceID(ul.At(i))
}

func (l KeySpaceID_List) Set(i int, v KeySpaceID) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type SignatureAlgorithmType uint16

// SignatureAlgorithmType_TypeID is the unique identifier for the type SignatureAlgorithmType.
const SignatureAlgorithmType_TypeID = 0x824d474588994863

// Values of SignatureAlgorithmType.
const (
	SignatureAlgorithmType_ed25519  SignatureAlgorithmType = 0
	SignatureAlgorithmType_ed448    SignatureAlgorithmType = 1
	SignatureAlgorithmType_ecdsa256 SignatureAlgorithmType = 2
	SignatureAlgorithmType_ecdsa384 SignatureAlgorithmType = 3
)

// String returns the enum's constant name.
func (c SignatureAlgorithmType) String() string {
	switch c {
	case SignatureAlgorithmType_ed25519:
		return "ed25519"
	case SignatureAlgorithmType_ed448:
		return "ed448"
	case SignatureAlgorithmType_ecdsa256:
		return "ecdsa256"
	case SignatureAlgorithmType_ecdsa384:
		return "ecdsa384"

	default:
		return ""
	}
}

// SignatureAlgorithmTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SignatureAlgorithmTypeFromString(c string) SignatureAlgorithmType {
	switch c {
	case "ed25519":
		return SignatureAlgorithmType_ed25519
	case "ed448":
		return SignatureAlgorithmType_ed448
	case "ecdsa256":
		return SignatureAlgorithmType_ecdsa256
	case "ecdsa384":
		return SignatureAlgorithmType_ecdsa384

	default:
		return 0
	}
}

type SignatureAlgorithmType_List struct{ capnp.List }

func NewSignatureAlgorithmType_List(s *capnp.Segment, sz int32) (SignatureAlgorithmType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SignatureAlgorithmType_List{l.List}, err
}

func (l SignatureAlgorithmType_List) At(i int) SignatureAlgorithmType {
	ul := capnp.UInt16List{List: l.List}
	return SignatureAlgorithmType(ul.At(i))
}

func (l SignatureAlgorithmType_List) Set(i int, v SignatureAlgorithmType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type HashAlgorithmType uint16

// HashAlgorithmType_TypeID is the unique identifier for the type HashAlgorithmType.
const HashAlgorithmType_TypeID = 0xef2306d933494fde

// Values of HashAlgorithmType.
const (
	HashAlgorithmType_noHashAlgo HashAlgorithmType = 0
	HashAlgorithmType_sha256     HashAlgorithmType = 1
	HashAlgorithmType_sha384     HashAlgorithmType = 2
	HashAlgorithmType_sha512     HashAlgorithmType = 3
)

// String returns the enum's constant name.
func (c HashAlgorithmType) String() string {
	switch c {
	case HashAlgorithmType_noHashAlgo:
		return "noHashAlgo"
	case HashAlgorithmType_sha256:
		return "sha256"
	case HashAlgorithmType_sha384:
		return "sha384"
	case HashAlgorithmType_sha512:
		return "sha512"

	default:
		return ""
	}
}

// HashAlgorithmTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func HashAlgorithmTypeFromString(c string) HashAlgorithmType {
	switch c {
	case "noHashAlgo":
		return HashAlgorithmType_noHashAlgo
	case "sha256":
		return HashAlgorithmType_sha256
	case "sha384":
		return HashAlgorithmType_sha384
	case "sha512":
		return HashAlgorithmType_sha512

	default:
		return 0
	}
}

type HashAlgorithmType_List struct{ capnp.List }

func NewHashAlgorithmType_List(s *capnp.Segment, sz int32) (HashAlgorithmType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return HashAlgorithmType_List{l.List}, err
}

func (l HashAlgorithmType_List) At(i int) HashAlgorithmType {
	ul := capnp.UInt16List{List: l.List}
	return HashAlgorithmType(ul.At(i))
}

func (l HashAlgorithmType_List) Set(i int, v HashAlgorithmType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PublicKey struct{ capnp.Struct }

// PublicKey_TypeID is the unique identifier for the type PublicKey.
const PublicKey_TypeID = 0x8cfae4b3459db40f

func NewPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func NewRootPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func ReadRootPublicKey(msg *capnp.Message) (PublicKey, error) {
	root, err := msg.RootPtr()
	return PublicKey{root.Struct()}, err
}

func (s PublicKey) String() string {
	str, _ := text.Marshal(0x8cfae4b3459db40f, s.Struct)
	return str
}

func (s PublicKey) Type() SignatureAlgorithmType {
	return SignatureAlgorithmType(s.Struct.Uint16(0))
}

func (s PublicKey) SetType(v SignatureAlgorithmType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s PublicKey) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PublicKey) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PublicKey) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PublicKey) ValidFrom() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s PublicKey) SetValidFrom(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s PublicKey) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s PublicKey) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

// PublicKey_List is a list of PublicKey.
type PublicKey_List struct{ capnp.List }

// NewPublicKey creates a new list of PublicKey.
func NewPublicKey_List(s *capnp.Segment, sz int32) (PublicKey_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PublicKey_List{l}, err
}

func (s PublicKey_List) At(i int) PublicKey { return PublicKey{s.List.Struct(i)} }

func (s PublicKey_List) Set(i int, v PublicKey) error { return s.List.SetStruct(i, v.Struct) }

// PublicKey_Promise is a wrapper for a PublicKey promised by a client call.
type PublicKey_Promise struct{ *capnp.Pipeline }

func (p PublicKey_Promise) Struct() (PublicKey, error) {
	s, err := p.Pipeline.Struct()
	return PublicKey{s}, err
}

type CertificateObject struct{ capnp.Struct }

// CertificateObject_TypeID is the unique identifier for the type CertificateObject.
const CertificateObject_TypeID = 0xfb92513472887325

func NewCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertificateObject{st}, err
}

func NewRootCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertificateObject{st}, err
}

func ReadRootCertificateObject(msg *capnp.Message) (CertificateObject, error) {
	root, err := msg.RootPtr()
	return CertificateObject{root.Struct()}, err
}

func (s CertificateObject) String() string {
	str, _ := text.Marshal(0xfb92513472887325, s.Struct)
	return str
}

func (s CertificateObject) Type() ProtocolType {
	return ProtocolType(s.Struct.Uint16(0))
}

func (s CertificateObject) SetType(v ProtocolType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s CertificateObject) Usage() CertificateUsage {
	return CertificateUsage(s.Struct.Uint16(2))
}

func (s CertificateObject) SetUsage(v CertificateUsage) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s CertificateObject) HashAlgo() HashAlgorithmType {
	return HashAlgorithmType(s.Struct.Uint16(4))
}

func (s CertificateObject) SetHashAlgo(v HashAlgorithmType) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s CertificateObject) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertificateObject) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertificateObject) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertificateObject_List is a list of CertificateObject.
type CertificateObject_List struct{ capnp.List }

// NewCertificateObject creates a new list of CertificateObject.
func NewCertificateObject_List(s *capnp.Segment, sz int32) (CertificateObject_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return CertificateObject_List{l}, err
}

func (s CertificateObject_List) At(i int) CertificateObject {
	return CertificateObject{s.List.Struct(i)}
}

func (s CertificateObject_List) Set(i int, v CertificateObject) error {
	return s.List.SetStruct(i, v.Struct)
}

// CertificateObject_Promise is a wrapper for a CertificateObject promised by a client call.
type CertificateObject_Promise struct{ *capnp.Pipeline }

func (p CertificateObject_Promise) Struct() (CertificateObject, error) {
	s, err := p.Pipeline.Struct()
	return CertificateObject{s}, err
}

type ProtocolType uint16

// ProtocolType_TypeID is the unique identifier for the type ProtocolType.
const ProtocolType_TypeID = 0x869060a0330d319a

// Values of ProtocolType.
const (
	ProtocolType_pTUnspecified ProtocolType = 0
	ProtocolType_pTTLS         ProtocolType = 1
)

// String returns the enum's constant name.
func (c ProtocolType) String() string {
	switch c {
	case ProtocolType_pTUnspecified:
		return "pTUnspecified"
	case ProtocolType_pTTLS:
		return "pTTLS"

	default:
		return ""
	}
}

// ProtocolTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ProtocolTypeFromString(c string) ProtocolType {
	switch c {
	case "pTUnspecified":
		return ProtocolType_pTUnspecified
	case "pTTLS":
		return ProtocolType_pTTLS

	default:
		return 0
	}
}

type ProtocolType_List struct{ capnp.List }

func NewProtocolType_List(s *capnp.Segment, sz int32) (ProtocolType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ProtocolType_List{l.List}, err
}

func (l ProtocolType_List) At(i int) ProtocolType {
	ul := capnp.UInt16List{List: l.List}
	return ProtocolType(ul.At(i))
}

func (l ProtocolType_List) Set(i int, v ProtocolType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type CertificateUsage uint16

// CertificateUsage_TypeID is the unique identifier for the type CertificateUsage.
const CertificateUsage_TypeID = 0xaddb752fe579c78e

// Values of CertificateUsage.
const (
	CertificateUsage_cUTrustAnchor CertificateUsage = 0
	CertificateUsage_cUEndEntity   CertificateUsage = 1
)

// String returns the enum's constant name.
func (c CertificateUsage) String() string {
	switch c {
	case CertificateUsage_cUTrustAnchor:
		return "cUTrustAnchor"
	case CertificateUsage_cUEndEntity:
		return "cUEndEntity"

	default:
		return ""
	}
}

// CertificateUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CertificateUsageFromString(c string) CertificateUsage {
	switch c {
	case "cUTrustAnchor":
		return CertificateUsage_cUTrustAnchor
	case "cUEndEntity":
		return CertificateUsage_cUEndEntity

	default:
		return 0
	}
}

type CertificateUsage_List struct{ capnp.List }

func NewCertificateUsage_List(s *capnp.Segment, sz int32) (CertificateUsage_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return CertificateUsage_List{l.List}, err
}

func (l CertificateUsage_List) At(i int) CertificateUsage {
	ul := capnp.UInt16List{List: l.List}
	return CertificateUsage(ul.At(i))
}

func (l CertificateUsage_List) Set(i int, v CertificateUsage) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type ServiceInfo struct{ capnp.Struct }

// ServiceInfo_TypeID is the unique identifier for the type ServiceInfo.
const ServiceInfo_TypeID = 0xeab015ca8107699b

func NewServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func NewRootServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func ReadRootServiceInfo(msg *capnp.Message) (ServiceInfo, error) {
	root, err := msg.RootPtr()
	return ServiceInfo{root.Struct()}, err
}

func (s ServiceInfo) String() string {
	str, _ := text.Marshal(0xeab015ca8107699b, s.Struct)
	return str
}

func (s ServiceInfo) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceInfo) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfo) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ServiceInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s ServiceInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s ServiceInfo) Priority() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfo) SetPriority(v uint32) {
	s.Struct.SetUint32(4, v)
}

// ServiceInfo_List is a list of ServiceInfo.
type ServiceInfo_List struct{ capnp.List }

// NewServiceInfo creates a new list of ServiceInfo.
func NewServiceInfo_List(s *capnp.Segment, sz int32) (ServiceInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfo_List{l}, err
}

func (s ServiceInfo_List) At(i int) ServiceInfo { return ServiceInfo{s.List.Struct(i)} }

func (s ServiceInfo_List) Set(i int, v ServiceInfo) error { return s.List.SetStruct(i, v.Struct) }

// ServiceInfo_Promise is a wrapper for a ServiceInfo promised by a client call.
type ServiceInfo_Promise struct{ *capnp.Pipeline }

func (p ServiceInfo_Promise) Struct() (ServiceInfo, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfo{s}, err
}

type Obj struct{ capnp.Struct }
type Obj_value Obj
type Obj_value_Which uint16

const (
	Obj_value_Which_ip4 Obj_value_Which = 0
	Obj_value_Which_ip6 Obj_value_Which = 1
)

func (w Obj_value_Which) String() string {
	const s = "ip4ip6"
	switch w {
	case Obj_value_Which_ip4:
		return s[0:3]
	case Obj_value_Which_ip6:
		return s[3:6]

	}
	return "Obj_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Obj_TypeID is the unique identifier for the type Obj.
const Obj_TypeID = 0xeb2fd278248964aa

func NewObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func NewRootObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func ReadRootObj(msg *capnp.Message) (Obj, error) {
	root, err := msg.RootPtr()
	return Obj{root.Struct()}, err
}

func (s Obj) String() string {
	str, _ := text.Marshal(0xeb2fd278248964aa, s.Struct)
	return str
}

func (s Obj) Type() ObjectType {
	return ObjectType(s.Struct.Uint16(0))
}

func (s Obj) SetType(v ObjectType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Obj) Value() Obj_value { return Obj_value(s) }

func (s Obj_value) Which() Obj_value_Which {
	return Obj_value_Which(s.Struct.Uint16(2))
}
func (s Obj_value) Ip4() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasIp4() bool {
	if s.Struct.Uint16(2) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) Ip4Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetIp4(v string) error {
	s.Struct.SetUint16(2, 0)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Ip6() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasIp6() bool {
	if s.Struct.Uint16(2) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) Ip6Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetIp6(v string) error {
	s.Struct.SetUint16(2, 1)
	return s.Struct.SetText(0, v)
}

// Obj_List is a list of Obj.
type Obj_List struct{ capnp.List }

// NewObj creates a new list of Obj.
func NewObj_List(s *capnp.Segment, sz int32) (Obj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Obj_List{l}, err
}

func (s Obj_List) At(i int) Obj { return Obj{s.List.Struct(i)} }

func (s Obj_List) Set(i int, v Obj) error { return s.List.SetStruct(i, v.Struct) }

// Obj_Promise is a wrapper for a Obj promised by a client call.
type Obj_Promise struct{ *capnp.Pipeline }

func (p Obj_Promise) Struct() (Obj, error) {
	s, err := p.Pipeline.Struct()
	return Obj{s}, err
}

func (p Obj_Promise) Value() Obj_value_Promise { return Obj_value_Promise{p.Pipeline} }

// Obj_value_Promise is a wrapper for a Obj_value promised by a client call.
type Obj_value_Promise struct{ *capnp.Pipeline }

func (p Obj_value_Promise) Struct() (Obj_value, error) {
	s, err := p.Pipeline.Struct()
	return Obj_value{s}, err
}

const schema_fb2d77234707241e = "x\xda\xacz{t\x14u\x96\xff\xbdU\xdd\x14\xe6\xd5" +
	"]\xa9\xf4\x91D\xa4A\xe1\xfc\x849\xa8\x84\x87\x1a\xcf" +
	"\x9c$`F\x03DRIg\x1c\xf2\x1bW+\xdd_" +
	":\x85\x9d\xeaPU\x814G7\xe2\xfa \xae\x8e\x8f" +
	"\x919\xc2\xe0\x19\xf0\xa8\xab\xae\x1c\x9d\x19\x9d\x15\x95\xf1" +
	"\xb1\xa2\xe2c}\x1c\xcf\xec\xb0\x8a\x8a\x8c\xeb\xe0cF" +
	"8\xc3\x9c\x05uj\xcf\xfdVUwuw\"\x84\xd9" +
	"\xfc\x93\xea\xea\xfb}\xdc{?\xf7\xde\xcf\xfd~\xfb\xdc" +
	"/*Z\x84y\xe1\x7f\xa9\x03P\xbf\x0aOr\x92\x97" +
	"l\xde\xd8vq\xc7u \xc7\x04g\xdaL\xe9\xe23" +
	"\xd7\xcd\xfd\x1a\x00\xe7_P\xd1\x87JG\x85\x04\xa0\xb4" +
	"W\xa4\x01\x9d5\xd1\xf7\x7f\xf8N\xfd\xf5\xff\x04\xea\xf7" +
	"\x10\x01B\x12\xc0\xfc\xa1\x8a\xc3\x08\xa8\x8cV4\x03:" +
	"\x97\x1c\xee|\xe6\xb9\xc5m\xd7\x83\x1aC,\xcc\x15\x16" +
	"HrG\xc5RT\x9e\xe7\xd3\xed\xaax\x14\xd0\xe9x" +
	"m\xee\xa3\xd9\x0a\xe9\x06\x90\xbf\xe7\xcf\xd6S\xf91B" +
	"\xc8\xd92\xafz\xfe\xb6+o\xbf\xb1lK\xed\x95\xb5" +
	"\xa8\xac\xac\xa49z*\xcf\x03t^\xb8\xeb\xd1CG" +
	"\xcf\xb5G\xdd9\xc2H\x93\\^\xf9\x02mi\xa0\x92" +
	"\xb6t\xa0\xa6-w\xe0\xf0oGA\x9e\x96\x17\xb8\xb5" +
	"\xb2\x97\x046s\x01\xf1\x8bY\xeb\xaey\"{K\xd9" +
	"Z;+\x05Tv\xf3\xb5\x9e\xaf\x8c\x03:\x91\xc7\xef" +
	"i\xfb\xf5\x1f\x8e\xddB\xda\x89\x01\xedhNeg\xe5" +
	"\xb1\xbc\xf0\xa7\x80NK\xf4\xb5\xdbnZ[}\xa7\xbb" +
	".W\xee\x9e\xaa.R\xae\xed\xb2\xbe\xfdg\x9fy\xc1" +
	"]\x01\xb5G\xab>\xa3ov\\\xf1\xc4E\x7f\xfa\xe3" +
	"\xe7w\x07\xbe\xb9\xa6\xea)\xfa\xe6\x7f\xce\xfe\xff\xdf4" +
	"%\x9e\xdd\x1aTs\xa0\x8a[~C\x15i\xf1\xdb\x9a" +
	"\x7f\x18\xdev\xe5k[\x83jn\xaf\xea#\x81\x1d\\" +
	"\xe0\xd3\x0b6\x9d\xbf}\xe7\xb9\xbf\x009&\x16\xa9\xf9" +
	"FU/*\xfb\xabh\xc0\xbe\xaa\x9b\x04e\xb4\xe6T" +
	"\x00\xe7w\xffm)\xe7\x85+\xb7\x05\xb6\x9f\xab\xe9\xa5" +
	"\xad\xd4^\x18\xfd\xf2\xa3\xe8y\xf7\x066\xc9j\xf8\xf6" +
	"\x9b\x97\xab\xc7\xee\xf84{o\xe9\x12\xca\xca\x9a\xc3\x0a" +
	"\xab!\xdbh5\x17+\xa3\xf4\xe4\xac?x\xd7\xd0\xa2" +
	"\xf7?\xb8?0\xcd\x9a\x1a\xaek\xc3\xb5+b/\x1c" +
	"\xde\xf4p)\x88\xc2$\xa3\xd5,Ee\xa8\xc6\x15\xbf" +
	"\x0c\x01\x9dP\xe5\x15O\xafp\xf6\xfck\x99\xff\xf6G" +
	"*P9\x14\xa1e\xbf\x8c\xbc\x0c\xe8\xfc\xe4\xe5\xdc'" +
	"\xe7\x0c\xbd\xb7\xa3Lr4\xda\x88\xca\xe6(In\x8a" +
	"\x12\xaaRo\xfd\xa4\xe3\xbe\xfd\x1b\x7fU\xa6\xc9\xf6\xe8" +
	"ae\x07\x17|(z\x93r\x94\x9e\x9c\x07^\xaf\x9b" +
	"}\xe5\x93\x07~\x03r,\xb8]\xae\xd2\xfe\xe8bT" +
	"\x0e\xf1\x01_F\x09\x16#\xff\x9e{\xb5\xfe\xa9\xce\x9d" +
	"\xc1\x10:(\x7fL~\xfaV&?\xf5\xf4\xbf\xb4\xb8" +
	"\xe5\xde\x1b\x9f\x0e\xd8\xe5\xf4\xdaw\xc8.scon" +
	"\xfc\xaf\xf5\xb1]c\xad#\xd7\xd6\xa22\xa3\x96\xd69" +
	"\xbd\xf6S\xc0\xafG\xdan\x9c\xd6\xff\xfd]\x01\xb8\xcc" +
	"VxT\\\xa0\xd0*\x7f\x9e\xfc\xbb\x9f\xb6~\xf1\x9f" +
	"\xcf\x95\xcc5\x89\x04W*\xb5\xa8\xe8\x0aw\xac\xc2M" +
	"l\x9a\x7f\xb9b\xef{W\xbe\x14D\xdf\xbe\xbaZ\x01" +
	"P9RG\xd3\xbd|^z\xf4\x17;\xef~)\xb0" +
	"\xe9XL\x10 \xe4l\xef\x88m\xdd\xf4\xc6\xde\xd7\xca" +
	"l~J\xac\x11\x95\xfa\x18\xed8\x16\xfb\x10\xd0\xf9p" +
	"H\x1dX|\xcb\xa2\xd7\xc9\xedB\xa9~\xbbb\xb5\xa8" +
	"\xbcA\xd2\xf3\xf7\xc4\xf8\x9e\x9e9\xeb\xa63\xd8\x9b\xda" +
	"\x9bc\x06\xe3\xacS\x8f)\xf3N%\xe9\xb9\xa7\xc6I" +
	"\xfa\xb6\x9dG\x96\xb5\x9ey\xe0\xcd\xb1l\xd71\xa5\x02" +
	"\x95\xcb\xa7\xd0\xb8\x95S\xc8G\x0fH\xce\xe6\x96\xf0\xcd" +
	"\xef\x06\xf3R}\x05i\xf3\xf9\x8b\xbb\x1eOi\x7fz" +
	"7h\x88\x8e\xfaW\xc9\xaeZ=\x19\xe2P\xe8G\xef" +
	"T\xfd\xdbW\xef\x8d\xb5\xce\x86\xfa\xd5\xa8l\xaa\xa7u" +
	"\xee\xa8\xa7u\xf6n\xfc\xf5\xc2\xdf\xec\xf9\x8f}A," +
	"\xdc\xda\xf0\x19\xcd\xb6\xbd\x81f\x9b\xfd\xd4\xe7]\xeb\x16" +
	"\xfe\xf5\x83\xc0Fv7\xf0P;s\xeac\x8b\"\xca" +
	"\x13\x1f\x05\xc3}gC\x17\x0d\xdd\xcd\x876<\xf2\xc0" +
	"\xcf~\xff\xf3;\xf6\x83\x1c\x0b\x15\xd9\xfd\x93\x86ZT" +
	"\x8e4H\x00\xdd_5\x88\xd8\xfdM\x83\x80\x00\xce\x96" +
	"h\xcd\x96\x19\x8bF\x0e\x04\xe2\xfdP\xc3RZj\xdb" +
	"\xf7\x1f\xfc\xe2\xc2Go\xfb\xc3\x989}_C\x05*" +
	"_\xd2l\xca\xc1\x06\xca\xe9\x15O'.\xff\xe9\xaf>" +
	"\xf8\x04\xd4zD\xe7\xe1\xd4\xe8\xcc\xe1w\xce\xf9\x1cz" +
	"PB\x01Q\x19=\xed\x18\xa0r\xebi\xeb\x00\x9d\x9f" +
	"\xeb\xd2\x86Wc\x8f}V:1W\xe6\xe0i\x15\xa8" +
	"\x1c=\x8d&>r\x1aM\x9c\x9fj\x0ci\xe5\x8e\xa9" +
	"\xaf*\xf7L\xa5\xa7\xcdSi\xea\xa5\xcf\xcei_\xb6" +
	"u\xe7\x17%n\xe0\x19d\xef\xd4FT\x0e\x92\xf0\xfc" +
	"O\xa6rp|\xb0\xa2}\xfe\xdeIg\xfe\xb9\x0c\xa3" +
	"3\xa65\xa12o\x1a\xcd;w\x1a\x15\xc0\xf7\xf7\xad" +
	"~@\xfa\xd9W\x7f)\xd9D\x1bJ\x1c$\xd3\xce@" +
	"\x85M\xe3ij\xdam4\xf3?\xc7>\xfa8\xb1\xf5" +
	"\xc2#\x01\x07~\x1b\xe7\x0e\x9c\xa2\xef\xa9Y\xf2\xd8\xae" +
	"\xbf\x06\xbe9\x14\xe7\x18\xbb\xf3\xc0\xf6\xb9O\x7fx\xf3" +
	"\xd7e\x9e;\x18\x17P9\x12\xe7\x9e\x8b\x93\xe7\xe2\xdc" +
	"s\xb3\xac\x8d\xe6\x02\xf5\xce\xaf\xc74\xe3\xd1x\x13*" +
	"\xa7L'\x0d\xc2\xd3\x09s\x0fN\x99\xfc\xe4\x8c\xec\x8a" +
	"o\xcbt\xdd7]@\xe5\xe0tn\x96\xe9\xff\x8f6" +
	"\x1f\x7f\xf6\xe8s\xf6y\xff\xf8\xb7 \xd8\x9f\x98\xc1k" +
	"\xce\x9e\x19\xcd0\xd7\x194\xb3v\xf6\x1cS\x0b\xe9\x86" +
	"\xd5a\xa5\xcfNj\x83\xc6`S\xb7\x9e64{\xc8" +
	"d\xad\x99t\xd6\xd4\xed\xfe\x81\x84\x94\x1bd\x9d\x88j" +
	"\x14\x05\x00y\xf6b\x00DyF#\x00\x0ar\xfdR" +
	"\x00\x14\xe5\xd8R\x80\x11\x96j\\\xb8p\xde\x05q\x96" +
	"Z\xb0\xe0|\x87%S\x96\xd6\xb8p\x11\x00\xb8\xcf\xf3" +
	"\xcf_@\xcf\xfe\xb2\x93\x8a\x96\xed`\x96\xa5\xa5Y7" +
	"K\xdaz\xd6\xb8L\xb7\xfb\xbb\xf5\xf4\xd9k\xb5\x8c\x9e" +
	"\xea1l=3\xb3\x8b\xc5\xad\xa1\x8cm\xa9!1\x04" +
	"\x10B\x00\xb9\xba\x17@\xad\x12Q\x9d\"\xa0\xe3\x8b\x82" +
	"\xa8g0\x0c\x02\x86\x01\xc7Q\xf1\xd2\xac\xad\xaf\xd2\x93" +
	"\x1a\xad\xe4-\x08@\x0aV\xe5\xa7nk\x04P[D" +
	"T\x97\x0b\x88XG\xf1-\xb7\xcf\x01P/\x12Q\xed" +
	"\x14P\x16\xb0\x8e[\xa3\x83^^\"\xa2\x9a\x100n" +
	"g\xafb\x06V\x83\x80\xd5\x80\x11;7\xc80RH" +
	"\xa1\x80\x18\x01\x8c\xa44[\xc3*\x10\xb0*\xb0\xc1\x13" +
	"6\xc6\x0f\xcc\xec\xc0\xccN\xcd\x94\xb4\x01+?Z," +
	"\x1a\xddIo\x93\xd9L\"7\x88\xdco\x93\xf9Ne" +
	"\x93\xfb\xad\xba\x91|\x90\xe81\xacA\x96\x84\xb8\xbeJ" +
	"g\xa9\xf8`\"\xb1\xbc{B\x9b\xe9\xd7\xac\xfe\x99]" +
	"\x8c\xbb\x04\x82>!{L\x16Q\xad\x130BBe" +
	"\xaa\x16\xfb\xe2\x12\xcd\xea\xd7\xfa2,0\xa1X\xec\xe4" +
	"\xe3NX\xac\xfd2\x96\xeb\x1e\xd4\x92\xac\xfd\"\xee\xd2" +
	"\x10\xd7=l\x028\xa6\xa6\x1b\xd62\x96\x838\x17\xc8" +
	"\x8f\x17\x8a\xad7\xd4\xd7\x9c\xd1\x93\xcbX\x8eC>\xbf" +
	"\x0f\x8d\xf6\xf1c\x11\xd5\xfe\x02\"\xd8\x19\x00\xea\x95\"" +
	"\xaa\x99\x00\"\xf4.\x00\xb5_D\xd5\x16P\x16\x85:" +
	"\x14\x01\xe45\x04\xd5A\x11\xd5\xab\x85<0\xf2\xc4\xdd" +
	"\x05\x86t\x15\xcb\xf9\xd8q|_\x03\x0e\xe4\xc1<\x01" +
	"\x84\x17[\xb5S3\xb5\x01\xb4&\xe4\xdf\x14\xcb0\x9b" +
	"u\xebi\xf2I\x84\xbc\x9c\x1f\x1e>Qx4\xf3\x85" +
	"'\xb6n\xd2d\x9a\xcd\xba\xed\xa1\xbe1#~q\x01" +
	"\x0c#\x96;\x12\xe5\x029&\x80\x8fk\x94v\xc3f" +
	"\xe6Z-sv\x1fK\xeb\x06\xc7\x9aT2}ca" +
	"\xfa8\x97:\x0ez\xc7\xd0A\xd4\xd3\x04\x9c\xb3\xc4p" +
	"\x80%\xe3H\x1bpB\xa7\xcc\xc39 (\xb3PB" +
	"\xcc\xd3\x11\xf4I\xa3R\x8fM (\xd5Tm\xf3T" +
	"\x13\xfd\x86CA\xec\x02A>*\xa1\x98gl\xe8\x17" +
	"\"\xf9K\x13\x04\xf9\x13\x09Cy\xda\x81~\x05\x90\xf7" +
	"\xf6\x82 \xbf-a8\xcf\x8d\xd0\xe7\x84\xf2\xee\xf5 " +
	"\xc8\xbb$\x9c\x94\xef\x0c\xd0\xefV\xe4_\xd2\xb8\x87$" +
	"\x94\xf2\xbd\x1e\xfa\xa4G\xbe\x87\xf6\xb2I\xc2\xc9\xf9*" +
	"\x89~\x7f)\x8f\xd2\xb8\x0d\x12\x9e\x92o\x89\xd0o\xf4" +
	"\xe4\xa19 \xc8\xba\x14\xb1\xf4\xb4\xd5\x82\xcdZ*\xd5" +
	"\xad\xa7[\xd0\xf1\x01\x07X\xf8\xd4\x9a\x81x\xa6\x9b\x0b" +
	":if/\xc9\x1a6\x03q\xd8v?v\x0f\xf5\xad" +
	"f\xd0\x9c\xb4{\xb3\x06kA\xc7\x87\x0e\x88C}-" +
	"E!\xd4R\x1c<-n\"i\xa1\xec\x10h\x16\x02" +
	"\xb5\xe9;\x81C\xa8\x16O\x1e\xd6\x9dZ\xa4(*\x84" +
	"\xd2\xc8\x8d\xf3\xd0\xe5\xc9\x8b\x83\xc8oE\xd1\xef\x85e" +
	"\x99l\x18\x96<-:\x11'\x14\x9bd\xf9\xb2\xd8," +
	"\xd6\xb85\x952\x99e\xa9C\xcc\xcc\x15U\xc8)\xf9" +
	"X\xd9\xdc\x07\xa0\xde-\xa2z\x9f\x80\xb2\x9f\x10\xb7S" +
	"\x00m\x15Q}\x90\x12\xa2\xe0&\xc4\xfb)h\xb7\x89" +
	"\xa8>B\x09Qt\x13\xe2C$y\x9f\x88\xeas\x02" +
	"b\xa8\x0eC\x00\xf2.\x12|RD\xf5E\x01\xe5p" +
	"\xa8\x0e\xc3\x00\xf2\xf3\xf4\xf2\x19\x11\xd5\xdf\x0b\xe8X\xe4" +
	"\xf2\xa4\xdd\x0aR*eb\xb4@n\x011\x0a%\x05" +
	"x$Ix\x19\xb6\xfd\x18\x8eS\xde\xb5\xb0\x06\xb0S" +
	"D\x0c\x81@\x8f#lxP7\x99\xe5'\xd4\x91\xec" +
	" i\x9b\x17\x8b\x14\x1aT@z9N\xd9\xe1\xa6Z" +
	"1X\xb0\xd4t\xae\xfbJ\xb7\xe8\xf6<\xcc\xc9R\xcf" +
	"zN\x96\xd4;\x010$\xab\xf7\x02`XVW\x03" +
	"\xe0$\xb9\xe3U\x00\x94du\x0b\x803\xa0\x1bm\x8d" +
	"m\xcb5\x88\xdb\xccH\xe6\xe8\xf3r\xcd\xb2/\xc1\xec" +
	"`\xaba\xadcf\xa4[_\xcf\xe8u\xbb\xb1*\xbb" +
	"\x1c\x9a\x99v\x95\x96fNRK\xf6\xb3T\xab\x81$" +
	"c\xad02\x98s\\\xfdR\xadhY\xcc\xa4\xedI" +
	"\xd6\x8a\xab\x1cn\xa8\x84\xa9A$\xa9\x1bi\xc7\xc8\xfe" +
	"\x90\x99\xfa*]pI\xd1E,\xc3\xd2\x9a\xab\x8bc" +
	"d;\xcd\xac\x96\xb4Q_\xcb\x96h\xc9~]4\xd2" +
	"\xe3\x18a\x09\xad\xc0\x99\x15\x8b\xf7\x10\xf2\xca\xd9G\x1f" +
	"\x80\x93\xecI\x98C\x96\xdd\x0aq#\xd9\x9f5\x9dd" +
	"O\x9b\x91j3l\x90t;7N\\\xb4\x1bv\x9c" +
	"\x07!\x9f\x92\xc7\x85\x7f\xc6\x81\xfe\xe1\x89<\xaf\x11\x04" +
	"y\x16\xa5V\xbf\x1fB\xbf\xd3\x92\xeb\xcf\x00A\xae\x96" +
	"\xdc\xb4\xde\x82\x123R\xc5\xa13f\x04Pj\xf1\x03" +
	"\xa0\x84\x0f\xf4\x05j\xbf\x8f\x7f\xbd\xd7\xab\xfd\xd7\x07\xf0" +
	"\xbf\x81\x10|\xb5\x88\xea\xc6\x00\xfeo\xa0\x97\xd7\x8a\xa8" +
	"n=>\xac\x1d\xcb\xe3\xe4 \x16\xf0\x1b-\xb4\xd0." +
	"0K\xe1\xee~6\xec\xc2\x80|w[\x82\xe4\x89\xf1" +
	"\x01\x8f|\x06\xcb\xe6\x19\x85\xb2)\xe9\x86\xcdc+4" +
	"\xc1\x05\xdcB\xe0QJ\x1c\x8f\xdbv\x11\x87s'p" +
	"\xb9m\xc0!\x8d\x05\x82\x96w\x08[\xecy\xe9\xea\x80" +
	"Cr\xe4\xa5a\x11\xd5\xbb\x02\x0e\xb9c5\x80z\xbb" +
	"\x9b\xa5\xc6\xca#AC\xe6\xfbH\xcf\x90'\xe4\x1f'" +
	"\xa9\x0dj}zF\x87\x88\xad\x17\xe4\xaa\xdc<4!" +
	"[\xf1\x0c>\x16\xf9\x0e:\xc2\xd2\xd3%\x9b\x88\x8e\x9b" +
	"\xbd\xba\xfb53\xe5.\x82FI\x9e'\x0b\xde%\xa2" +
	"\xfaX\xc0\xac;\xc8\x82\x8f\x88\xa8\xbe\x120\xebn\x8a" +
	"\x88\x17ET\xdf\x0a\x98\xf5\x0d\x1a\xfe\x8a\x88\xea\xbb\x02" +
	"\xca!/\xd1\xbfM\x14\xf9-\x11\xd5\xf7)\xd1\x87\xdd" +
	"D\xbf\x97$\xdf\x15Q\xfdH\x18\xc3\xe4\xf9#\x81\x09" +
	"\x99\xdc\x0b\xac^\x90\xb2\x06+\x0e\x8cB\xa08\xa6f" +
	"\xa4\x99G\xb6}\x19\xfe.\x91-\xe3\x7f\xd2\x09\xb8\xc7" +
	"\xe7&.3\xc9Cz\xbc\xa6f}`o\xf9u*" +
	"O8&[3\x9c\"\xb9,\xdf\x02\x7f\x82\xf1:\xde" +
	"\xb8\x91\xf0\xda\xf9\x99\xdck\xac\x8b'f\xed:^\xa1" +
	".\xef\xe5\x15j\xe5\x16^\xa1V\xde\xc9+\xd4\xca>" +
	"^\xa1z\xaes+\xd4\xcd\x008\x99\xffs\xfa\x99f" +
	"\xda}L\x03\xb4\x09\xde\xd4v\\*d\xedeFv" +
	"\x9d\x01}Z\x8a\xef[L3\xc7L\xaem7\x92Y" +
	"\x03-\xdd\"\xc7v\x88\x16U\x9dV^\x94\x90\x0an" +
	"\xdb\xb0n\xa1\xed\x0cX\xe9D6\xbb\\\x03\xc9L3" +
	"g\x88w\xa9\xddL4\xd72\xb3\xcd4\xc1b\xf4t" +
	"i\xd6^B\xc1\x94a\xbc>\x15fi]\xab\xe9\x99" +
	"\x00\x8f\x1b\xa3F\x8f\x83\xf2F\x0f\xe5\xdb\x02(\xbfg" +
	"N\x80\xe2\xf8(\xdf\xbe\xb8@q\xd0\x03\xf9\xfds\x02" +
	"\x0c'\x84.\xc8\x1fZ\xec1\x1c\x0a\x9c\xb0\xe8\x82|" +
	"\x07\xbd|\xd0\xa58%\xc7\x05\x8660.D\xfd\x96" +
	"1\x7f\xfc\xe3\xb6\x8c'O^\x84\xd23\x9ff\xf7\xd0" +
	"\x87\xacR\x97\xb7\xca5K\x03\x95\xcb\xb7\xca\x0d\x14\xbc" +
	"\xd7\x8b\xa8\xde\x1ehzo\xa5\x84p\x8b\x88\xea\xdd\x81" +
	"\xa6wSo\xc1\xa8>\xc7\x0b\xda\xd4\xb9\xca\xeb\xd5\x01" +
	"\x00#\x85\x9b\x1cW9G\xf3\x0e\xa0(,\xcb\xbae" +
	"\x97\xd0w\xeb\x06\x88I\xf6\x9d-\xb2{\xe0\xe27\xd6" +
	"c##X\xe6K\xeb|o\xa0\x82\xf86\xc8\xf5y" +
	"\x15d\x82u\xfe\xff.i\x95f\xc8\xe2&\xb8\xe6\xef" +
	"\xcbX^*\x81\x93)\xe0\xfe\xd8\x93+Kc\x92\xb0" +
	"V\x9f\xbav\xb3d\x84\xfe\x9f\x08\x13#\xbb\xa7DT" +
	"\xaf\x0dx\xe8\x9a^\xcfCw\x07<\xb4i\xb1W\xf8" +
	"O\x80\x89\x95\xd7\xa5\xfc\xb9\xf6D\xeaRY\x05:\xb9" +
	"c@\xffd&h\xea\xae\xd2#\xd1\x92C\xa4\x89\xac" +
	"\xe4\xb7\xdc\xc3vY\xd3:N\x83\xcc\x8c\xd4\x98\xe5." +
	"\x08\x00f\xa4\x8es\x84gd\x97xT\xc9\xc6\\'" +
	"\xa2'\x0e2V\x1c\xbfG\xa7-\x94\xe1\xb7\x84\xedx" +
	"NN\xa5\xcc\xb2s_\xb3p\xc6\xebC\xa9\x83\x98\xe1" +
	"r\x11\xd5\x1f\x05\x12^\x0f\xa1\xa6SD\xf5\xc7\x02:" +
	"\x9a\x8b\xd3\x1f@\\\x1b\xd03\xb9\x80zl\x95>\xbc" +
	"\x9cA\xc4H\xdb\xfd8\x19\x04\x9c\x0c8\xe2\x89\x97Y" +
	"\xa18)\xaf\xe8[\xddL\xce\x1eb\xead1T\xe5" +
	"8\xeenf\x93-g\x8a\xa8\x9e+`5\xfe\xcdq" +
	"\xb73\x97\xde\x9e%\xa2\xba\x80(\xf8\xe0\x02\x7fnI" +
	"\x1f\\t\x1ckw3s\xad\x9ed\xd4I\x96Yc" +
	"\xce\x89\x9e\x82/-\x98\xa8\xa8\x90E\x06\xb3\xa6\x8d\x12" +
	"\x08(\xf1\x0d\xe8\x94\xd1s\x94\xef=c\x8c\xaf\xbc\xbb" +
	"\x99\xc9\xf9\xcd\xcc\x9eSP\x9c\xfe\x0awU\xf2\xdcF" +
	"\x10\xc6)\x91qn\xc1qT\x0f$\x96x\xd2O," +
	"\x81\xf2\xd77V\xf9\x0b$\xf4|b\xd9\xdc\xebU\xb5" +
	"\xc7\x03\x89\xe5\x974\xfc1\x11\xd5g\x02\xd4w'\x0d" +
	"\x7f\xdc=\xf7\xf0\xb3\xcd\xa5 \x95\xd5\xfe\xbf;\xc7\x9c" +
	" \xf7\x1d\xdb0D\xe4\xbc\xfb\x9f\xe6\xfe\x81D\xf1\xfd" +
	"O/'\x8c\xb3\x9a8a<\xbd\xc9\xbd\xffi\xe2L" +
	"\xcc\x1d\x07b:\xdbl\xf5k\x8d\x0b\x17\xd1\xbf\xf9\xe7" +
	"/\xa0\x7f\x0b\xe75\x8e\xb3Z \xfbH\x9e\x13\xa6r" +
	"\xc4s/<\xd1U\xb0\x98\x0bxz\xbb\xab\xb1pV" +
	"T-|\xeb\x85\xc1\xf3s\xbc\xc3\xa2W\x04\xac\x16\xbf" +
	"q\\G\xec&\xd9\xe7DT_\x17\xb0:\xf4\xb5\xe3" +
	"zb\xcf\xeaBgR\x1d>\xe6\xb8\x04\xed\xed\xd5\x85" +
	"\xd6\xa4z\xd2Q\xa7\x0e'Qor3\x80\xfa\xbe\x88" +
	"\xea\x1f)\xda=\xd4\x00\x1a%\x8dI\x140nQ+" +
	"\x85\xd1\xc2\x15\xbd\xfb\xdee\xf9\xd1\xc2M\xb6'\xbe\x86" +
	"8)F\x0b\xd7\xe7^A4<\xc6\x0e\xbc\xe0a\xb4" +
	"\xf0\xdb\x1cO\xc0K\"*D\xbc\x19\xf2\xbf\xbb(\x16" +
	"(\x1c\xfc\x00\x94\x9c\x01DO\xa6\xf2\xb8\xb7q\xa5\xf5" +
	"@\x9ap\xbb\xe2\xb7\xaf\xe3%i{y\xf7\x8a\xb5\xcc" +
	"L,\xe9\x84\xa2\x12\xb0\xc5\x192\x8d\xa6\xe1\xb9\xa6\x86" +
	"\xbaa5\xd9\x19\xcb\x12\xcd\xb5\xc7?\x90j^\xc1\xc3" +
	"a\xfcK\x9d\xc2\x99Ac\xf0V\xc7\x8bp}i\xe1" +
	"V\xc7\xa7\xfdkhtFDu\xb8p\xa9\x93\xff\xe9" +
	"\x93\x97~\x86\xc8\x10\x18)\xfcx\xc5\xa3\xaf\xfd^\x84" +
	"\xb9\xd47\x7f\x85\x1d\xbc#\xfcn\xca\xea\xaaC\xa1\xc9" +
	"\xf3\xe4\xb9|\x97\xa3M<67t\xf1\xd8\xbc\xa6\x8b" +
	"\xc7f\xce\xe4\xcd\xdc\xd0j\xde\xcc\xad\xe9\xe2\xcd\xdc@" +
	"/o\xe6t\x937s\x8c:\xbcSd\x8dD*\xdc" +
	"&\xb0R^\xd9\x0b\xd0\x9cM\\\xaa\x0d0'\x9bh" +
	"\xef\\\xd4\x9aJ\x01\x9a\xfcyA\xfe\xb9\x8b\xa5t\x93" +
	"\x81\x9b?\x9dl\xc2=;ta\xeb\xb8\xa3-F\xfd" +
	"a6A\xdeh7@\\\x95u\xb2\x09\xb7\xec@\x9c" +
	"\x17\x1e>OZ\xb7l\x90L\xcd,|\x8a\x98\x9aA" +
	"#\xdb\x8dU\xa6\xb6\x0cD\x96s\xb2\x89\xb6a\xdb\xff" +
	"p\x92l\xe6x7K%I\xf2\x7f\x03\x00\x00\xff\xff" +
	"u\xf3\xf3\""

func init() {
	schemas.Register(schema_fb2d77234707241e,
		0x824d474588994863,
		0x838419d256dc1071,
		0x844542c0bc50f248,
		0x85070a6faf2dcb4d,
		0x869060a0330d319a,
		0x897430f9f1af94c2,
		0x89bef2e379450ee3,
		0x8c6fb57d7725ec03,
		0x8cfae4b3459db40f,
		0x920d76878fcb1040,
		0x9439232ee1625745,
		0x98ebe8ee44b55fad,
		0x9cbf543afc5b2ef8,
		0x9ccb60a0785e0ebe,
		0x9f30b9a1389539e7,
		0xa00b05371373e6d6,
		0xa23710e0ed103b12,
		0xa26fe791fa514c3f,
		0xa5dedc367594e97a,
		0xaa95f2c2154f801a,
		0xabc9ff4fbb5f0b04,
		0xaddb752fe579c78e,
		0xb288e1a44d8ed064,
		0xb6e3b8602914cca6,
		0xb950ba19ca79c37f,
		0xbb86a24042c66855,
		0xbd157ada88cf152d,
		0xbd3d681e8600457f,
		0xc0d7ec4193d608ef,
		0xc660dbd95ff47272,
		0xc698b99f896737c7,
		0xcbd9cd959c154da1,
		0xcc368c426d5175df,
		0xcf61cf65228728bc,
		0xcfe323414bf5b98f,
		0xd48a054099ff07a6,
		0xd4ee6164b4bdc4eb,
		0xdbf0b70cd25804f1,
		0xddcec9b635b388d9,
		0xdef6357752ebba29,
		0xe0b5130f36b01c23,
		0xe1919bd896a6ac1a,
		0xe37f36219a0e109a,
		0xe48faf3beca83da0,
		0xe5deb2935d54bb0a,
		0xeab015ca8107699b,
		0xeb2fd278248964aa,
		0xecb99c4b492abf4a,
		0xef2306d933494fde,
		0xf4f09607a66adddc,
		0xf53b9c54e2e0158b,
		0xf6bdb0430ec96918,
		0xfb8adfbb2da1e392,
		0xfb92513472887325,
		0xfd4f6f21b80818a8,
		0xfe7e3774c0f9bf1f)
}
