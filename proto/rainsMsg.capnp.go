// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RainsMessage struct{ capnp.Struct }

// RainsMessage_TypeID is the unique identifier for the type RainsMessage.
const RainsMessage_TypeID = 0xbd157ada88cf152d

func NewRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func NewRootRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func ReadRootRainsMessage(msg *capnp.Message) (RainsMessage, error) {
	root, err := msg.RootPtr()
	return RainsMessage{root.Struct()}, err
}

func (s RainsMessage) String() string {
	str, _ := text.Marshal(0xbd157ada88cf152d, s.Struct)
	return str
}

func (s RainsMessage) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s RainsMessage) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s RainsMessage) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Capabilities() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.TextList{List: p.List()}, err
}

func (s RainsMessage) HasCapabilities() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetCapabilities(v capnp.TextList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewCapabilities sets the capabilities field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RainsMessage) NewCapabilities(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return []byte(p.Data()), err
}

func (s RainsMessage) HasToken() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetToken(v []byte) error {
	return s.Struct.SetData(2, v)
}

func (s RainsMessage) Content() (MessageSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return MessageSection_List{List: p.List()}, err
}

func (s RainsMessage) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetContent(v MessageSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated MessageSection_List, preferring placement in s's segment.
func (s RainsMessage) NewContent(n int32) (MessageSection_List, error) {
	l, err := NewMessageSection_List(s.Struct.Segment(), n)
	if err != nil {
		return MessageSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// RainsMessage_List is a list of RainsMessage.
type RainsMessage_List struct{ capnp.List }

// NewRainsMessage creates a new list of RainsMessage.
func NewRainsMessage_List(s *capnp.Segment, sz int32) (RainsMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return RainsMessage_List{l}, err
}

func (s RainsMessage_List) At(i int) RainsMessage { return RainsMessage{s.List.Struct(i)} }

func (s RainsMessage_List) Set(i int, v RainsMessage) error { return s.List.SetStruct(i, v.Struct) }

// RainsMessage_Promise is a wrapper for a RainsMessage promised by a client call.
type RainsMessage_Promise struct{ *capnp.Pipeline }

func (p RainsMessage_Promise) Struct() (RainsMessage, error) {
	s, err := p.Pipeline.Struct()
	return RainsMessage{s}, err
}

type MessageSection struct{ capnp.Struct }
type MessageSection_Which uint16

const (
	MessageSection_Which_addressQuery     MessageSection_Which = 0
	MessageSection_Which_addressZone      MessageSection_Which = 1
	MessageSection_Which_addressAssertion MessageSection_Which = 2
	MessageSection_Which_assertion        MessageSection_Which = 3
	MessageSection_Which_shard            MessageSection_Which = 4
	MessageSection_Which_zone             MessageSection_Which = 5
	MessageSection_Which_query            MessageSection_Which = 6
	MessageSection_Which_notification     MessageSection_Which = 7
)

func (w MessageSection_Which) String() string {
	const s = "addressQueryaddressZoneaddressAssertionassertionshardzonequerynotification"
	switch w {
	case MessageSection_Which_addressQuery:
		return s[0:12]
	case MessageSection_Which_addressZone:
		return s[12:23]
	case MessageSection_Which_addressAssertion:
		return s[23:39]
	case MessageSection_Which_assertion:
		return s[39:48]
	case MessageSection_Which_shard:
		return s[48:53]
	case MessageSection_Which_zone:
		return s[53:57]
	case MessageSection_Which_query:
		return s[57:62]
	case MessageSection_Which_notification:
		return s[62:74]

	}
	return "MessageSection_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageSection_TypeID is the unique identifier for the type MessageSection.
const MessageSection_TypeID = 0xf4f09607a66adddc

func NewMessageSection(s *capnp.Segment) (MessageSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageSection{st}, err
}

func NewRootMessageSection(s *capnp.Segment) (MessageSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageSection{st}, err
}

func ReadRootMessageSection(msg *capnp.Message) (MessageSection, error) {
	root, err := msg.RootPtr()
	return MessageSection{root.Struct()}, err
}

func (s MessageSection) String() string {
	str, _ := text.Marshal(0xf4f09607a66adddc, s.Struct)
	return str
}

func (s MessageSection) Which() MessageSection_Which {
	return MessageSection_Which(s.Struct.Uint16(0))
}
func (s MessageSection) AddressQuery() (AddressQuerySection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressQuerySection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressQuery() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressQuery(v AddressQuerySection) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressQuery sets the addressQuery field to a newly
// allocated AddressQuerySection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressQuery() (AddressQuerySection, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAddressQuerySection(s.Struct.Segment())
	if err != nil {
		return AddressQuerySection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressZone() (AddressZoneSection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressZoneSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressZone() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressZone(v AddressZoneSection) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressZone sets the addressZone field to a newly
// allocated AddressZoneSection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressZone() (AddressZoneSection, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewAddressZoneSection(s.Struct.Segment())
	if err != nil {
		return AddressZoneSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressAssertion() (AddressAssertionSection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressAssertionSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressAssertion() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressAssertion(v AddressAssertionSection) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressAssertion sets the addressAssertion field to a newly
// allocated AddressAssertionSection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressAssertion() (AddressAssertionSection, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewAddressAssertionSection(s.Struct.Segment())
	if err != nil {
		return AddressAssertionSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Assertion() (AssertionSection, error) {
	p, err := s.Struct.Ptr(0)
	return AssertionSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAssertion() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAssertion(v AssertionSection) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAssertion sets the assertion field to a newly
// allocated AssertionSection struct, preferring placement in s's segment.
func (s MessageSection) NewAssertion() (AssertionSection, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewAssertionSection(s.Struct.Segment())
	if err != nil {
		return AssertionSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Shard() (ShardSection, error) {
	p, err := s.Struct.Ptr(0)
	return ShardSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasShard() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetShard(v ShardSection) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewShard sets the shard field to a newly
// allocated ShardSection struct, preferring placement in s's segment.
func (s MessageSection) NewShard() (ShardSection, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewShardSection(s.Struct.Segment())
	if err != nil {
		return ShardSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Zone() (ZoneSection, error) {
	p, err := s.Struct.Ptr(0)
	return ZoneSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasZone() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetZone(v ZoneSection) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZone sets the zone field to a newly
// allocated ZoneSection struct, preferring placement in s's segment.
func (s MessageSection) NewZone() (ZoneSection, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewZoneSection(s.Struct.Segment())
	if err != nil {
		return ZoneSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Query() (QuerySection, error) {
	p, err := s.Struct.Ptr(0)
	return QuerySection{Struct: p.Struct()}, err
}

func (s MessageSection) HasQuery() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetQuery(v QuerySection) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated QuerySection struct, preferring placement in s's segment.
func (s MessageSection) NewQuery() (QuerySection, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewQuerySection(s.Struct.Segment())
	if err != nil {
		return QuerySection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Notification() (NotificationSection, error) {
	p, err := s.Struct.Ptr(0)
	return NotificationSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasNotification() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetNotification(v NotificationSection) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNotification sets the notification field to a newly
// allocated NotificationSection struct, preferring placement in s's segment.
func (s MessageSection) NewNotification() (NotificationSection, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewNotificationSection(s.Struct.Segment())
	if err != nil {
		return NotificationSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MessageSection_List is a list of MessageSection.
type MessageSection_List struct{ capnp.List }

// NewMessageSection creates a new list of MessageSection.
func NewMessageSection_List(s *capnp.Segment, sz int32) (MessageSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MessageSection_List{l}, err
}

func (s MessageSection_List) At(i int) MessageSection { return MessageSection{s.List.Struct(i)} }

func (s MessageSection_List) Set(i int, v MessageSection) error { return s.List.SetStruct(i, v.Struct) }

// MessageSection_Promise is a wrapper for a MessageSection promised by a client call.
type MessageSection_Promise struct{ *capnp.Pipeline }

func (p MessageSection_Promise) Struct() (MessageSection, error) {
	s, err := p.Pipeline.Struct()
	return MessageSection{s}, err
}

func (p MessageSection_Promise) AddressQuery() AddressQuerySection_Promise {
	return AddressQuerySection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressZone() AddressZoneSection_Promise {
	return AddressZoneSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressAssertion() AddressAssertionSection_Promise {
	return AddressAssertionSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Assertion() AssertionSection_Promise {
	return AssertionSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Shard() ShardSection_Promise {
	return ShardSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Zone() ZoneSection_Promise {
	return ZoneSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Query() QuerySection_Promise {
	return QuerySection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Notification() NotificationSection_Promise {
	return NotificationSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AssertionSection struct{ capnp.Struct }

// AssertionSection_TypeID is the unique identifier for the type AssertionSection.
const AssertionSection_TypeID = 0xecb99c4b492abf4a

func NewAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func NewRootAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func ReadRootAssertionSection(msg *capnp.Message) (AssertionSection, error) {
	root, err := msg.RootPtr()
	return AssertionSection{root.Struct()}, err
}

func (s AssertionSection) String() string {
	str, _ := text.Marshal(0xecb99c4b492abf4a, s.Struct)
	return str
}

func (s AssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s AssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) SubjectName() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s AssertionSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AssertionSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

func (s AssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(4)
	return Obj_List{List: p.List()}, err
}

func (s AssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// AssertionSection_List is a list of AssertionSection.
type AssertionSection_List struct{ capnp.List }

// NewAssertionSection creates a new list of AssertionSection.
func NewAssertionSection_List(s *capnp.Segment, sz int32) (AssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return AssertionSection_List{l}, err
}

func (s AssertionSection_List) At(i int) AssertionSection { return AssertionSection{s.List.Struct(i)} }

func (s AssertionSection_List) Set(i int, v AssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AssertionSection_Promise is a wrapper for a AssertionSection promised by a client call.
type AssertionSection_Promise struct{ *capnp.Pipeline }

func (p AssertionSection_Promise) Struct() (AssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AssertionSection{s}, err
}

type ShardSection struct{ capnp.Struct }

// ShardSection_TypeID is the unique identifier for the type ShardSection.
const ShardSection_TypeID = 0xc0d7ec4193d608ef

func NewShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func NewRootShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func ReadRootShardSection(msg *capnp.Message) (ShardSection, error) {
	root, err := msg.RootPtr()
	return ShardSection{root.Struct()}, err
}

func (s ShardSection) String() string {
	str, _ := text.Marshal(0xc0d7ec4193d608ef, s.Struct)
	return str
}

func (s ShardSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s ShardSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ShardSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ShardSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ShardSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ShardSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ShardSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ShardSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ShardSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ShardSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ShardSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ShardSection) RangeFrom() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s ShardSection) HasRangeFrom() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeFromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeFrom(v string) error {
	return s.Struct.SetText(3, v)
}

func (s ShardSection) RangeTo() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s ShardSection) HasRangeTo() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeTo(v string) error {
	return s.Struct.SetText(4, v)
}

func (s ShardSection) Content() (AssertionSection_List, error) {
	p, err := s.Struct.Ptr(5)
	return AssertionSection_List{List: p.List()}, err
}

func (s ShardSection) HasContent() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetContent(v AssertionSection_List) error {
	return s.Struct.SetPtr(5, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AssertionSection_List, preferring placement in s's segment.
func (s ShardSection) NewContent(n int32) (AssertionSection_List, error) {
	l, err := NewAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(5, l.List.ToPtr())
	return l, err
}

// ShardSection_List is a list of ShardSection.
type ShardSection_List struct{ capnp.List }

// NewShardSection creates a new list of ShardSection.
func NewShardSection_List(s *capnp.Segment, sz int32) (ShardSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return ShardSection_List{l}, err
}

func (s ShardSection_List) At(i int) ShardSection { return ShardSection{s.List.Struct(i)} }

func (s ShardSection_List) Set(i int, v ShardSection) error { return s.List.SetStruct(i, v.Struct) }

// ShardSection_Promise is a wrapper for a ShardSection promised by a client call.
type ShardSection_Promise struct{ *capnp.Pipeline }

func (p ShardSection_Promise) Struct() (ShardSection, error) {
	s, err := p.Pipeline.Struct()
	return ShardSection{s}, err
}

type ZoneSection struct{ capnp.Struct }

// ZoneSection_TypeID is the unique identifier for the type ZoneSection.
const ZoneSection_TypeID = 0xcfe323414bf5b98f

func NewZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func NewRootZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func ReadRootZoneSection(msg *capnp.Message) (ZoneSection, error) {
	root, err := msg.RootPtr()
	return ZoneSection{root.Struct()}, err
}

func (s ZoneSection) String() string {
	str, _ := text.Marshal(0xcfe323414bf5b98f, s.Struct)
	return str
}

func (s ZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s ZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ZoneSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ZoneSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ZoneSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ZoneSection) Content() (MessageSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return MessageSection_List{List: p.List()}, err
}

func (s ZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetContent(v MessageSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated MessageSection_List, preferring placement in s's segment.
func (s ZoneSection) NewContent(n int32) (MessageSection_List, error) {
	l, err := NewMessageSection_List(s.Struct.Segment(), n)
	if err != nil {
		return MessageSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// ZoneSection_List is a list of ZoneSection.
type ZoneSection_List struct{ capnp.List }

// NewZoneSection creates a new list of ZoneSection.
func NewZoneSection_List(s *capnp.Segment, sz int32) (ZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return ZoneSection_List{l}, err
}

func (s ZoneSection_List) At(i int) ZoneSection { return ZoneSection{s.List.Struct(i)} }

func (s ZoneSection_List) Set(i int, v ZoneSection) error { return s.List.SetStruct(i, v.Struct) }

// ZoneSection_Promise is a wrapper for a ZoneSection promised by a client call.
type ZoneSection_Promise struct{ *capnp.Pipeline }

func (p ZoneSection_Promise) Struct() (ZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return ZoneSection{s}, err
}

type QuerySection struct{ capnp.Struct }

// QuerySection_TypeID is the unique identifier for the type QuerySection.
const QuerySection_TypeID = 0xcc368c426d5175df

func NewQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return QuerySection{st}, err
}

func NewRootQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return QuerySection{st}, err
}

func ReadRootQuerySection(msg *capnp.Message) (QuerySection, error) {
	root, err := msg.RootPtr()
	return QuerySection{root.Struct()}, err
}

func (s QuerySection) String() string {
	str, _ := text.Marshal(0xcc368c426d5175df, s.Struct)
	return str
}

func (s QuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s QuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s QuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s QuerySection) SetContext(v string) error {
	return s.Struct.SetText(1, v)
}

func (s QuerySection) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s QuerySection) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s QuerySection) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s QuerySection) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s QuerySection) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s QuerySection) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s QuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s QuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s QuerySection) Options() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Int32List{List: p.List()}, err
}

func (s QuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetOptions(v capnp.Int32List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s QuerySection) NewOptions(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// QuerySection_List is a list of QuerySection.
type QuerySection_List struct{ capnp.List }

// NewQuerySection creates a new list of QuerySection.
func NewQuerySection_List(s *capnp.Segment, sz int32) (QuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return QuerySection_List{l}, err
}

func (s QuerySection_List) At(i int) QuerySection { return QuerySection{s.List.Struct(i)} }

func (s QuerySection_List) Set(i int, v QuerySection) error { return s.List.SetStruct(i, v.Struct) }

// QuerySection_Promise is a wrapper for a QuerySection promised by a client call.
type QuerySection_Promise struct{ *capnp.Pipeline }

func (p QuerySection_Promise) Struct() (QuerySection, error) {
	s, err := p.Pipeline.Struct()
	return QuerySection{s}, err
}

type AddressAssertionSection struct{ capnp.Struct }

// AddressAssertionSection_TypeID is the unique identifier for the type AddressAssertionSection.
const AddressAssertionSection_TypeID = 0xdbf0b70cd25804f1

func NewAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func NewRootAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func ReadRootAddressAssertionSection(msg *capnp.Message) (AddressAssertionSection, error) {
	root, err := msg.RootPtr()
	return AddressAssertionSection{root.Struct()}, err
}

func (s AddressAssertionSection) String() string {
	str, _ := text.Marshal(0xdbf0b70cd25804f1, s.Struct)
	return str
}

func (s AddressAssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) SubjectAddr() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s AddressAssertionSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SubjectAddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s AddressAssertionSection) SetSubjectAddr(v string) error {
	return s.Struct.SetText(1, v)
}

func (s AddressAssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressAssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressAssertionSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressAssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(3)
	return Obj_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// AddressAssertionSection_List is a list of AddressAssertionSection.
type AddressAssertionSection_List struct{ capnp.List }

// NewAddressAssertionSection creates a new list of AddressAssertionSection.
func NewAddressAssertionSection_List(s *capnp.Segment, sz int32) (AddressAssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressAssertionSection_List{l}, err
}

func (s AddressAssertionSection_List) At(i int) AddressAssertionSection {
	return AddressAssertionSection{s.List.Struct(i)}
}

func (s AddressAssertionSection_List) Set(i int, v AddressAssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressAssertionSection_Promise is a wrapper for a AddressAssertionSection promised by a client call.
type AddressAssertionSection_Promise struct{ *capnp.Pipeline }

func (p AddressAssertionSection_Promise) Struct() (AddressAssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressAssertionSection{s}, err
}

type AddressZoneSection struct{ capnp.Struct }

// AddressZoneSection_TypeID is the unique identifier for the type AddressZoneSection.
const AddressZoneSection_TypeID = 0xb6e3b8602914cca6

func NewAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func NewRootAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func ReadRootAddressZoneSection(msg *capnp.Message) (AddressZoneSection, error) {
	root, err := msg.RootPtr()
	return AddressZoneSection{root.Struct()}, err
}

func (s AddressZoneSection) String() string {
	str, _ := text.Marshal(0xb6e3b8602914cca6, s.Struct)
	return str
}

func (s AddressZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s AddressZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s AddressZoneSection) SubjectAddr() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s AddressZoneSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SubjectAddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s AddressZoneSection) SetSubjectAddr(v string) error {
	return s.Struct.SetText(1, v)
}

func (s AddressZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressZoneSection) Content() (AddressAssertionSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return AddressAssertionSection_List{List: p.List()}, err
}

func (s AddressZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetContent(v AddressAssertionSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AddressAssertionSection_List, preferring placement in s's segment.
func (s AddressZoneSection) NewContent(n int32) (AddressAssertionSection_List, error) {
	l, err := NewAddressAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AddressAssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// AddressZoneSection_List is a list of AddressZoneSection.
type AddressZoneSection_List struct{ capnp.List }

// NewAddressZoneSection creates a new list of AddressZoneSection.
func NewAddressZoneSection_List(s *capnp.Segment, sz int32) (AddressZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressZoneSection_List{l}, err
}

func (s AddressZoneSection_List) At(i int) AddressZoneSection {
	return AddressZoneSection{s.List.Struct(i)}
}

func (s AddressZoneSection_List) Set(i int, v AddressZoneSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressZoneSection_Promise is a wrapper for a AddressZoneSection promised by a client call.
type AddressZoneSection_Promise struct{ *capnp.Pipeline }

func (p AddressZoneSection_Promise) Struct() (AddressZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressZoneSection{s}, err
}

type AddressQuerySection struct{ capnp.Struct }

// AddressQuerySection_TypeID is the unique identifier for the type AddressQuerySection.
const AddressQuerySection_TypeID = 0xaa95f2c2154f801a

func NewAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return AddressQuerySection{st}, err
}

func NewRootAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3})
	return AddressQuerySection{st}, err
}

func ReadRootAddressQuerySection(msg *capnp.Message) (AddressQuerySection, error) {
	root, err := msg.RootPtr()
	return AddressQuerySection{root.Struct()}, err
}

func (s AddressQuerySection) String() string {
	str, _ := text.Marshal(0xaa95f2c2154f801a, s.Struct)
	return str
}

func (s AddressQuerySection) SubjectAddr() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AddressQuerySection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SubjectAddrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AddressQuerySection) SetSubjectAddr(v string) error {
	return s.Struct.SetText(0, v)
}

func (s AddressQuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s AddressQuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s AddressQuerySection) SetContext(v string) error {
	return s.Struct.SetText(1, v)
}

func (s AddressQuerySection) Types() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s AddressQuerySection) SetTypes(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s AddressQuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s AddressQuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s AddressQuerySection) Options() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(2)
	return capnp.Int32List{List: p.List()}, err
}

func (s AddressQuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetOptions(v capnp.Int32List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s AddressQuerySection) NewOptions(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// AddressQuerySection_List is a list of AddressQuerySection.
type AddressQuerySection_List struct{ capnp.List }

// NewAddressQuerySection creates a new list of AddressQuerySection.
func NewAddressQuerySection_List(s *capnp.Segment, sz int32) (AddressQuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 3}, sz)
	return AddressQuerySection_List{l}, err
}

func (s AddressQuerySection_List) At(i int) AddressQuerySection {
	return AddressQuerySection{s.List.Struct(i)}
}

func (s AddressQuerySection_List) Set(i int, v AddressQuerySection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressQuerySection_Promise is a wrapper for a AddressQuerySection promised by a client call.
type AddressQuerySection_Promise struct{ *capnp.Pipeline }

func (p AddressQuerySection_Promise) Struct() (AddressQuerySection, error) {
	s, err := p.Pipeline.Struct()
	return AddressQuerySection{s}, err
}

type NotificationSection struct{ capnp.Struct }

// NotificationSection_TypeID is the unique identifier for the type NotificationSection.
const NotificationSection_TypeID = 0x844542c0bc50f248

func NewNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func NewRootNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func ReadRootNotificationSection(msg *capnp.Message) (NotificationSection, error) {
	root, err := msg.RootPtr()
	return NotificationSection{root.Struct()}, err
}

func (s NotificationSection) String() string {
	str, _ := text.Marshal(0x844542c0bc50f248, s.Struct)
	return str
}

func (s NotificationSection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s NotificationSection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NotificationSection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s NotificationSection) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s NotificationSection) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s NotificationSection) Data() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s NotificationSection) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NotificationSection) DataBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s NotificationSection) SetData(v string) error {
	return s.Struct.SetText(1, v)
}

// NotificationSection_List is a list of NotificationSection.
type NotificationSection_List struct{ capnp.List }

// NewNotificationSection creates a new list of NotificationSection.
func NewNotificationSection_List(s *capnp.Segment, sz int32) (NotificationSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return NotificationSection_List{l}, err
}

func (s NotificationSection_List) At(i int) NotificationSection {
	return NotificationSection{s.List.Struct(i)}
}

func (s NotificationSection_List) Set(i int, v NotificationSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// NotificationSection_Promise is a wrapper for a NotificationSection promised by a client call.
type NotificationSection_Promise struct{ *capnp.Pipeline }

func (p NotificationSection_Promise) Struct() (NotificationSection, error) {
	s, err := p.Pipeline.Struct()
	return NotificationSection{s}, err
}

type Signature struct{ capnp.Struct }

// Signature_TypeID is the unique identifier for the type Signature.
const Signature_TypeID = 0xcf61cf65228728bc

func NewSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func NewRootSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func ReadRootSignature(msg *capnp.Message) (Signature, error) {
	root, err := msg.RootPtr()
	return Signature{root.Struct()}, err
}

func (s Signature) String() string {
	str, _ := text.Marshal(0xcf61cf65228728bc, s.Struct)
	return str
}

func (s Signature) Algorithm() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Signature) SetAlgorithm(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Signature) KeySpace() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Signature) SetKeySpace(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s Signature) ValidSince() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Signature) SetValidSince(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Signature) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s Signature) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s Signature) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Signature) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Signature) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Signature_List is a list of Signature.
type Signature_List struct{ capnp.List }

// NewSignature creates a new list of Signature.
func NewSignature_List(s *capnp.Segment, sz int32) (Signature_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Signature_List{l}, err
}

func (s Signature_List) At(i int) Signature { return Signature{s.List.Struct(i)} }

func (s Signature_List) Set(i int, v Signature) error { return s.List.SetStruct(i, v.Struct) }

// Signature_Promise is a wrapper for a Signature promised by a client call.
type Signature_Promise struct{ *capnp.Pipeline }

func (p Signature_Promise) Struct() (Signature, error) {
	s, err := p.Pipeline.Struct()
	return Signature{s}, err
}

type PublicKey struct{ capnp.Struct }

// PublicKey_TypeID is the unique identifier for the type PublicKey.
const PublicKey_TypeID = 0x8cfae4b3459db40f

func NewPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func NewRootPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func ReadRootPublicKey(msg *capnp.Message) (PublicKey, error) {
	root, err := msg.RootPtr()
	return PublicKey{root.Struct()}, err
}

func (s PublicKey) String() string {
	str, _ := text.Marshal(0x8cfae4b3459db40f, s.Struct)
	return str
}

func (s PublicKey) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s PublicKey) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s PublicKey) KeySpace() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s PublicKey) SetKeySpace(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s PublicKey) ValidSince() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s PublicKey) SetValidSince(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s PublicKey) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s PublicKey) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s PublicKey) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PublicKey) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PublicKey) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

// PublicKey_List is a list of PublicKey.
type PublicKey_List struct{ capnp.List }

// NewPublicKey creates a new list of PublicKey.
func NewPublicKey_List(s *capnp.Segment, sz int32) (PublicKey_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PublicKey_List{l}, err
}

func (s PublicKey_List) At(i int) PublicKey { return PublicKey{s.List.Struct(i)} }

func (s PublicKey_List) Set(i int, v PublicKey) error { return s.List.SetStruct(i, v.Struct) }

// PublicKey_Promise is a wrapper for a PublicKey promised by a client call.
type PublicKey_Promise struct{ *capnp.Pipeline }

func (p PublicKey_Promise) Struct() (PublicKey, error) {
	s, err := p.Pipeline.Struct()
	return PublicKey{s}, err
}

type CertificateObject struct{ capnp.Struct }

// CertificateObject_TypeID is the unique identifier for the type CertificateObject.
const CertificateObject_TypeID = 0xfb92513472887325

func NewCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CertificateObject{st}, err
}

func NewRootCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CertificateObject{st}, err
}

func ReadRootCertificateObject(msg *capnp.Message) (CertificateObject, error) {
	root, err := msg.RootPtr()
	return CertificateObject{root.Struct()}, err
}

func (s CertificateObject) String() string {
	str, _ := text.Marshal(0xfb92513472887325, s.Struct)
	return str
}

func (s CertificateObject) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s CertificateObject) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s CertificateObject) Usage() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s CertificateObject) SetUsage(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s CertificateObject) HashAlgo() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s CertificateObject) SetHashAlgo(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s CertificateObject) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertificateObject) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertificateObject) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertificateObject_List is a list of CertificateObject.
type CertificateObject_List struct{ capnp.List }

// NewCertificateObject creates a new list of CertificateObject.
func NewCertificateObject_List(s *capnp.Segment, sz int32) (CertificateObject_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return CertificateObject_List{l}, err
}

func (s CertificateObject_List) At(i int) CertificateObject {
	return CertificateObject{s.List.Struct(i)}
}

func (s CertificateObject_List) Set(i int, v CertificateObject) error {
	return s.List.SetStruct(i, v.Struct)
}

// CertificateObject_Promise is a wrapper for a CertificateObject promised by a client call.
type CertificateObject_Promise struct{ *capnp.Pipeline }

func (p CertificateObject_Promise) Struct() (CertificateObject, error) {
	s, err := p.Pipeline.Struct()
	return CertificateObject{s}, err
}

type ServiceInfo struct{ capnp.Struct }

// ServiceInfo_TypeID is the unique identifier for the type ServiceInfo.
const ServiceInfo_TypeID = 0xeab015ca8107699b

func NewServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func NewRootServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func ReadRootServiceInfo(msg *capnp.Message) (ServiceInfo, error) {
	root, err := msg.RootPtr()
	return ServiceInfo{root.Struct()}, err
}

func (s ServiceInfo) String() string {
	str, _ := text.Marshal(0xeab015ca8107699b, s.Struct)
	return str
}

func (s ServiceInfo) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceInfo) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfo) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ServiceInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s ServiceInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s ServiceInfo) Priority() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfo) SetPriority(v uint32) {
	s.Struct.SetUint32(4, v)
}

// ServiceInfo_List is a list of ServiceInfo.
type ServiceInfo_List struct{ capnp.List }

// NewServiceInfo creates a new list of ServiceInfo.
func NewServiceInfo_List(s *capnp.Segment, sz int32) (ServiceInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfo_List{l}, err
}

func (s ServiceInfo_List) At(i int) ServiceInfo { return ServiceInfo{s.List.Struct(i)} }

func (s ServiceInfo_List) Set(i int, v ServiceInfo) error { return s.List.SetStruct(i, v.Struct) }

// ServiceInfo_Promise is a wrapper for a ServiceInfo promised by a client call.
type ServiceInfo_Promise struct{ *capnp.Pipeline }

func (p ServiceInfo_Promise) Struct() (ServiceInfo, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfo{s}, err
}

type Obj struct{ capnp.Struct }
type Obj_value Obj
type Obj_value_Which uint16

const (
	Obj_value_Which_name    Obj_value_Which = 0
	Obj_value_Which_ip6     Obj_value_Which = 1
	Obj_value_Which_ip4     Obj_value_Which = 2
	Obj_value_Which_redir   Obj_value_Which = 3
	Obj_value_Which_deleg   Obj_value_Which = 4
	Obj_value_Which_nameset Obj_value_Which = 5
	Obj_value_Which_cert    Obj_value_Which = 6
	Obj_value_Which_service Obj_value_Which = 7
	Obj_value_Which_regr    Obj_value_Which = 8
	Obj_value_Which_regt    Obj_value_Which = 9
	Obj_value_Which_infra   Obj_value_Which = 10
	Obj_value_Which_extra   Obj_value_Which = 11
	Obj_value_Which_next    Obj_value_Which = 12
)

func (w Obj_value_Which) String() string {
	const s = "nameip6ip4redirdelegnamesetcertserviceregrregtinfraextranext"
	switch w {
	case Obj_value_Which_name:
		return s[0:4]
	case Obj_value_Which_ip6:
		return s[4:7]
	case Obj_value_Which_ip4:
		return s[7:10]
	case Obj_value_Which_redir:
		return s[10:15]
	case Obj_value_Which_deleg:
		return s[15:20]
	case Obj_value_Which_nameset:
		return s[20:27]
	case Obj_value_Which_cert:
		return s[27:31]
	case Obj_value_Which_service:
		return s[31:38]
	case Obj_value_Which_regr:
		return s[38:42]
	case Obj_value_Which_regt:
		return s[42:46]
	case Obj_value_Which_infra:
		return s[46:51]
	case Obj_value_Which_extra:
		return s[51:56]
	case Obj_value_Which_next:
		return s[56:60]

	}
	return "Obj_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Obj_TypeID is the unique identifier for the type Obj.
const Obj_TypeID = 0xeb2fd278248964aa

func NewObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func NewRootObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func ReadRootObj(msg *capnp.Message) (Obj, error) {
	root, err := msg.RootPtr()
	return Obj{root.Struct()}, err
}

func (s Obj) String() string {
	str, _ := text.Marshal(0xeb2fd278248964aa, s.Struct)
	return str
}

func (s Obj) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Obj) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Obj) Value() Obj_value { return Obj_value(s) }

func (s Obj_value) Which() Obj_value_Which {
	return Obj_value_Which(s.Struct.Uint16(4))
}
func (s Obj_value) Name() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Obj_value) HasName() bool {
	if s.Struct.Uint16(4) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetName(v capnp.TextList) error {
	s.Struct.SetUint16(4, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewName sets the name field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Obj_value) NewName(n int32) (capnp.TextList, error) {
	s.Struct.SetUint16(4, 0)
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Obj_value) Ip6() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasIp6() bool {
	if s.Struct.Uint16(4) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) Ip6Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetIp6(v string) error {
	s.Struct.SetUint16(4, 1)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Ip4() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasIp4() bool {
	if s.Struct.Uint16(4) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) Ip4Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetIp4(v string) error {
	s.Struct.SetUint16(4, 2)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Redir() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRedir() bool {
	if s.Struct.Uint16(4) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RedirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRedir(v string) error {
	s.Struct.SetUint16(4, 3)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Deleg() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasDeleg() bool {
	if s.Struct.Uint16(4) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetDeleg(v PublicKey) error {
	s.Struct.SetUint16(4, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDeleg sets the deleg field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewDeleg() (PublicKey, error) {
	s.Struct.SetUint16(4, 4)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Nameset() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasNameset() bool {
	if s.Struct.Uint16(4) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) NamesetBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetNameset(v string) error {
	s.Struct.SetUint16(4, 5)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Cert() (CertificateObject, error) {
	p, err := s.Struct.Ptr(0)
	return CertificateObject{Struct: p.Struct()}, err
}

func (s Obj_value) HasCert() bool {
	if s.Struct.Uint16(4) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetCert(v CertificateObject) error {
	s.Struct.SetUint16(4, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCert sets the cert field to a newly
// allocated CertificateObject struct, preferring placement in s's segment.
func (s Obj_value) NewCert() (CertificateObject, error) {
	s.Struct.SetUint16(4, 6)
	ss, err := NewCertificateObject(s.Struct.Segment())
	if err != nil {
		return CertificateObject{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Service() (ServiceInfo, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceInfo{Struct: p.Struct()}, err
}

func (s Obj_value) HasService() bool {
	if s.Struct.Uint16(4) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetService(v ServiceInfo) error {
	s.Struct.SetUint16(4, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewService sets the service field to a newly
// allocated ServiceInfo struct, preferring placement in s's segment.
func (s Obj_value) NewService() (ServiceInfo, error) {
	s.Struct.SetUint16(4, 7)
	ss, err := NewServiceInfo(s.Struct.Segment())
	if err != nil {
		return ServiceInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Regr() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRegr() bool {
	if s.Struct.Uint16(4) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RegrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRegr(v string) error {
	s.Struct.SetUint16(4, 8)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Regt() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRegt() bool {
	if s.Struct.Uint16(4) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RegtBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRegt(v string) error {
	s.Struct.SetUint16(4, 9)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Infra() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasInfra() bool {
	if s.Struct.Uint16(4) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetInfra(v PublicKey) error {
	s.Struct.SetUint16(4, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfra sets the infra field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewInfra() (PublicKey, error) {
	s.Struct.SetUint16(4, 10)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Extra() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasExtra() bool {
	if s.Struct.Uint16(4) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetExtra(v PublicKey) error {
	s.Struct.SetUint16(4, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExtra sets the extra field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewExtra() (PublicKey, error) {
	s.Struct.SetUint16(4, 11)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Next() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasNext() bool {
	if s.Struct.Uint16(4) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetNext(v PublicKey) error {
	s.Struct.SetUint16(4, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNext sets the next field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewNext() (PublicKey, error) {
	s.Struct.SetUint16(4, 12)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Obj_List is a list of Obj.
type Obj_List struct{ capnp.List }

// NewObj creates a new list of Obj.
func NewObj_List(s *capnp.Segment, sz int32) (Obj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Obj_List{l}, err
}

func (s Obj_List) At(i int) Obj { return Obj{s.List.Struct(i)} }

func (s Obj_List) Set(i int, v Obj) error { return s.List.SetStruct(i, v.Struct) }

// Obj_Promise is a wrapper for a Obj promised by a client call.
type Obj_Promise struct{ *capnp.Pipeline }

func (p Obj_Promise) Struct() (Obj, error) {
	s, err := p.Pipeline.Struct()
	return Obj{s}, err
}

func (p Obj_Promise) Value() Obj_value_Promise { return Obj_value_Promise{p.Pipeline} }

// Obj_value_Promise is a wrapper for a Obj_value promised by a client call.
type Obj_value_Promise struct{ *capnp.Pipeline }

func (p Obj_value_Promise) Struct() (Obj_value, error) {
	s, err := p.Pipeline.Struct()
	return Obj_value{s}, err
}

func (p Obj_value_Promise) Deleg() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Cert() CertificateObject_Promise {
	return CertificateObject_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Service() ServiceInfo_Promise {
	return ServiceInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Infra() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Extra() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Next() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_fb2d77234707241e = "x\xda\xd4X\x7fl\x1bg\xf9\x7f\x9e{\xed\x9c\x9b\xd8" +
	"\xb5\x9d\xb3\xa5\xef\xbe\x12\x04u\x9dD#u?\x92n" +
	"\x12\xfb\xa7\x8b\xa1\xb0\xa6\xdb\x9a7nE\x1bQi\x17" +
	"\xfb\xads\xa9sv\xcf\xe7.\x9e:\xb5\x95R\x91\xa0" +
	"T\xb4,A\xa9H\xa5\"\x95\x09&\x10\x1bT@E" +
	"'*\x04\x02\xa6J\x85\xfd\xc1\xcf\xc1@+\xaa\x04E" +
	"\x94\xd1B\x97\xae\x1cz^\xdf\x9d\xcf\x8e\x13R\xc4\x1f" +
	"\xf0\x97}\xcf\xf3\xdc{\x9f\xcf\xf3<\xef\xe7}\xee\x1e" +
	"\xde\xdd\xf1\x84\xf2H\xf8Z\x07\x00\x1f\x0aw8O\xbe" +
	"3t\xf1Rf\xdb\x14\xf04\xa2\xf3\xfe\x8d\xea\xc7\xee" +
	"\x7fn\xf3\x1d\x08+*@\xff^6\x88\xda\x04S\x01" +
	"4\x83}\x15\xd0\x89\x9f?\xb3\xed\xebW\x97f)\x9a" +
	"\x05\xa2\x91B0\xb4\xa4\xc5Bt\xdf\xbaP\x0f\x02:" +
	"\xff\x7ftg\xfa\xbb\xef\xcc\xbfL\xd1J \x9a\x16\xec" +
	"\x7f <\x88\xda\x87\xc2\xf4\xf7\xd1\xb0\x0c\x7f\xe9rj" +
	"\xd3\xb3\xdfz\xfb\x1b\x90L\x07\x91\xc8\x15\xf7vdP" +
	"3:\xe81\xa2\xe3\x1a\xa0\xb39}e\xfa\x97\xcf\xa7" +
	"_k\x17\xac\xab\xdd\xa8\x1dT)xB\xa5\xe0?G" +
	"~\xfa\xe2\xc0\xf5\x9f]j\x09\xa6\xe5\xfak\x91n\xd4" +
	"f\"\xf4\xf7x\xe4\xe3\x84\xe3\xad*\x9f\xc8\xcc>v" +
	"\xb9-\xec\xbb\xeb\xbaQ\x8buJ\x96\x9d\x12\xf6\xc5\x0f" +
	"~r\x83\xb8\xa2_i\x9b\x93M]K\xda\xa3]\x14" +
	"\xfdH\x97\x8c\xfe\xf4\x85[;\x06\xee\x7f\xfbJ;\xdc" +
	"<\xda\x89\x9a\x1e\xa5\xfb\xf6E\x09\xf7_B{\xde\x88" +
	"~\xf3\xc6\xaf\xdaf$6\x8e\xdaDL\xd6&F\xc1" +
	"\x9d\xdf\xde\xb5\xef\xc5\xaf\xfd\xe6\xf7\xc0\xefCt^\xce" +
	"\xcfl\x9c|\xe3\xa1?\xc2nT1\x86\x8a&\xd6/" +
	"\x01\xf6\x1b\xeb\xdfR\x00\x9d\xcf\x19\xea\xb1\xd7\xd3\xaf\xfc" +
	"\xa1\xb5\xea\x84\xb9\xdfHv\xa2VK\xd2\xca\xd5$U" +
	"\xdd_\xabM\xb4\x96\xec~]{_7\xfd\xbb\xaf\xfb" +
	"9@g\xf0;\xbd\xdbw,^\xb8\xde\x82Y\x16z" +
	"ow\x1fj\x06\x05\xf7\x8bn\x99\x8e7\x7f=\xfe\x92" +
	"\xfa\xd9\x1b7[\x96\xde\x86j\x04\xa0\xff\xf3\xda\x06\xd4" +
	"^\xd5(\xfe+\xda\x0f(\xfe\x81\xca\xb4\xb5\x85\x7f\xe6" +
	"Nkm$\xf0\x99\xf4\xe3\xa8\x9dN\x13\x96\xf9\xf45" +
	"\xd8\xec\x94\xad\x92]z\xc8\xd2C\x86Yy\xbaRx" +
	"0\xa7\x97\xcd\xf2\xe3\xcf\x94lc\xbf\x91\xd3m\xa3d" +
	"fE\x8e~\x00\x86\x10y\x94\x85\x00B\x08\x90\xdc\xd6" +
	"\x07\xc0\x9f`\xc8\x9fR\x101\x85d\xdb\xde\x0b\xc0?" +
	"\xc2\x90\x0f)\x98T0\x85\x0a@\xf2i2>\xc9\x90" +
	"\xefR\xb0\xc7.\x1d\x10&\xc6@\xc1\x18`\xdc\xae\x95" +
	"\x05\x86@\xc1\x10`<\xaf\xdb:FA\xc1(\xa0\x0f" +
	"Ki\x825T\x1d\xddZ4r;D\x8d\xb0\xa4|" +
	",/\xd0#&\x19\xf2)\x05\x93\x1e\x98c\x83\x00\xfc" +
	"(C>\x1b\x0033\x02\xc0\xa7\x19\xf29\x05\x93L" +
	"I!\x03H\x9e\"\xe3I\x86|QA\x0c\xa50\x04" +
	"\x90<\xbd\x01\x80\xcf1\xe4g\x95f\x9c\xce\x01Q\xcb" +
	"\x96\xf5\x9c\x00\x00\xdfvH/\x1a\xf9\xaca\x02\xcb\x09" +
	"\x0c\x83\x82a\xcf\xb8\xdb\xb4\x81\x19E\xcf\xa8\x1e\x105" +
	"\x8f\xfe\x0a\xb9\x1f\xc8\xe7-Q\xa9\xf0\xaa\xb0jM\xb9" +
	"\x0f\xf0\x1d\x05\xe0\x87\x19\xf2\xe9\x00\xdf\xe3\x99\x06_T" +
	"\\\xbaT\xa4)\x86\xfc$\xd1\xc5:\xdd\x13\x99@\x0e" +
	"BJ\x9d\xef)2\xce2\xe4_T\xd0\xa9TG\xc7" +
	"E\xce\x1e\x005\x9f\xb7\xbc\x9a\x1c\xc9\x95L[L\xda" +
	"\xdeu\x0fe\xa5\xe2\xa5\xe0\x88\x98,\x1b\x96\xa8xD" +
	"\x8f\x94\xca\x84\xbc\x82\xeb\x01\x87\x18\xca\xb0\xf5\xff\x8a\xf3" +
	"H\xc9\x14\x1eeb\x9c\xf0\x19\xebT\xa2g\x19\xf2\xc3" +
	"\x01\xc6\xb5\xd1@\xd9\x15\x97\xf2\xb1L 7\x8c\xd5)" +
	"\xfb\xb9Y$vF\xc1\xd4\xed\xaa\x05L\xf8\xf0\x12\x0d" +
	"\x8d\x02\x94@\xd7\x94\x83\xfa\xb5i7\x96\xf1\xf5\xc8]" +
	"\xc6\xe3\xcb\x9a\xf8\x0e\xebt)*\x15\xbd\x80b-L" +
	"\xc7]\xa6s\x01\xa6\xa7\xfa\xdc\x92-\x04\x98\xceg\xdc" +
	"^\xfe\xf2\x9a\x99\xe6\xf4\xb2>j\x14\x0d\x88\xdbF#" +
	".Z/X\xf3\x8e]\xce\xd7W\xa7U\xf9f\xc7t" +
	"+_\xaf,\x9a\xc4\xf7\xff|\xbe\xa7\x89\xef\x02C~" +
	">\xc0\xf7U\xaa\xec+\x0c\xf9\xc5\x00\xdf\x0bD\xed<" +
	"C~)\xc0\xf7\xb5a\x00~\x91!\xff!5\xb3\xbb" +
	"y\xbfO\x91\x97\x18\xf2\xcb\x0a&\xc3\xe1\x14\x86\x01\x92" +
	"?\"\xe3\xf7\x18\xf2\xdf\xdek\x0f\x8c\x80Z2\xc5J" +
	"=\xe0X\xbaY\x10\x1f\xb5J\x80\x13~\x8c\xb4\xed*" +
	"\xad\xdc'\xfe\x19\xb0j\xde\x02\"P\xcf[\x8a\x85\x10" +
	"\x97i^\xc2\x93\xbc@\xef{\x12p\xbc7 \x83\x9e" +
	"\x04\xccd\x02\xba\xe0I\x80\xaf\x0b\xe7\x14\x8c\x9b\xfa\xc4" +
	"\x8a\x8c\x9b\xf4\xf0^7~\xb3\xa2g\x8d\xc2VY\x08" +
	"\xd1\xa2p\xc3\xed\x14n0\x80\xdaS\xf4\x13#\xc1]" +
	"\xe0*\xfa\xfcHC\xbd=E?\xd3\xeb6\xda9\x05" +
	"\x1d\xbdX(Y\x86=F5\xfb\x8f\x08{\xfd\xf8j" +
	"U\xf6\xe6j\x06\xe5\xed\xbfE\xdfV\xef\xed\xb5\xef\xf7" +
	"\xb6z>P\xa9\x08\xcb\x9d!\xe2\xf4\xfb?*\xea\xfe" +
	"t\xd7B\xba\xb9\x97w\x8e\x8eo}\xf0\x90^\xac\x0a" +
	"\xbe\x85\x85\xa2\x8e#\x09i\xfb\xb0\x17 \xbb\x07\x19f" +
	"mT0\x86\xffp$)\xed n\x00\xc8\x16\xc91" +
	"I\x0e\xe5\xae#\x89iU\xe9(\x93\xe309\xd8{" +
	"\x8ela\xad\x86}\x00Y\x9b\x1cG\xc9\x11\xba\xe3H" +
	"m\xd3^\x90\x8eIrL\x91#\xbc\xe4\xa4\xb0\x03@" +
	";\x86\x19\x80\xecarL\x93\xa3\xe3]'%g\xd2" +
	"\xe3\x12\xd5Qr\xcc\x92C\xbd\xed\xa40\x02\xa0\xcd\xc8" +
	";\xa6\xc8q\x92\x1c\x91\xbf;)\\\x07\xa0\x9d\x90w" +
	"L\x93c\x8e\x1c\xeb\xfe\xe6\xa4\xb0\x13@;%\x1d\xb3" +
	"\xe4X G\xe7-'\x85]4aJT'\xc9\xb1" +
	"H\x8e\xae\x9bN\x0a\xa3\x00\xdai\xe9\x98#\xc7Yr" +
	"D\xff\xea\xa40\x06\xa0\x9d\x91K-\x90\xe3\x1cz*" +
	"\xd4| \xa9F\xf91\xafR\xaaQ\xde\xe2\x8f#\x96" +
	"\xc8\x1b~M{\xf2\xa2(\x0a\x98h\xbc\x8e\x01b\x02" +
	"\xf0\x08\xadX\x11\x0d)\xcb\x09\xcb\xc6Dchv\xc3" +
	"*\xc2:d\xe4\x04&\x1a\xef\x01uO\xdc\x12\x05\xff" +
	")t\xd1\x98\x87\x0cs\xbf\xa5/\x7fd\x8f\x98\xb4\xdb" +
	"\xd9\xe3&\xf5\xdc2\xf3J'h\x1d\xd0vs\x7fi" +
	"\xd9$\xde\xbb\xd6I\x9c\xf4\xf3)\x86|O\x8b\xc0\xc7" +
	"\xcb%\xcbF\x15\x14T%\x00\x83\xb4\xb1F:\x18\x01" +
	"\x05#\xabu|\x1dL\xc4\x07\xb3\x89\x1e\xbc\x91!\x7f" +
	"\x98\xc0`\xe0\x9d+\xb9\xb9\x0f\x94\xa6\xa3\xa3Gn\x96" +
	"\x15\x08\x07\xb4\xa3'\xe7iG\xe0\x80\x18q\x15a!" +
	"\xa0\x1d\xf3\xa3\x0d\xd9\xf7\xb5\xe3\x0c\x19\x17\xeb\x93\xad\xaf" +
	"\x1d_ \xed8[\x1f\x93\xfc\xb1\xe1Kd<W\x1f" +
	"0\xeeMP\x9e\x015\x90\xce\x7fW[W\x92\x99\xe6" +
	"\xc4\xd4\xc7Fy\x90\xa8nZ> \xe5F\xe6\xe5'" +
	"4)\xfe\x98!\x7f\xd3\x93\x1a\xb2\xfe\x82r\xf0s\x86" +
	"\xfc\xaa\xa73\x94\x99\xdf}\x0a\x80_e\xc8ox\"" +
	"C\xa9\xf9\x13\x1d\xbd\xd7\x19\xf2\xdb\x9e\xc2Pnn\xd1" +
	"\xb0y\x83!\x7f\xcf\x93\x17\x9a\xa9\xde\xa5j\xdfd8" +
	"\xeckK\x07@\xf2.\xc5\xdef\x98\x0d\xf9\xca\"?" +
	"~\xe08\xc00\xed\xed(\xd2\x11\xec\xbe\xe7@\x9c\x86" +
	"\x1cL4\xbe\x85\xb8\x1b\xc1\x0dp\xb3\x98h|\xfch" +
	"\xf6\x0f\xa0\xd7)\x00-\x03\xb8\x8cr\xbd\x80f\xcb\xd8" +
	"E{\xb3B\x83)&\x1a\x9f?\xdc\xbd\xf9|\xfd\x91" +
	"\xfe\xa7\x087\xfc\xa0\x0b\xd5\xff\xfe\xe1>\xc4t\xdf\x97" +
	"A\x9er\x98h|3ZuS\x7f\x98\x90\xc9\xf7l" +
	"\xb1u\xa7l\x99\x96\x03\x92\xd2\xfb\x09\x86|,\xd0\xe4" +
	"\xa2\xcf=5\x8b\x81&7hk\x8f1\xe4\xb6\x82\xe8" +
	"\xf6\xf8A\xba\xbb\xc8\x90O\xb6\xbc\xc2\xf6T\xa9\x81\xfc" +
	"\x19gL\xaf\x8c\x0d\x14\x0b\xa5\xc0\xdc\xd34\xcd\xfc3" +
	"\x00\x00\xff\xff&\x90lE"

func init() {
	schemas.Register(schema_fb2d77234707241e,
		0x844542c0bc50f248,
		0x8cfae4b3459db40f,
		0xaa95f2c2154f801a,
		0xb6e3b8602914cca6,
		0xbd157ada88cf152d,
		0xc0d7ec4193d608ef,
		0xcc368c426d5175df,
		0xcf61cf65228728bc,
		0xcfe323414bf5b98f,
		0xdbf0b70cd25804f1,
		0xe5deb2935d54bb0a,
		0xeab015ca8107699b,
		0xeb2fd278248964aa,
		0xecb99c4b492abf4a,
		0xf4f09607a66adddc,
		0xfb92513472887325)
}
