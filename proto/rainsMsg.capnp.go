// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RainsMessage struct{ capnp.Struct }

// RainsMessage_TypeID is the unique identifier for the type RainsMessage.
const RainsMessage_TypeID = 0xbd157ada88cf152d

func NewRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func NewRootRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func ReadRootRainsMessage(msg *capnp.Message) (RainsMessage, error) {
	root, err := msg.RootPtr()
	return RainsMessage{root.Struct()}, err
}

func (s RainsMessage) String() string {
	str, _ := text.Marshal(0xbd157ada88cf152d, s.Struct)
	return str
}

func (s RainsMessage) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s RainsMessage) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s RainsMessage) Content() (MessageSection_List, error) {
	p, err := s.Struct.Ptr(1)
	return MessageSection_List{List: p.List()}, err
}

func (s RainsMessage) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetContent(v MessageSection_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated MessageSection_List, preferring placement in s's segment.
func (s RainsMessage) NewContent(n int32) (MessageSection_List, error) {
	l, err := NewMessageSection_List(s.Struct.Segment(), n)
	if err != nil {
		return MessageSection_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s RainsMessage) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s RainsMessage) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Capabilities() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s RainsMessage) HasCapabilities() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetCapabilities(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewCapabilities sets the capabilities field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RainsMessage) NewCapabilities(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// RainsMessage_List is a list of RainsMessage.
type RainsMessage_List struct{ capnp.List }

// NewRainsMessage creates a new list of RainsMessage.
func NewRainsMessage_List(s *capnp.Segment, sz int32) (RainsMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return RainsMessage_List{l}, err
}

func (s RainsMessage_List) At(i int) RainsMessage { return RainsMessage{s.List.Struct(i)} }

func (s RainsMessage_List) Set(i int, v RainsMessage) error { return s.List.SetStruct(i, v.Struct) }

// RainsMessage_Promise is a wrapper for a RainsMessage promised by a client call.
type RainsMessage_Promise struct{ *capnp.Pipeline }

func (p RainsMessage_Promise) Struct() (RainsMessage, error) {
	s, err := p.Pipeline.Struct()
	return RainsMessage{s}, err
}

type MessageSection struct{ capnp.Struct }
type MessageSection_Which uint16

const (
	MessageSection_Which_assertion        MessageSection_Which = 0
	MessageSection_Which_shard            MessageSection_Which = 1
	MessageSection_Which_zone             MessageSection_Which = 2
	MessageSection_Which_query            MessageSection_Which = 3
	MessageSection_Which_notification     MessageSection_Which = 4
	MessageSection_Which_addressQuery     MessageSection_Which = 5
	MessageSection_Which_addressAssertion MessageSection_Which = 6
	MessageSection_Which_addressZone      MessageSection_Which = 7
)

func (w MessageSection_Which) String() string {
	const s = "assertionshardzonequerynotificationaddressQueryaddressAssertionaddressZone"
	switch w {
	case MessageSection_Which_assertion:
		return s[0:9]
	case MessageSection_Which_shard:
		return s[9:14]
	case MessageSection_Which_zone:
		return s[14:18]
	case MessageSection_Which_query:
		return s[18:23]
	case MessageSection_Which_notification:
		return s[23:35]
	case MessageSection_Which_addressQuery:
		return s[35:47]
	case MessageSection_Which_addressAssertion:
		return s[47:63]
	case MessageSection_Which_addressZone:
		return s[63:74]

	}
	return "MessageSection_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageSection_TypeID is the unique identifier for the type MessageSection.
const MessageSection_TypeID = 0xf4f09607a66adddc

func NewMessageSection(s *capnp.Segment) (MessageSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageSection{st}, err
}

func NewRootMessageSection(s *capnp.Segment) (MessageSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageSection{st}, err
}

func ReadRootMessageSection(msg *capnp.Message) (MessageSection, error) {
	root, err := msg.RootPtr()
	return MessageSection{root.Struct()}, err
}

func (s MessageSection) String() string {
	str, _ := text.Marshal(0xf4f09607a66adddc, s.Struct)
	return str
}

func (s MessageSection) Which() MessageSection_Which {
	return MessageSection_Which(s.Struct.Uint16(0))
}
func (s MessageSection) Assertion() (AssertionSection, error) {
	p, err := s.Struct.Ptr(0)
	return AssertionSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAssertion() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAssertion(v AssertionSection) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAssertion sets the assertion field to a newly
// allocated AssertionSection struct, preferring placement in s's segment.
func (s MessageSection) NewAssertion() (AssertionSection, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAssertionSection(s.Struct.Segment())
	if err != nil {
		return AssertionSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Shard() (ShardSection, error) {
	p, err := s.Struct.Ptr(0)
	return ShardSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasShard() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetShard(v ShardSection) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewShard sets the shard field to a newly
// allocated ShardSection struct, preferring placement in s's segment.
func (s MessageSection) NewShard() (ShardSection, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewShardSection(s.Struct.Segment())
	if err != nil {
		return ShardSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Zone() (ZoneSection, error) {
	p, err := s.Struct.Ptr(0)
	return ZoneSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasZone() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetZone(v ZoneSection) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZone sets the zone field to a newly
// allocated ZoneSection struct, preferring placement in s's segment.
func (s MessageSection) NewZone() (ZoneSection, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewZoneSection(s.Struct.Segment())
	if err != nil {
		return ZoneSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Query() (QuerySection, error) {
	p, err := s.Struct.Ptr(0)
	return QuerySection{Struct: p.Struct()}, err
}

func (s MessageSection) HasQuery() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetQuery(v QuerySection) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated QuerySection struct, preferring placement in s's segment.
func (s MessageSection) NewQuery() (QuerySection, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewQuerySection(s.Struct.Segment())
	if err != nil {
		return QuerySection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Notification() (NotificationSection, error) {
	p, err := s.Struct.Ptr(0)
	return NotificationSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasNotification() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetNotification(v NotificationSection) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNotification sets the notification field to a newly
// allocated NotificationSection struct, preferring placement in s's segment.
func (s MessageSection) NewNotification() (NotificationSection, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewNotificationSection(s.Struct.Segment())
	if err != nil {
		return NotificationSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressQuery() (AddressQuerySection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressQuerySection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressQuery() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressQuery(v AddressQuerySection) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressQuery sets the addressQuery field to a newly
// allocated AddressQuerySection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressQuery() (AddressQuerySection, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewAddressQuerySection(s.Struct.Segment())
	if err != nil {
		return AddressQuerySection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressAssertion() (AddressAssertionSection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressAssertionSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressAssertion() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressAssertion(v AddressAssertionSection) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressAssertion sets the addressAssertion field to a newly
// allocated AddressAssertionSection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressAssertion() (AddressAssertionSection, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewAddressAssertionSection(s.Struct.Segment())
	if err != nil {
		return AddressAssertionSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressZone() (AddressZoneSection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressZoneSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressZone() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressZone(v AddressZoneSection) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressZone sets the addressZone field to a newly
// allocated AddressZoneSection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressZone() (AddressZoneSection, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewAddressZoneSection(s.Struct.Segment())
	if err != nil {
		return AddressZoneSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MessageSection_List is a list of MessageSection.
type MessageSection_List struct{ capnp.List }

// NewMessageSection creates a new list of MessageSection.
func NewMessageSection_List(s *capnp.Segment, sz int32) (MessageSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MessageSection_List{l}, err
}

func (s MessageSection_List) At(i int) MessageSection { return MessageSection{s.List.Struct(i)} }

func (s MessageSection_List) Set(i int, v MessageSection) error { return s.List.SetStruct(i, v.Struct) }

// MessageSection_Promise is a wrapper for a MessageSection promised by a client call.
type MessageSection_Promise struct{ *capnp.Pipeline }

func (p MessageSection_Promise) Struct() (MessageSection, error) {
	s, err := p.Pipeline.Struct()
	return MessageSection{s}, err
}

func (p MessageSection_Promise) Assertion() AssertionSection_Promise {
	return AssertionSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Shard() ShardSection_Promise {
	return ShardSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Zone() ZoneSection_Promise {
	return ZoneSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Query() QuerySection_Promise {
	return QuerySection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Notification() NotificationSection_Promise {
	return NotificationSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressQuery() AddressQuerySection_Promise {
	return AddressQuerySection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressAssertion() AddressAssertionSection_Promise {
	return AddressAssertionSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressZone() AddressZoneSection_Promise {
	return AddressZoneSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AssertionSection struct{ capnp.Struct }

// AssertionSection_TypeID is the unique identifier for the type AssertionSection.
const AssertionSection_TypeID = 0xecb99c4b492abf4a

func NewAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func NewRootAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func ReadRootAssertionSection(msg *capnp.Message) (AssertionSection, error) {
	root, err := msg.RootPtr()
	return AssertionSection{root.Struct()}, err
}

func (s AssertionSection) String() string {
	str, _ := text.Marshal(0xecb99c4b492abf4a, s.Struct)
	return str
}

func (s AssertionSection) SubjectName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s AssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(1)
	return Obj_List{List: p.List()}, err
}

func (s AssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s AssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(3, v)
}

func (s AssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s AssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s AssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s AssertionSection) SetContext(v string) error {
	return s.Struct.SetText(4, v)
}

// AssertionSection_List is a list of AssertionSection.
type AssertionSection_List struct{ capnp.List }

// NewAssertionSection creates a new list of AssertionSection.
func NewAssertionSection_List(s *capnp.Segment, sz int32) (AssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return AssertionSection_List{l}, err
}

func (s AssertionSection_List) At(i int) AssertionSection { return AssertionSection{s.List.Struct(i)} }

func (s AssertionSection_List) Set(i int, v AssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AssertionSection_Promise is a wrapper for a AssertionSection promised by a client call.
type AssertionSection_Promise struct{ *capnp.Pipeline }

func (p AssertionSection_Promise) Struct() (AssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AssertionSection{s}, err
}

type ShardSection struct{ capnp.Struct }

// ShardSection_TypeID is the unique identifier for the type ShardSection.
const ShardSection_TypeID = 0xc0d7ec4193d608ef

func NewShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func NewRootShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func ReadRootShardSection(msg *capnp.Message) (ShardSection, error) {
	root, err := msg.RootPtr()
	return ShardSection{root.Struct()}, err
}

func (s ShardSection) String() string {
	str, _ := text.Marshal(0xc0d7ec4193d608ef, s.Struct)
	return str
}

func (s ShardSection) Content() (AssertionSection_List, error) {
	p, err := s.Struct.Ptr(0)
	return AssertionSection_List{List: p.List()}, err
}

func (s ShardSection) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetContent(v AssertionSection_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AssertionSection_List, preferring placement in s's segment.
func (s ShardSection) NewContent(n int32) (AssertionSection_List, error) {
	l, err := NewAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ShardSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(1)
	return Signature_List{List: p.List()}, err
}

func (s ShardSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ShardSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s ShardSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ShardSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ShardSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ShardSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ShardSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s ShardSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ShardSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s ShardSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

func (s ShardSection) RangeFrom() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s ShardSection) HasRangeFrom() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeFromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeFrom(v string) error {
	return s.Struct.SetText(4, v)
}

func (s ShardSection) RangeTo() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s ShardSection) HasRangeTo() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeTo(v string) error {
	return s.Struct.SetText(5, v)
}

// ShardSection_List is a list of ShardSection.
type ShardSection_List struct{ capnp.List }

// NewShardSection creates a new list of ShardSection.
func NewShardSection_List(s *capnp.Segment, sz int32) (ShardSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return ShardSection_List{l}, err
}

func (s ShardSection_List) At(i int) ShardSection { return ShardSection{s.List.Struct(i)} }

func (s ShardSection_List) Set(i int, v ShardSection) error { return s.List.SetStruct(i, v.Struct) }

// ShardSection_Promise is a wrapper for a ShardSection promised by a client call.
type ShardSection_Promise struct{ *capnp.Pipeline }

func (p ShardSection_Promise) Struct() (ShardSection, error) {
	s, err := p.Pipeline.Struct()
	return ShardSection{s}, err
}

type ZoneSection struct{ capnp.Struct }

// ZoneSection_TypeID is the unique identifier for the type ZoneSection.
const ZoneSection_TypeID = 0xcfe323414bf5b98f

func NewZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func NewRootZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func ReadRootZoneSection(msg *capnp.Message) (ZoneSection, error) {
	root, err := msg.RootPtr()
	return ZoneSection{root.Struct()}, err
}

func (s ZoneSection) String() string {
	str, _ := text.Marshal(0xcfe323414bf5b98f, s.Struct)
	return str
}

func (s ZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s ZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ZoneSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ZoneSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ZoneSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ZoneSection) Content() (MessageSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return MessageSection_List{List: p.List()}, err
}

func (s ZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetContent(v MessageSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated MessageSection_List, preferring placement in s's segment.
func (s ZoneSection) NewContent(n int32) (MessageSection_List, error) {
	l, err := NewMessageSection_List(s.Struct.Segment(), n)
	if err != nil {
		return MessageSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// ZoneSection_List is a list of ZoneSection.
type ZoneSection_List struct{ capnp.List }

// NewZoneSection creates a new list of ZoneSection.
func NewZoneSection_List(s *capnp.Segment, sz int32) (ZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return ZoneSection_List{l}, err
}

func (s ZoneSection_List) At(i int) ZoneSection { return ZoneSection{s.List.Struct(i)} }

func (s ZoneSection_List) Set(i int, v ZoneSection) error { return s.List.SetStruct(i, v.Struct) }

// ZoneSection_Promise is a wrapper for a ZoneSection promised by a client call.
type ZoneSection_Promise struct{ *capnp.Pipeline }

func (p ZoneSection_Promise) Struct() (ZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return ZoneSection{s}, err
}

type QuerySection struct{ capnp.Struct }

// QuerySection_TypeID is the unique identifier for the type QuerySection.
const QuerySection_TypeID = 0xcc368c426d5175df

func NewQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return QuerySection{st}, err
}

func NewRootQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return QuerySection{st}, err
}

func ReadRootQuerySection(msg *capnp.Message) (QuerySection, error) {
	root, err := msg.RootPtr()
	return QuerySection{root.Struct()}, err
}

func (s QuerySection) String() string {
	str, _ := text.Marshal(0xcc368c426d5175df, s.Struct)
	return str
}

func (s QuerySection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s QuerySection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s QuerySection) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s QuerySection) HasName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s QuerySection) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s QuerySection) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s QuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s QuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s QuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s QuerySection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s QuerySection) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s QuerySection) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s QuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s QuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s QuerySection) Options() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Int32List{List: p.List()}, err
}

func (s QuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetOptions(v capnp.Int32List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s QuerySection) NewOptions(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// QuerySection_List is a list of QuerySection.
type QuerySection_List struct{ capnp.List }

// NewQuerySection creates a new list of QuerySection.
func NewQuerySection_List(s *capnp.Segment, sz int32) (QuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return QuerySection_List{l}, err
}

func (s QuerySection_List) At(i int) QuerySection { return QuerySection{s.List.Struct(i)} }

func (s QuerySection_List) Set(i int, v QuerySection) error { return s.List.SetStruct(i, v.Struct) }

// QuerySection_Promise is a wrapper for a QuerySection promised by a client call.
type QuerySection_Promise struct{ *capnp.Pipeline }

func (p QuerySection_Promise) Struct() (QuerySection, error) {
	s, err := p.Pipeline.Struct()
	return QuerySection{s}, err
}

type SubjectAddr struct{ capnp.Struct }

// SubjectAddr_TypeID is the unique identifier for the type SubjectAddr.
const SubjectAddr_TypeID = 0xe48faf3beca83da0

func NewSubjectAddr(s *capnp.Segment) (SubjectAddr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SubjectAddr{st}, err
}

func NewRootSubjectAddr(s *capnp.Segment) (SubjectAddr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SubjectAddr{st}, err
}

func ReadRootSubjectAddr(msg *capnp.Message) (SubjectAddr, error) {
	root, err := msg.RootPtr()
	return SubjectAddr{root.Struct()}, err
}

func (s SubjectAddr) String() string {
	str, _ := text.Marshal(0xe48faf3beca83da0, s.Struct)
	return str
}

func (s SubjectAddr) AddressFamily() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SubjectAddr) HasAddressFamily() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SubjectAddr) AddressFamilyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SubjectAddr) SetAddressFamily(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SubjectAddr) PrefixLength() uint32 {
	return s.Struct.Uint32(0)
}

func (s SubjectAddr) SetPrefixLength(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SubjectAddr) Address() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SubjectAddr) HasAddress() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SubjectAddr) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SubjectAddr) SetAddress(v string) error {
	return s.Struct.SetText(1, v)
}

// SubjectAddr_List is a list of SubjectAddr.
type SubjectAddr_List struct{ capnp.List }

// NewSubjectAddr creates a new list of SubjectAddr.
func NewSubjectAddr_List(s *capnp.Segment, sz int32) (SubjectAddr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SubjectAddr_List{l}, err
}

func (s SubjectAddr_List) At(i int) SubjectAddr { return SubjectAddr{s.List.Struct(i)} }

func (s SubjectAddr_List) Set(i int, v SubjectAddr) error { return s.List.SetStruct(i, v.Struct) }

// SubjectAddr_Promise is a wrapper for a SubjectAddr promised by a client call.
type SubjectAddr_Promise struct{ *capnp.Pipeline }

func (p SubjectAddr_Promise) Struct() (SubjectAddr, error) {
	s, err := p.Pipeline.Struct()
	return SubjectAddr{s}, err
}

type AddressAssertionSection struct{ capnp.Struct }

// AddressAssertionSection_TypeID is the unique identifier for the type AddressAssertionSection.
const AddressAssertionSection_TypeID = 0xdbf0b70cd25804f1

func NewAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func NewRootAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func ReadRootAddressAssertionSection(msg *capnp.Message) (AddressAssertionSection, error) {
	root, err := msg.RootPtr()
	return AddressAssertionSection{root.Struct()}, err
}

func (s AddressAssertionSection) String() string {
	str, _ := text.Marshal(0xdbf0b70cd25804f1, s.Struct)
	return str
}

func (s AddressAssertionSection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressAssertionSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressAssertionSection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressAssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(1)
	return Obj_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AddressAssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AddressAssertionSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

// AddressAssertionSection_List is a list of AddressAssertionSection.
type AddressAssertionSection_List struct{ capnp.List }

// NewAddressAssertionSection creates a new list of AddressAssertionSection.
func NewAddressAssertionSection_List(s *capnp.Segment, sz int32) (AddressAssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressAssertionSection_List{l}, err
}

func (s AddressAssertionSection_List) At(i int) AddressAssertionSection {
	return AddressAssertionSection{s.List.Struct(i)}
}

func (s AddressAssertionSection_List) Set(i int, v AddressAssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressAssertionSection_Promise is a wrapper for a AddressAssertionSection promised by a client call.
type AddressAssertionSection_Promise struct{ *capnp.Pipeline }

func (p AddressAssertionSection_Promise) Struct() (AddressAssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressAssertionSection{s}, err
}

func (p AddressAssertionSection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddressZoneSection struct{ capnp.Struct }

// AddressZoneSection_TypeID is the unique identifier for the type AddressZoneSection.
const AddressZoneSection_TypeID = 0xb6e3b8602914cca6

func NewAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func NewRootAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func ReadRootAddressZoneSection(msg *capnp.Message) (AddressZoneSection, error) {
	root, err := msg.RootPtr()
	return AddressZoneSection{root.Struct()}, err
}

func (s AddressZoneSection) String() string {
	str, _ := text.Marshal(0xb6e3b8602914cca6, s.Struct)
	return str
}

func (s AddressZoneSection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressZoneSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressZoneSection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(1)
	return Signature_List{List: p.List()}, err
}

func (s AddressZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AddressZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressZoneSection) Content() (AddressAssertionSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return AddressAssertionSection_List{List: p.List()}, err
}

func (s AddressZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetContent(v AddressAssertionSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AddressAssertionSection_List, preferring placement in s's segment.
func (s AddressZoneSection) NewContent(n int32) (AddressAssertionSection_List, error) {
	l, err := NewAddressAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AddressAssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// AddressZoneSection_List is a list of AddressZoneSection.
type AddressZoneSection_List struct{ capnp.List }

// NewAddressZoneSection creates a new list of AddressZoneSection.
func NewAddressZoneSection_List(s *capnp.Segment, sz int32) (AddressZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressZoneSection_List{l}, err
}

func (s AddressZoneSection_List) At(i int) AddressZoneSection {
	return AddressZoneSection{s.List.Struct(i)}
}

func (s AddressZoneSection_List) Set(i int, v AddressZoneSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressZoneSection_Promise is a wrapper for a AddressZoneSection promised by a client call.
type AddressZoneSection_Promise struct{ *capnp.Pipeline }

func (p AddressZoneSection_Promise) Struct() (AddressZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressZoneSection{s}, err
}

func (p AddressZoneSection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddressQuerySection struct{ capnp.Struct }

// AddressQuerySection_TypeID is the unique identifier for the type AddressQuerySection.
const AddressQuerySection_TypeID = 0xaa95f2c2154f801a

func NewAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return AddressQuerySection{st}, err
}

func NewRootAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return AddressQuerySection{st}, err
}

func ReadRootAddressQuerySection(msg *capnp.Message) (AddressQuerySection, error) {
	root, err := msg.RootPtr()
	return AddressQuerySection{root.Struct()}, err
}

func (s AddressQuerySection) String() string {
	str, _ := text.Marshal(0xaa95f2c2154f801a, s.Struct)
	return str
}

func (s AddressQuerySection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressQuerySection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressQuerySection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressQuerySection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s AddressQuerySection) HasToken() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetToken(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s AddressQuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressQuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressQuerySection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressQuerySection) Types() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Int32List{List: p.List()}, err
}

func (s AddressQuerySection) HasTypes() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetTypes(v capnp.Int32List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s AddressQuerySection) NewTypes(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s AddressQuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s AddressQuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s AddressQuerySection) Options() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(4)
	return capnp.Int32List{List: p.List()}, err
}

func (s AddressQuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetOptions(v capnp.Int32List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s AddressQuerySection) NewOptions(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// AddressQuerySection_List is a list of AddressQuerySection.
type AddressQuerySection_List struct{ capnp.List }

// NewAddressQuerySection creates a new list of AddressQuerySection.
func NewAddressQuerySection_List(s *capnp.Segment, sz int32) (AddressQuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return AddressQuerySection_List{l}, err
}

func (s AddressQuerySection_List) At(i int) AddressQuerySection {
	return AddressQuerySection{s.List.Struct(i)}
}

func (s AddressQuerySection_List) Set(i int, v AddressQuerySection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressQuerySection_Promise is a wrapper for a AddressQuerySection promised by a client call.
type AddressQuerySection_Promise struct{ *capnp.Pipeline }

func (p AddressQuerySection_Promise) Struct() (AddressQuerySection, error) {
	s, err := p.Pipeline.Struct()
	return AddressQuerySection{s}, err
}

func (p AddressQuerySection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type NotificationSection struct{ capnp.Struct }

// NotificationSection_TypeID is the unique identifier for the type NotificationSection.
const NotificationSection_TypeID = 0x844542c0bc50f248

func NewNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func NewRootNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func ReadRootNotificationSection(msg *capnp.Message) (NotificationSection, error) {
	root, err := msg.RootPtr()
	return NotificationSection{root.Struct()}, err
}

func (s NotificationSection) String() string {
	str, _ := text.Marshal(0x844542c0bc50f248, s.Struct)
	return str
}

func (s NotificationSection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s NotificationSection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NotificationSection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s NotificationSection) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s NotificationSection) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s NotificationSection) Data() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s NotificationSection) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NotificationSection) DataBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s NotificationSection) SetData(v string) error {
	return s.Struct.SetText(1, v)
}

// NotificationSection_List is a list of NotificationSection.
type NotificationSection_List struct{ capnp.List }

// NewNotificationSection creates a new list of NotificationSection.
func NewNotificationSection_List(s *capnp.Segment, sz int32) (NotificationSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return NotificationSection_List{l}, err
}

func (s NotificationSection_List) At(i int) NotificationSection {
	return NotificationSection{s.List.Struct(i)}
}

func (s NotificationSection_List) Set(i int, v NotificationSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// NotificationSection_Promise is a wrapper for a NotificationSection promised by a client call.
type NotificationSection_Promise struct{ *capnp.Pipeline }

func (p NotificationSection_Promise) Struct() (NotificationSection, error) {
	s, err := p.Pipeline.Struct()
	return NotificationSection{s}, err
}

type Signature struct{ capnp.Struct }

// Signature_TypeID is the unique identifier for the type Signature.
const Signature_TypeID = 0xcf61cf65228728bc

func NewSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func NewRootSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func ReadRootSignature(msg *capnp.Message) (Signature, error) {
	root, err := msg.RootPtr()
	return Signature{root.Struct()}, err
}

func (s Signature) String() string {
	str, _ := text.Marshal(0xcf61cf65228728bc, s.Struct)
	return str
}

func (s Signature) KeySpace() KeySpaceID {
	return KeySpaceID(s.Struct.Uint16(0))
}

func (s Signature) SetKeySpace(v KeySpaceID) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Signature) Algorithm() SignatureAlgorithmType {
	return SignatureAlgorithmType(s.Struct.Uint16(2))
}

func (s Signature) SetAlgorithm(v SignatureAlgorithmType) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s Signature) ValidSince() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Signature) SetValidSince(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Signature) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s Signature) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s Signature) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Signature) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Signature) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Signature_List is a list of Signature.
type Signature_List struct{ capnp.List }

// NewSignature creates a new list of Signature.
func NewSignature_List(s *capnp.Segment, sz int32) (Signature_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Signature_List{l}, err
}

func (s Signature_List) At(i int) Signature { return Signature{s.List.Struct(i)} }

func (s Signature_List) Set(i int, v Signature) error { return s.List.SetStruct(i, v.Struct) }

// Signature_Promise is a wrapper for a Signature promised by a client call.
type Signature_Promise struct{ *capnp.Pipeline }

func (p Signature_Promise) Struct() (Signature, error) {
	s, err := p.Pipeline.Struct()
	return Signature{s}, err
}

type KeySpaceID uint16

// KeySpaceID_TypeID is the unique identifier for the type KeySpaceID.
const KeySpaceID_TypeID = 0x8c6fb57d7725ec03

// Values of KeySpaceID.
const (
	KeySpaceID_rainsKeySpace KeySpaceID = 0
)

// String returns the enum's constant name.
func (c KeySpaceID) String() string {
	switch c {
	case KeySpaceID_rainsKeySpace:
		return "rainsKeySpace"

	default:
		return ""
	}
}

// KeySpaceIDFromString returns the enum value with a name,
// or the zero value if there's no such value.
func KeySpaceIDFromString(c string) KeySpaceID {
	switch c {
	case "rainsKeySpace":
		return KeySpaceID_rainsKeySpace

	default:
		return 0
	}
}

type KeySpaceID_List struct{ capnp.List }

func NewKeySpaceID_List(s *capnp.Segment, sz int32) (KeySpaceID_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return KeySpaceID_List{l.List}, err
}

func (l KeySpaceID_List) At(i int) KeySpaceID {
	ul := capnp.UInt16List{List: l.List}
	return KeySpaceID(ul.At(i))
}

func (l KeySpaceID_List) Set(i int, v KeySpaceID) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type SignatureAlgorithmType uint16

// SignatureAlgorithmType_TypeID is the unique identifier for the type SignatureAlgorithmType.
const SignatureAlgorithmType_TypeID = 0x824d474588994863

// Values of SignatureAlgorithmType.
const (
	SignatureAlgorithmType_ed25519  SignatureAlgorithmType = 0
	SignatureAlgorithmType_ed448    SignatureAlgorithmType = 1
	SignatureAlgorithmType_ecdsa256 SignatureAlgorithmType = 2
	SignatureAlgorithmType_ecdsa384 SignatureAlgorithmType = 3
)

// String returns the enum's constant name.
func (c SignatureAlgorithmType) String() string {
	switch c {
	case SignatureAlgorithmType_ed25519:
		return "ed25519"
	case SignatureAlgorithmType_ed448:
		return "ed448"
	case SignatureAlgorithmType_ecdsa256:
		return "ecdsa256"
	case SignatureAlgorithmType_ecdsa384:
		return "ecdsa384"

	default:
		return ""
	}
}

// SignatureAlgorithmTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SignatureAlgorithmTypeFromString(c string) SignatureAlgorithmType {
	switch c {
	case "ed25519":
		return SignatureAlgorithmType_ed25519
	case "ed448":
		return SignatureAlgorithmType_ed448
	case "ecdsa256":
		return SignatureAlgorithmType_ecdsa256
	case "ecdsa384":
		return SignatureAlgorithmType_ecdsa384

	default:
		return 0
	}
}

type SignatureAlgorithmType_List struct{ capnp.List }

func NewSignatureAlgorithmType_List(s *capnp.Segment, sz int32) (SignatureAlgorithmType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SignatureAlgorithmType_List{l.List}, err
}

func (l SignatureAlgorithmType_List) At(i int) SignatureAlgorithmType {
	ul := capnp.UInt16List{List: l.List}
	return SignatureAlgorithmType(ul.At(i))
}

func (l SignatureAlgorithmType_List) Set(i int, v SignatureAlgorithmType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type HashAlgorithmType uint16

// HashAlgorithmType_TypeID is the unique identifier for the type HashAlgorithmType.
const HashAlgorithmType_TypeID = 0xef2306d933494fde

// Values of HashAlgorithmType.
const (
	HashAlgorithmType_noHashAlgo HashAlgorithmType = 0
	HashAlgorithmType_sha256     HashAlgorithmType = 1
	HashAlgorithmType_sha384     HashAlgorithmType = 2
	HashAlgorithmType_sha512     HashAlgorithmType = 3
)

// String returns the enum's constant name.
func (c HashAlgorithmType) String() string {
	switch c {
	case HashAlgorithmType_noHashAlgo:
		return "noHashAlgo"
	case HashAlgorithmType_sha256:
		return "sha256"
	case HashAlgorithmType_sha384:
		return "sha384"
	case HashAlgorithmType_sha512:
		return "sha512"

	default:
		return ""
	}
}

// HashAlgorithmTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func HashAlgorithmTypeFromString(c string) HashAlgorithmType {
	switch c {
	case "noHashAlgo":
		return HashAlgorithmType_noHashAlgo
	case "sha256":
		return HashAlgorithmType_sha256
	case "sha384":
		return HashAlgorithmType_sha384
	case "sha512":
		return HashAlgorithmType_sha512

	default:
		return 0
	}
}

type HashAlgorithmType_List struct{ capnp.List }

func NewHashAlgorithmType_List(s *capnp.Segment, sz int32) (HashAlgorithmType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return HashAlgorithmType_List{l.List}, err
}

func (l HashAlgorithmType_List) At(i int) HashAlgorithmType {
	ul := capnp.UInt16List{List: l.List}
	return HashAlgorithmType(ul.At(i))
}

func (l HashAlgorithmType_List) Set(i int, v HashAlgorithmType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PublicKey struct{ capnp.Struct }

// PublicKey_TypeID is the unique identifier for the type PublicKey.
const PublicKey_TypeID = 0x8cfae4b3459db40f

func NewPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func NewRootPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func ReadRootPublicKey(msg *capnp.Message) (PublicKey, error) {
	root, err := msg.RootPtr()
	return PublicKey{root.Struct()}, err
}

func (s PublicKey) String() string {
	str, _ := text.Marshal(0x8cfae4b3459db40f, s.Struct)
	return str
}

func (s PublicKey) KeySpace() KeySpaceID {
	return KeySpaceID(s.Struct.Uint16(0))
}

func (s PublicKey) SetKeySpace(v KeySpaceID) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s PublicKey) Type() SignatureAlgorithmType {
	return SignatureAlgorithmType(s.Struct.Uint16(2))
}

func (s PublicKey) SetType(v SignatureAlgorithmType) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s PublicKey) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PublicKey) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PublicKey) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PublicKey) ValidSince() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s PublicKey) SetValidSince(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s PublicKey) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s PublicKey) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

// PublicKey_List is a list of PublicKey.
type PublicKey_List struct{ capnp.List }

// NewPublicKey creates a new list of PublicKey.
func NewPublicKey_List(s *capnp.Segment, sz int32) (PublicKey_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PublicKey_List{l}, err
}

func (s PublicKey_List) At(i int) PublicKey { return PublicKey{s.List.Struct(i)} }

func (s PublicKey_List) Set(i int, v PublicKey) error { return s.List.SetStruct(i, v.Struct) }

// PublicKey_Promise is a wrapper for a PublicKey promised by a client call.
type PublicKey_Promise struct{ *capnp.Pipeline }

func (p PublicKey_Promise) Struct() (PublicKey, error) {
	s, err := p.Pipeline.Struct()
	return PublicKey{s}, err
}

type CertificateObject struct{ capnp.Struct }

// CertificateObject_TypeID is the unique identifier for the type CertificateObject.
const CertificateObject_TypeID = 0xfb92513472887325

func NewCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertificateObject{st}, err
}

func NewRootCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertificateObject{st}, err
}

func ReadRootCertificateObject(msg *capnp.Message) (CertificateObject, error) {
	root, err := msg.RootPtr()
	return CertificateObject{root.Struct()}, err
}

func (s CertificateObject) String() string {
	str, _ := text.Marshal(0xfb92513472887325, s.Struct)
	return str
}

func (s CertificateObject) Type() ProtocolType {
	return ProtocolType(s.Struct.Uint16(0))
}

func (s CertificateObject) SetType(v ProtocolType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s CertificateObject) Usage() CertificateUsage {
	return CertificateUsage(s.Struct.Uint16(2))
}

func (s CertificateObject) SetUsage(v CertificateUsage) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s CertificateObject) HashAlgo() HashAlgorithmType {
	return HashAlgorithmType(s.Struct.Uint16(4))
}

func (s CertificateObject) SetHashAlgo(v HashAlgorithmType) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s CertificateObject) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertificateObject) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertificateObject) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertificateObject_List is a list of CertificateObject.
type CertificateObject_List struct{ capnp.List }

// NewCertificateObject creates a new list of CertificateObject.
func NewCertificateObject_List(s *capnp.Segment, sz int32) (CertificateObject_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return CertificateObject_List{l}, err
}

func (s CertificateObject_List) At(i int) CertificateObject {
	return CertificateObject{s.List.Struct(i)}
}

func (s CertificateObject_List) Set(i int, v CertificateObject) error {
	return s.List.SetStruct(i, v.Struct)
}

// CertificateObject_Promise is a wrapper for a CertificateObject promised by a client call.
type CertificateObject_Promise struct{ *capnp.Pipeline }

func (p CertificateObject_Promise) Struct() (CertificateObject, error) {
	s, err := p.Pipeline.Struct()
	return CertificateObject{s}, err
}

type ProtocolType uint16

// ProtocolType_TypeID is the unique identifier for the type ProtocolType.
const ProtocolType_TypeID = 0x869060a0330d319a

// Values of ProtocolType.
const (
	ProtocolType_pTUnspecified ProtocolType = 0
	ProtocolType_pTTLS         ProtocolType = 1
)

// String returns the enum's constant name.
func (c ProtocolType) String() string {
	switch c {
	case ProtocolType_pTUnspecified:
		return "pTUnspecified"
	case ProtocolType_pTTLS:
		return "pTTLS"

	default:
		return ""
	}
}

// ProtocolTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ProtocolTypeFromString(c string) ProtocolType {
	switch c {
	case "pTUnspecified":
		return ProtocolType_pTUnspecified
	case "pTTLS":
		return ProtocolType_pTTLS

	default:
		return 0
	}
}

type ProtocolType_List struct{ capnp.List }

func NewProtocolType_List(s *capnp.Segment, sz int32) (ProtocolType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ProtocolType_List{l.List}, err
}

func (l ProtocolType_List) At(i int) ProtocolType {
	ul := capnp.UInt16List{List: l.List}
	return ProtocolType(ul.At(i))
}

func (l ProtocolType_List) Set(i int, v ProtocolType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type CertificateUsage uint16

// CertificateUsage_TypeID is the unique identifier for the type CertificateUsage.
const CertificateUsage_TypeID = 0xaddb752fe579c78e

// Values of CertificateUsage.
const (
	CertificateUsage_cUTrustAnchor CertificateUsage = 0
	CertificateUsage_cUEndEntity   CertificateUsage = 1
)

// String returns the enum's constant name.
func (c CertificateUsage) String() string {
	switch c {
	case CertificateUsage_cUTrustAnchor:
		return "cUTrustAnchor"
	case CertificateUsage_cUEndEntity:
		return "cUEndEntity"

	default:
		return ""
	}
}

// CertificateUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CertificateUsageFromString(c string) CertificateUsage {
	switch c {
	case "cUTrustAnchor":
		return CertificateUsage_cUTrustAnchor
	case "cUEndEntity":
		return CertificateUsage_cUEndEntity

	default:
		return 0
	}
}

type CertificateUsage_List struct{ capnp.List }

func NewCertificateUsage_List(s *capnp.Segment, sz int32) (CertificateUsage_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return CertificateUsage_List{l.List}, err
}

func (l CertificateUsage_List) At(i int) CertificateUsage {
	ul := capnp.UInt16List{List: l.List}
	return CertificateUsage(ul.At(i))
}

func (l CertificateUsage_List) Set(i int, v CertificateUsage) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type ServiceInfo struct{ capnp.Struct }

// ServiceInfo_TypeID is the unique identifier for the type ServiceInfo.
const ServiceInfo_TypeID = 0xeab015ca8107699b

func NewServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func NewRootServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func ReadRootServiceInfo(msg *capnp.Message) (ServiceInfo, error) {
	root, err := msg.RootPtr()
	return ServiceInfo{root.Struct()}, err
}

func (s ServiceInfo) String() string {
	str, _ := text.Marshal(0xeab015ca8107699b, s.Struct)
	return str
}

func (s ServiceInfo) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceInfo) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfo) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ServiceInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s ServiceInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s ServiceInfo) Priority() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfo) SetPriority(v uint32) {
	s.Struct.SetUint32(4, v)
}

// ServiceInfo_List is a list of ServiceInfo.
type ServiceInfo_List struct{ capnp.List }

// NewServiceInfo creates a new list of ServiceInfo.
func NewServiceInfo_List(s *capnp.Segment, sz int32) (ServiceInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfo_List{l}, err
}

func (s ServiceInfo_List) At(i int) ServiceInfo { return ServiceInfo{s.List.Struct(i)} }

func (s ServiceInfo_List) Set(i int, v ServiceInfo) error { return s.List.SetStruct(i, v.Struct) }

// ServiceInfo_Promise is a wrapper for a ServiceInfo promised by a client call.
type ServiceInfo_Promise struct{ *capnp.Pipeline }

func (p ServiceInfo_Promise) Struct() (ServiceInfo, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfo{s}, err
}

type Obj struct{ capnp.Struct }
type Obj_value Obj
type Obj_value_Which uint16

const (
	Obj_value_Which_name    Obj_value_Which = 0
	Obj_value_Which_ip6     Obj_value_Which = 1
	Obj_value_Which_ip4     Obj_value_Which = 2
	Obj_value_Which_redir   Obj_value_Which = 3
	Obj_value_Which_deleg   Obj_value_Which = 4
	Obj_value_Which_nameset Obj_value_Which = 5
	Obj_value_Which_cert    Obj_value_Which = 6
	Obj_value_Which_service Obj_value_Which = 7
	Obj_value_Which_regr    Obj_value_Which = 8
	Obj_value_Which_regt    Obj_value_Which = 9
	Obj_value_Which_infra   Obj_value_Which = 10
	Obj_value_Which_extra   Obj_value_Which = 11
)

func (w Obj_value_Which) String() string {
	const s = "nameip6ip4redirdelegnamesetcertserviceregrregtinfraextra"
	switch w {
	case Obj_value_Which_name:
		return s[0:4]
	case Obj_value_Which_ip6:
		return s[4:7]
	case Obj_value_Which_ip4:
		return s[7:10]
	case Obj_value_Which_redir:
		return s[10:15]
	case Obj_value_Which_deleg:
		return s[15:20]
	case Obj_value_Which_nameset:
		return s[20:27]
	case Obj_value_Which_cert:
		return s[27:31]
	case Obj_value_Which_service:
		return s[31:38]
	case Obj_value_Which_regr:
		return s[38:42]
	case Obj_value_Which_regt:
		return s[42:46]
	case Obj_value_Which_infra:
		return s[46:51]
	case Obj_value_Which_extra:
		return s[51:56]

	}
	return "Obj_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Obj_TypeID is the unique identifier for the type Obj.
const Obj_TypeID = 0xeb2fd278248964aa

func NewObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func NewRootObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func ReadRootObj(msg *capnp.Message) (Obj, error) {
	root, err := msg.RootPtr()
	return Obj{root.Struct()}, err
}

func (s Obj) String() string {
	str, _ := text.Marshal(0xeb2fd278248964aa, s.Struct)
	return str
}

func (s Obj) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Obj) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Obj) Value() Obj_value { return Obj_value(s) }

func (s Obj_value) Which() Obj_value_Which {
	return Obj_value_Which(s.Struct.Uint16(4))
}
func (s Obj_value) Name() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Obj_value) HasName() bool {
	if s.Struct.Uint16(4) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetName(v capnp.TextList) error {
	s.Struct.SetUint16(4, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewName sets the name field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Obj_value) NewName(n int32) (capnp.TextList, error) {
	s.Struct.SetUint16(4, 0)
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Obj_value) Ip6() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasIp6() bool {
	if s.Struct.Uint16(4) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) Ip6Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetIp6(v string) error {
	s.Struct.SetUint16(4, 1)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Ip4() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasIp4() bool {
	if s.Struct.Uint16(4) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) Ip4Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetIp4(v string) error {
	s.Struct.SetUint16(4, 2)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Redir() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRedir() bool {
	if s.Struct.Uint16(4) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RedirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRedir(v string) error {
	s.Struct.SetUint16(4, 3)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Deleg() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasDeleg() bool {
	if s.Struct.Uint16(4) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetDeleg(v PublicKey) error {
	s.Struct.SetUint16(4, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDeleg sets the deleg field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewDeleg() (PublicKey, error) {
	s.Struct.SetUint16(4, 4)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Nameset() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasNameset() bool {
	if s.Struct.Uint16(4) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) NamesetBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetNameset(v string) error {
	s.Struct.SetUint16(4, 5)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Cert() (CertificateObject, error) {
	p, err := s.Struct.Ptr(0)
	return CertificateObject{Struct: p.Struct()}, err
}

func (s Obj_value) HasCert() bool {
	if s.Struct.Uint16(4) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetCert(v CertificateObject) error {
	s.Struct.SetUint16(4, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCert sets the cert field to a newly
// allocated CertificateObject struct, preferring placement in s's segment.
func (s Obj_value) NewCert() (CertificateObject, error) {
	s.Struct.SetUint16(4, 6)
	ss, err := NewCertificateObject(s.Struct.Segment())
	if err != nil {
		return CertificateObject{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Service() (ServiceInfo, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceInfo{Struct: p.Struct()}, err
}

func (s Obj_value) HasService() bool {
	if s.Struct.Uint16(4) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetService(v ServiceInfo) error {
	s.Struct.SetUint16(4, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewService sets the service field to a newly
// allocated ServiceInfo struct, preferring placement in s's segment.
func (s Obj_value) NewService() (ServiceInfo, error) {
	s.Struct.SetUint16(4, 7)
	ss, err := NewServiceInfo(s.Struct.Segment())
	if err != nil {
		return ServiceInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Regr() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRegr() bool {
	if s.Struct.Uint16(4) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RegrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRegr(v string) error {
	s.Struct.SetUint16(4, 8)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Regt() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRegt() bool {
	if s.Struct.Uint16(4) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RegtBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRegt(v string) error {
	s.Struct.SetUint16(4, 9)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Infra() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasInfra() bool {
	if s.Struct.Uint16(4) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetInfra(v PublicKey) error {
	s.Struct.SetUint16(4, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfra sets the infra field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewInfra() (PublicKey, error) {
	s.Struct.SetUint16(4, 10)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Extra() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasExtra() bool {
	if s.Struct.Uint16(4) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetExtra(v PublicKey) error {
	s.Struct.SetUint16(4, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExtra sets the extra field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewExtra() (PublicKey, error) {
	s.Struct.SetUint16(4, 11)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Obj_List is a list of Obj.
type Obj_List struct{ capnp.List }

// NewObj creates a new list of Obj.
func NewObj_List(s *capnp.Segment, sz int32) (Obj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Obj_List{l}, err
}

func (s Obj_List) At(i int) Obj { return Obj{s.List.Struct(i)} }

func (s Obj_List) Set(i int, v Obj) error { return s.List.SetStruct(i, v.Struct) }

// Obj_Promise is a wrapper for a Obj promised by a client call.
type Obj_Promise struct{ *capnp.Pipeline }

func (p Obj_Promise) Struct() (Obj, error) {
	s, err := p.Pipeline.Struct()
	return Obj{s}, err
}

func (p Obj_Promise) Value() Obj_value_Promise { return Obj_value_Promise{p.Pipeline} }

// Obj_value_Promise is a wrapper for a Obj_value promised by a client call.
type Obj_value_Promise struct{ *capnp.Pipeline }

func (p Obj_value_Promise) Struct() (Obj_value, error) {
	s, err := p.Pipeline.Struct()
	return Obj_value{s}, err
}

func (p Obj_value_Promise) Deleg() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Cert() CertificateObject_Promise {
	return CertificateObject_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Service() ServiceInfo_Promise {
	return ServiceInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Infra() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Extra() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_fb2d77234707241e = "x\xda\xacX\x7fl\x13\xe7\xf9\x7f\x9e{\xed\xd8\x09\x09" +
	"\xb69'\xa2_\xa9_\x8f_\xd2\x88\x94\x02v\xc2X" +
	"\xb6.\x8d\xd7\xb4$\x90\x92\x17'\x1aD q\xb1\x8f" +
	"\xf8\xc09\x9b\xf3\x05\xe2\x0a\x04L\xb0\xd1\x89\xaet-" +
	"\x13l Q\xa9\xedhUT\xba\xb1\xadhT\xa3S" +
	"\xabvU+JUme\x85nUA\x9d6\xa6\xb2" +
	"\xaa\xac\x0c\xd6\xdd\xf4\xdc\x9d}\xe7\x1f\x81\xa0\xed/\x9f" +
	"\xdf\xe7\xb9\xf7\x9e\xe7\xf3~\xde\xcf\xf3\xbc\xef\xc2o\xf8" +
	"\xee\x11\x16y?\xf7\x03\xf0\xb4\xb7\xceH.=\xb8\xa7" +
	"\xe7\xfe\xfeoC\xa8Y0\xfe\x7f\xae\xef\xfe9[\xda" +
	"n\x00`L\xf2\x8c\xa08\xee\xf1\x01\x88\x9b<\xa3\x80" +
	"\xc6\xd2O\x07N\x9d\x8e\xf7\xec\x02\xde\x8c\xe8\xb8z\x05" +
	"\x1f@\xec\xb0\xa7\x0f\xc5\x17L\xefc\x9e\xe7\x01\x8d\x1f" +
	"-j\x8a\x1dY\xb7\xef;U\xf3\xf6xg\xa08\xe4" +
	"%O\xee\xfd\x0a\xa0\xc1.\xcf\xdb\xb2\xed\xe7\xd9\xbdU" +
	"\x9e\xab\xbd\x02\x8a\xb2\xe9)y#\x80F\xe0\xc4\xe1\x9e" +
	"\x9f]\xbc\xbe\x97\"`\xae\x08\x90\\V{\xaf[\xce" +
	"1\xc9\x1bA@\xe3\xffv\xach\xfe\xcd\xa7\xfb\x9f\xad" +
	"\x8c\xd7\xf4\xd9V\xd7\x87\xe2\xa3u\xf4\xf8p\xdd\xb7\xc8" +
	"\xfd\xfb\xaf\x15.-\x18\x7f\xffXU\x18_\xf8\xa2(" +
	"6\xf9\xe9\x1b\xf5~\x0a\xf8\xe97\xc3\xf3\xd7\xbd\xf8\xd1" +
	"/ \xd4\xec\x9e\x97\x92\x8f5\xfb\xe3(\xce3\x9dg" +
	"\xf9?\x064\xda\x9a\xcf\xec\xf9\xc3\x83\xcd/\xd5r\xbe" +
	"\xb3~\x06\x8am\xf5\xe4<\xbf\x9e\x9c?\xf1\xff\xee\xb1" +
	"\xee\xcb\xbf?]\xe1l\x86\xd9\xd10\x03\xc5\x9e\x06z" +
	"\xecn0#\xfe\xe38\x1f\x8b\xef]\xfc&%(T" +
	"\xce}r\xda\x0c\x14\x7f;\x8d\x1e_\x9df\xba\x9f\xfa" +
	"\xf2wg\xcbg\xa435\xd1\x9b\xd5t]lk\"" +
	"\xef\xf9M&z\x8f\x9c\xbc\xba\xac{\xceGgj\xc5" +
	"\xdd;\xbd\x01\xc5\xd5\xd3\xe9\xbd\xa1\xe9\x14\xf7\xdf=\xab" +
	"\xdei\xfc\xe5\x95\xf7k9\xf3\xc0\x06\x14\xe5\x80\xb9\x8a" +
	"\x01r>r\xf7\xd1\xcb_{\xfe\x91\x8b5y\xb46" +
	"\xd8\x80\xe2X\x90\xbc\x95 \xf1\xa8\xe1W\x83k\x1f\xfb" +
	"\xe9\x07\x97\x80\xdf\x81h<\x9bzh\xee\xc4;\x0b\xfe" +
	"\x0aC\xe8\xc3F\x14\xc4\xfa\xd0u\xc0XS\xe8'\x02" +
	"\xa0\xf1c\xc5\xb7\xf3\x8d\xe6\xe3\x7f\xa9\x9c\x992\x8c\x9d" +
	"\x15\x1bP\xfcP\xa4\x99/\x884si\xae\x1a\xdeb" +
	"!\xfc\x86\xb8;LO;\xc3[\x00\x8d\xbe_\xb7\xf6" +
	".;t\xf2rE\x86&\x97^\x0eGQ<K\xce" +
	"\xb1\xb7\xc2&x\x1f\xac\xe8\x8d\x9d\xab\x9b\xf3I\x15\x97" +
	"\xea[:Q\xbc\xa3\x85\xe6mn\xa1Mu\xfe\xc2\x86" +
	"\xa7}?\xbc\xf2YE\x10=\xe8\xf3\x03\xc4\xeen\x99" +
	"\x8db\x7f\x8b\x89y\xcbk4\xf3\xbc\xfc\x1e\xad\x9d\xff" +
	"\xe0F\xcd\x14\xe7\xcd\xecD\xb1c&\xcd\xbeh\xe6\xc7" +
	"\xd0f\xe4\xb4\xac\x9e]\xa0I\x1eE\xcd\xf7\xe7G\xef" +
	"JJ95\xd7\x99PFUI\x1f\xd7\xe4\xee\xcch" +
	"VS\xf4\xf4\xd8\xa0\xaf\x90\x93\x07\x10y\x10\x05\x80\xd0" +
	"\xfc8\x00bhV\x14\x00\x85\xd0\x1d}\x00\xc8B\xcd" +
	"}\x00\xdb\xe5T\xb4\xa3c\xd1W#r\xaa\xbd}\x89" +
	"!'Sy)\xda\xb1\x18\x00\xac\xe7\xd8\x92vz\xae" +
	"\xfd\xd9\x07\xb2\xba\xb2^IJ\xba\x92U\x13r\x92~" +
	"\x00\xe8\xa3\x8d\xcc\x03\xe0A\x80PO\x14\x80\xdf\xc3\x90" +
	"/\x17\x101\x8c4\xd6\xdb\x0a\xc0\xefe\xc8\x07\x04\x0c" +
	"\x09\x186#\xec\xa7\xc1\xa5\x0c\xf9\xa0\x80\x11=\xbbQ" +
	"V\xb1\x09\x04l\x02\x0c\xe8\x85\x9c\x8c\x1e\x10\xd0\x03\x18" +
	"HI\xba\x84\x8d `#`),V\x16\xd6\x00\x8d" +
	"&\xb3\x99\xc1B\x0eM\x0c\xfc\xe6\x17B\x9a\x89AS" +
	"\x94\xf2\x19\x1cR\xf399\x09\x11e\xbd\"\xa7\"\xb9" +
	"\xc1\xc1\xe5\x89I\xa6[&\x17\x129))\xf7\xdek" +
	"\xe6\xe61'\xf3j\x00\x86&)j~\x99\\\x80\x88" +
	"\xe9Pz_(\x0fg|\xa4+\xa3$\x97\xc9\x05z" +
	"=\\\x82f[\x1f\x00\xdf\xca\x90\xef\x110T\xc4f" +
	"7\xc1\xb0\x83!\xdf+ \x0a\x164\x0f\xcd\x06\xe0\xbb" +
	"\x18\xf2}\x02\x86\x18\x86\x91\x01\x84\x1e\x1e\x06\xe0{\x19" +
	"\xf2\x03\x02\x86<B\x18=\x00\xa1\xfd4\xf88C~" +
	"D@c\xa3\x1d7\x00`\xc0\xd1d@\x0c\x14A\x0d" +
	"8\xc5\xc2\x1a\xf6m\x94\x0bE\xdc\x8d\xcdRFI%" +
	"\x14\x15XRF/\x08\xe8-\x0e\x0e\xa9:0%S" +
	"\x1a\xacM\x8f\xeeTJ\x93\xf3y>.k\x852z" +
	"\xcc,app\x04\x80\x1f`\xc8\x9fta\xf0\x04q" +
	"\xe6\x10C~\x94\xf8a\x83\xf0T\x1c\x80\x1fa\xc8\x9f" +
	"#\x10\x98\x05\xc23\xe4\xf9$C~Z@\xf4X\x18" +
	"\xbcD\x8e/2\xe4\xaf\x08\x18\xf2z\xc2\xe8\x05\x08\xbd" +
	"L\x83\xa7\x18\xf2\xf7\x044\xf2\xe3#\x1b\xe4\xa4\xde\x0d" +
	"\xbeTJ\xc3\xa0#_\x80\x18\x84\x0a\xf6mOfU" +
	"]\x9e\xd0\x8b\x9c\x8b\x10py\x9c\x0e8\xc0\xd0d\xe5" +
	"t\xc0\xed\xf2DN\xd1\xe4|\x11\x90\xed\xd9\x1ce[" +
	"\xe96\x09\xc1\xbe)k\xf6>\x92#Cyi\xb4\x06" +
	"gG\x00\x8c\xe4\xd0\xa06\x9e\xd7\xbb!\xa2&\xd3Y" +
	"\xcdH\x0e\xf5\xa8\xa9\x1eU\x07\x9f\xa2\x17n\xbe\x04\xc3" +
	"YU.\xae\x80)\x0a\xa5\x05\x90h\x01\xd61\xe4\x19" +
	"\xd7\x02(D\xa34C\xbe\xcb\xb5\x00;\xe3.\xba\x16" +
	"\x17`w\xdc\xa6\xeb\xa1[\xe3j\xe4m\x95\x02\xe6\x00" +
	"\x18t\x8a\x18\xa0\x09e\x05\xde\xd6\x7fUw^(\x95" +
	"&\xeb\x85I@]I{\xb3_\xce\xe7\xa5QK\x04" +
	"\\9\x13k\xd60\xe4iW\xcer\xdc\x06b\xab+" +
	"\xe7\x02\x011\xc1\x90?\xee\xca\xf9\xd1\x0d\x00|\x9f\xc5" +
	"\xc4Z\\q\xc7Z*\x06v\xacS\x82\xc0HJ9" +
	"iD\xc9(\x10\xd0\x15\xc7\xaf\xf1\xa6$J\xa4%-" +
	"e\xad1\xaa\x15\x9b,n\xab\xc2qW\xbe\xc7(\xb5" +
	"\xe7\x18\xf2\xd7]\xf9\xbeJlx\x85!\x7f\xdb\x95\xef" +
	"[\xf4\xfa\xeb\x0c\xf9\xbb\xa44\xf6.;\xbb\x12\x80\xbf" +
	"\xcd\x90\x9f\xa7]\xe6\xb5v\xd99\xf2|\x97!\xff\x93" +
	"P\x03\x8bR\xc1\xbd-,lR\x0d\x83/\xab\xca\xe5" +
	"\xa4pHbh\x92:*\xdf\xa7e\x01\xc7J>\xe6" +
	"\xd8`\xf6\x16\xc5\xc2\xa5NU\xb8E\x1d5-\xe1v" +
	"\xb8\xd5\xa5XE\xdc\x9e\x88;\x8a\x856lO\xb5\xba" +
	"\x04\xcb\x83\x16l\xcf\xc4m\xc1\xa2\xa5\xf02\x0b\xb6c" +
	"4x\xd4R\xac\x8a\xd2\xa7Jc\x93&]V\x17o" +
	"W\x81\x84\xca\xfe\xa1\xcbj \xa6R\xa2V\xba\xcaQ" +
	"\xb1|\x97\x95#&X\x10\xb8\xcbQQ\x9e\xdd\xf8\xdd" +
	"\xbcD\x19\x92\xdd\xcc\xd0\xa2VU\xaa\xa9W'\xabe" +
	"(\x16\xb5\xda,p\x0bd\xa5B\x0e\xbb\x84\xa1\x88A" +
	"a\xc4\x16\x86\xdbT\xc8\xff\x1d\xe5o\xad57\xad\x08" +
	"\xdd\xf9<U\x1d\xb3o\x0b\xd0\xefT\xca\x02\xa5\x92b" +
	"\xc8w\xb8\x92\xde6l'}\xc0\x95\xf4\xfe\xb8-\x91" +
	"S(\x0b\xd5\x89\x94\xda\xf8\xdb\x11\x8a*I\x98D&" +
	"\xed`R)\xad\xaaU\xd5\x9c\xb6\xb4\x98r?i\xfd" +
	"r\x86|\x95\x8b\xebC\x94\xdd\x00C\xbeF@C\xb2" +
	"\xf0\xbc\x0f\"\xd2\x98\x92)\xb8>/\xafW&\x96\xcb" +
	"\x10PG\xf54\xfaA@?\xe0v\xdb\xbd*\xca\xf2" +
	"\xfd\xb8bdC\xd7]\x9b\xa5\xcc\xb8\xcc\x172O\xa3" +
	"a\x98\xd1\x88\xdd\xd8\x0a\x90\xf8:2L\xacB\x01\x9b" +
	"\xf0\xdf\x86\x19\x918\x84\xb3\x01\x12\x03dXC\x06\xe1" +
	"\x0b\xc3\\\x08q\xb5i\x18$\xc3:2\xb0\x7f\x19\xe6" +
	"6\x14\xd7b\x14 \xb1\x8a\x0c)2xn\x18\xa6\x18" +
	"\x89\x92iXC\x864\x19\xbc\xd7\x8d0\xd6\x01\x882" +
	"\xc6\x01\x12\xeb\xc8\x90!C\xdd?\x8d\xb0y\xb0R\xcc" +
	"\xa8Rd\xc8\x91\xc1w\xcd\x08\xa3\x1f@\x1c3\xdfH" +
	"\x93A'\x83\xffs#\x8c\xf5\x00\xe2&\xf3\x8d\x0c\x19" +
	"&\xc8P\xff\x0f#\x8c\x0d\x00\xe2\xb8i\xc8\x91a+" +
	"\x19\x1a\xae\x1aa\x9cF\x8773*\x9d\x0c;\xc80" +
	"\xed3#\x8c\x8d\x00\xe26\xd30A\x86](\xd8\x82" +
	"Y^0}Jnq\x11o\x9f\x92k/ur\x9a" +
	"\x9cR\xb4\xd2\xbf\x94\x9c\x91G1\xe8\\I\xd8\xf4\xa4" +
	"\x19\xf3\xb2\xa3\xbaIY\xd31\xe8\x1c\xdbl\xb7\xbc\xac" +
	"mV\x922\x06\x9d3\xabe\x09h\xf2h\xe9+\xf4" +
	"\xc7i%\x15u\xbd&U\x7f2\"O\xe8\xb5\xc6'" +
	"\xa3\xb4\xf5\xe5^u}\xb6\x8a\xd2\xadS=}\xf59" +
	"</+:\x81\\V\xd3\xd1\x07\x02\xfa\xcc\x00\x14R" +
	"\xe4\x02\xe9\xb5\xcd\xe8\xc9\x19l\x05\xe3/\x053\x9f>" +
	"<\x97!_H\xc1\xa0\xeb\" \xd4\x16\x05\xa1\xac\x9c" +
	"EL\xf2O\x92\xb0K\xbb\"\xc9\xa2v\xb9\x8a\xd6H" +
	"\xad\xa2\xe5\x92\xe1\x92v\x1d\x1c\xb6k\xd1\x09\x97v\xbd" +
	"@\xaf\x1fg\xc8O\xb9\xda\x9d\x93\xf4\xfa\x09\xeb\xa0Q" +
	"\x14\xb4\x07\xc0WU\x9d\xffk\x19\x9bb\xbfS\x1b\x98" +
	"\xa5R>m\xdf\x00t\xa5\xc7\x06\xcbo\x00\x86\xcd\x93" +
	"\xc4\xbcN\xf3\x06\xe0\xceN\xeb\x06\xa0\x13\xc0P\xb3\xd6" +
	"{\xc0F\xb3]\xf94\x1d\xff\xe9'\xb6\xa4\x9d~:" +
	"\x16E'\xf9\x9a\xd5\\\x9be\xd3g/\xc2\x97L\xb1" +
	"2W\xc1\xdd ZBE\xa3\xe7\xa2N\x87h\xa9\x14" +
	"\xc5v\x81\x98\xf1\x1eC~\xb1(Q\xb4\x10\x1f\x92\xef" +
	"y\x86\xfc\xcfE}\xa2\x95\xb8D\x8a|\x91!\xbfR" +
	"\x14'j\xa1\xfeF\xa3\x97\x19\xf2kEe\xaa\x03\x08" +
	"]\xfd\x1e\x00\xbf\xc60\xe1)\xe9\x12\x09\x16\xe2\x08\xc0" +
	"J\x92\x8cF$\x05\xb7\xe9\x04\xa8Vt\xa9\xb4\x17\xf3" +
	"\xd4Wc\xd0\xb9\xc8\xb3w\xf5\x83\xb4<A\xe7R\xcd" +
	"v\xdfD\xed$\x06\x9d\x9b<{\xeb\xaa\xf6U\x09\x98" +
	"\xc5\x16\x83\xce\xdd\xab\xed`\x17\x06\x0e\x01{\x86\xd2e" +
	"g\xb9C7\x16\xd9\x0fPq\x18ry\xd9\xf4\x09:" +
	"7\x9b7\x95\x10\xd7\x09\xb4k\x85\xc9\xbf\x8av\xa0\xb5" +
	"\xd6\x89)\xea\xea\x11\x8a[J\xe9\xb3\x8f\x8e\xba\xd3\x09" +
	"o\xa2\xb73\x0c\xf9\x84P\xbaw(]&[\xdd\\" +
	"d\x9c\xa8\x84\x01\xe7\xce\xd6\xee\xf2\xd26\xa5\xad\x0e\xb1" +
	"t\x0bg_b\xb8;\xbb\xff\x04\x00\x00\xff\xff/!" +
	"\x89\xc9"

func init() {
	schemas.Register(schema_fb2d77234707241e,
		0x824d474588994863,
		0x844542c0bc50f248,
		0x869060a0330d319a,
		0x8c6fb57d7725ec03,
		0x8cfae4b3459db40f,
		0xaa95f2c2154f801a,
		0xaddb752fe579c78e,
		0xb6e3b8602914cca6,
		0xbd157ada88cf152d,
		0xc0d7ec4193d608ef,
		0xcc368c426d5175df,
		0xcf61cf65228728bc,
		0xcfe323414bf5b98f,
		0xdbf0b70cd25804f1,
		0xe48faf3beca83da0,
		0xe5deb2935d54bb0a,
		0xeab015ca8107699b,
		0xeb2fd278248964aa,
		0xecb99c4b492abf4a,
		0xef2306d933494fde,
		0xf4f09607a66adddc,
		0xfb92513472887325)
}
