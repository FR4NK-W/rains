// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RainsMessage struct{ capnp.Struct }

// RainsMessage_TypeID is the unique identifier for the type RainsMessage.
const RainsMessage_TypeID = 0xbd157ada88cf152d

func NewRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func NewRootRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func ReadRootRainsMessage(msg *capnp.Message) (RainsMessage, error) {
	root, err := msg.RootPtr()
	return RainsMessage{root.Struct()}, err
}

func (s RainsMessage) String() string {
	str, _ := text.Marshal(0xbd157ada88cf152d, s.Struct)
	return str
}

func (s RainsMessage) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s RainsMessage) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s RainsMessage) Content() (MessageSection_List, error) {
	p, err := s.Struct.Ptr(1)
	return MessageSection_List{List: p.List()}, err
}

func (s RainsMessage) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetContent(v MessageSection_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated MessageSection_List, preferring placement in s's segment.
func (s RainsMessage) NewContent(n int32) (MessageSection_List, error) {
	l, err := NewMessageSection_List(s.Struct.Segment(), n)
	if err != nil {
		return MessageSection_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s RainsMessage) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s RainsMessage) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Capabilities() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s RainsMessage) HasCapabilities() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetCapabilities(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewCapabilities sets the capabilities field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RainsMessage) NewCapabilities(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// RainsMessage_List is a list of RainsMessage.
type RainsMessage_List struct{ capnp.List }

// NewRainsMessage creates a new list of RainsMessage.
func NewRainsMessage_List(s *capnp.Segment, sz int32) (RainsMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return RainsMessage_List{l}, err
}

func (s RainsMessage_List) At(i int) RainsMessage { return RainsMessage{s.List.Struct(i)} }

func (s RainsMessage_List) Set(i int, v RainsMessage) error { return s.List.SetStruct(i, v.Struct) }

// RainsMessage_Promise is a wrapper for a RainsMessage promised by a client call.
type RainsMessage_Promise struct{ *capnp.Pipeline }

func (p RainsMessage_Promise) Struct() (RainsMessage, error) {
	s, err := p.Pipeline.Struct()
	return RainsMessage{s}, err
}

type MessageSection struct{ capnp.Struct }
type MessageSection_Which uint16

const (
	MessageSection_Which_assertion        MessageSection_Which = 0
	MessageSection_Which_shard            MessageSection_Which = 1
	MessageSection_Which_zone             MessageSection_Which = 2
	MessageSection_Which_query            MessageSection_Which = 3
	MessageSection_Which_notification     MessageSection_Which = 4
	MessageSection_Which_addressQuery     MessageSection_Which = 5
	MessageSection_Which_addressAssertion MessageSection_Which = 6
	MessageSection_Which_addressZone      MessageSection_Which = 7
)

func (w MessageSection_Which) String() string {
	const s = "assertionshardzonequerynotificationaddressQueryaddressAssertionaddressZone"
	switch w {
	case MessageSection_Which_assertion:
		return s[0:9]
	case MessageSection_Which_shard:
		return s[9:14]
	case MessageSection_Which_zone:
		return s[14:18]
	case MessageSection_Which_query:
		return s[18:23]
	case MessageSection_Which_notification:
		return s[23:35]
	case MessageSection_Which_addressQuery:
		return s[35:47]
	case MessageSection_Which_addressAssertion:
		return s[47:63]
	case MessageSection_Which_addressZone:
		return s[63:74]

	}
	return "MessageSection_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageSection_TypeID is the unique identifier for the type MessageSection.
const MessageSection_TypeID = 0xf4f09607a66adddc

func NewMessageSection(s *capnp.Segment) (MessageSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageSection{st}, err
}

func NewRootMessageSection(s *capnp.Segment) (MessageSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageSection{st}, err
}

func ReadRootMessageSection(msg *capnp.Message) (MessageSection, error) {
	root, err := msg.RootPtr()
	return MessageSection{root.Struct()}, err
}

func (s MessageSection) String() string {
	str, _ := text.Marshal(0xf4f09607a66adddc, s.Struct)
	return str
}

func (s MessageSection) Which() MessageSection_Which {
	return MessageSection_Which(s.Struct.Uint16(0))
}
func (s MessageSection) Assertion() (AssertionSection, error) {
	p, err := s.Struct.Ptr(0)
	return AssertionSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAssertion() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAssertion(v AssertionSection) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAssertion sets the assertion field to a newly
// allocated AssertionSection struct, preferring placement in s's segment.
func (s MessageSection) NewAssertion() (AssertionSection, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAssertionSection(s.Struct.Segment())
	if err != nil {
		return AssertionSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Shard() (ShardSection, error) {
	p, err := s.Struct.Ptr(0)
	return ShardSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasShard() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetShard(v ShardSection) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewShard sets the shard field to a newly
// allocated ShardSection struct, preferring placement in s's segment.
func (s MessageSection) NewShard() (ShardSection, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewShardSection(s.Struct.Segment())
	if err != nil {
		return ShardSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Zone() (ZoneSection, error) {
	p, err := s.Struct.Ptr(0)
	return ZoneSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasZone() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetZone(v ZoneSection) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZone sets the zone field to a newly
// allocated ZoneSection struct, preferring placement in s's segment.
func (s MessageSection) NewZone() (ZoneSection, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewZoneSection(s.Struct.Segment())
	if err != nil {
		return ZoneSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Query() (QuerySection, error) {
	p, err := s.Struct.Ptr(0)
	return QuerySection{Struct: p.Struct()}, err
}

func (s MessageSection) HasQuery() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetQuery(v QuerySection) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated QuerySection struct, preferring placement in s's segment.
func (s MessageSection) NewQuery() (QuerySection, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewQuerySection(s.Struct.Segment())
	if err != nil {
		return QuerySection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Notification() (NotificationSection, error) {
	p, err := s.Struct.Ptr(0)
	return NotificationSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasNotification() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetNotification(v NotificationSection) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNotification sets the notification field to a newly
// allocated NotificationSection struct, preferring placement in s's segment.
func (s MessageSection) NewNotification() (NotificationSection, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewNotificationSection(s.Struct.Segment())
	if err != nil {
		return NotificationSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressQuery() (AddressQuerySection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressQuerySection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressQuery() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressQuery(v AddressQuerySection) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressQuery sets the addressQuery field to a newly
// allocated AddressQuerySection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressQuery() (AddressQuerySection, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewAddressQuerySection(s.Struct.Segment())
	if err != nil {
		return AddressQuerySection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressAssertion() (AddressAssertionSection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressAssertionSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressAssertion() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressAssertion(v AddressAssertionSection) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressAssertion sets the addressAssertion field to a newly
// allocated AddressAssertionSection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressAssertion() (AddressAssertionSection, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewAddressAssertionSection(s.Struct.Segment())
	if err != nil {
		return AddressAssertionSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressZone() (AddressZoneSection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressZoneSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressZone() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressZone(v AddressZoneSection) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressZone sets the addressZone field to a newly
// allocated AddressZoneSection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressZone() (AddressZoneSection, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewAddressZoneSection(s.Struct.Segment())
	if err != nil {
		return AddressZoneSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MessageSection_List is a list of MessageSection.
type MessageSection_List struct{ capnp.List }

// NewMessageSection creates a new list of MessageSection.
func NewMessageSection_List(s *capnp.Segment, sz int32) (MessageSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MessageSection_List{l}, err
}

func (s MessageSection_List) At(i int) MessageSection { return MessageSection{s.List.Struct(i)} }

func (s MessageSection_List) Set(i int, v MessageSection) error { return s.List.SetStruct(i, v.Struct) }

// MessageSection_Promise is a wrapper for a MessageSection promised by a client call.
type MessageSection_Promise struct{ *capnp.Pipeline }

func (p MessageSection_Promise) Struct() (MessageSection, error) {
	s, err := p.Pipeline.Struct()
	return MessageSection{s}, err
}

func (p MessageSection_Promise) Assertion() AssertionSection_Promise {
	return AssertionSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Shard() ShardSection_Promise {
	return ShardSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Zone() ZoneSection_Promise {
	return ZoneSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Query() QuerySection_Promise {
	return QuerySection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Notification() NotificationSection_Promise {
	return NotificationSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressQuery() AddressQuerySection_Promise {
	return AddressQuerySection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressAssertion() AddressAssertionSection_Promise {
	return AddressAssertionSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressZone() AddressZoneSection_Promise {
	return AddressZoneSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AssertionSection struct{ capnp.Struct }

// AssertionSection_TypeID is the unique identifier for the type AssertionSection.
const AssertionSection_TypeID = 0xecb99c4b492abf4a

func NewAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func NewRootAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func ReadRootAssertionSection(msg *capnp.Message) (AssertionSection, error) {
	root, err := msg.RootPtr()
	return AssertionSection{root.Struct()}, err
}

func (s AssertionSection) String() string {
	str, _ := text.Marshal(0xecb99c4b492abf4a, s.Struct)
	return str
}

func (s AssertionSection) SubjectName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s AssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(1)
	return Obj_List{List: p.List()}, err
}

func (s AssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s AssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(3, v)
}

func (s AssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s AssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s AssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s AssertionSection) SetContext(v string) error {
	return s.Struct.SetText(4, v)
}

// AssertionSection_List is a list of AssertionSection.
type AssertionSection_List struct{ capnp.List }

// NewAssertionSection creates a new list of AssertionSection.
func NewAssertionSection_List(s *capnp.Segment, sz int32) (AssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return AssertionSection_List{l}, err
}

func (s AssertionSection_List) At(i int) AssertionSection { return AssertionSection{s.List.Struct(i)} }

func (s AssertionSection_List) Set(i int, v AssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AssertionSection_Promise is a wrapper for a AssertionSection promised by a client call.
type AssertionSection_Promise struct{ *capnp.Pipeline }

func (p AssertionSection_Promise) Struct() (AssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AssertionSection{s}, err
}

type ShardSection struct{ capnp.Struct }

// ShardSection_TypeID is the unique identifier for the type ShardSection.
const ShardSection_TypeID = 0xc0d7ec4193d608ef

func NewShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func NewRootShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func ReadRootShardSection(msg *capnp.Message) (ShardSection, error) {
	root, err := msg.RootPtr()
	return ShardSection{root.Struct()}, err
}

func (s ShardSection) String() string {
	str, _ := text.Marshal(0xc0d7ec4193d608ef, s.Struct)
	return str
}

func (s ShardSection) Content() (AssertionSection_List, error) {
	p, err := s.Struct.Ptr(0)
	return AssertionSection_List{List: p.List()}, err
}

func (s ShardSection) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetContent(v AssertionSection_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AssertionSection_List, preferring placement in s's segment.
func (s ShardSection) NewContent(n int32) (AssertionSection_List, error) {
	l, err := NewAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ShardSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(1)
	return Signature_List{List: p.List()}, err
}

func (s ShardSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ShardSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s ShardSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ShardSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ShardSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ShardSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ShardSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s ShardSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ShardSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s ShardSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

func (s ShardSection) RangeFrom() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s ShardSection) HasRangeFrom() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeFromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeFrom(v string) error {
	return s.Struct.SetText(4, v)
}

func (s ShardSection) RangeTo() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s ShardSection) HasRangeTo() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeTo(v string) error {
	return s.Struct.SetText(5, v)
}

// ShardSection_List is a list of ShardSection.
type ShardSection_List struct{ capnp.List }

// NewShardSection creates a new list of ShardSection.
func NewShardSection_List(s *capnp.Segment, sz int32) (ShardSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return ShardSection_List{l}, err
}

func (s ShardSection_List) At(i int) ShardSection { return ShardSection{s.List.Struct(i)} }

func (s ShardSection_List) Set(i int, v ShardSection) error { return s.List.SetStruct(i, v.Struct) }

// ShardSection_Promise is a wrapper for a ShardSection promised by a client call.
type ShardSection_Promise struct{ *capnp.Pipeline }

func (p ShardSection_Promise) Struct() (ShardSection, error) {
	s, err := p.Pipeline.Struct()
	return ShardSection{s}, err
}

type ZoneSection struct{ capnp.Struct }

// ZoneSection_TypeID is the unique identifier for the type ZoneSection.
const ZoneSection_TypeID = 0xcfe323414bf5b98f

func NewZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func NewRootZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func ReadRootZoneSection(msg *capnp.Message) (ZoneSection, error) {
	root, err := msg.RootPtr()
	return ZoneSection{root.Struct()}, err
}

func (s ZoneSection) String() string {
	str, _ := text.Marshal(0xcfe323414bf5b98f, s.Struct)
	return str
}

func (s ZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s ZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ZoneSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ZoneSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ZoneSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ZoneSection) Content() (MessageSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return MessageSection_List{List: p.List()}, err
}

func (s ZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetContent(v MessageSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated MessageSection_List, preferring placement in s's segment.
func (s ZoneSection) NewContent(n int32) (MessageSection_List, error) {
	l, err := NewMessageSection_List(s.Struct.Segment(), n)
	if err != nil {
		return MessageSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// ZoneSection_List is a list of ZoneSection.
type ZoneSection_List struct{ capnp.List }

// NewZoneSection creates a new list of ZoneSection.
func NewZoneSection_List(s *capnp.Segment, sz int32) (ZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return ZoneSection_List{l}, err
}

func (s ZoneSection_List) At(i int) ZoneSection { return ZoneSection{s.List.Struct(i)} }

func (s ZoneSection_List) Set(i int, v ZoneSection) error { return s.List.SetStruct(i, v.Struct) }

// ZoneSection_Promise is a wrapper for a ZoneSection promised by a client call.
type ZoneSection_Promise struct{ *capnp.Pipeline }

func (p ZoneSection_Promise) Struct() (ZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return ZoneSection{s}, err
}

type QuerySection struct{ capnp.Struct }

// QuerySection_TypeID is the unique identifier for the type QuerySection.
const QuerySection_TypeID = 0xcc368c426d5175df

func NewQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return QuerySection{st}, err
}

func NewRootQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return QuerySection{st}, err
}

func ReadRootQuerySection(msg *capnp.Message) (QuerySection, error) {
	root, err := msg.RootPtr()
	return QuerySection{root.Struct()}, err
}

func (s QuerySection) String() string {
	str, _ := text.Marshal(0xcc368c426d5175df, s.Struct)
	return str
}

func (s QuerySection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s QuerySection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s QuerySection) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s QuerySection) HasName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s QuerySection) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s QuerySection) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s QuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s QuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s QuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s QuerySection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s QuerySection) Type() ObjectType {
	return ObjectType(s.Struct.Uint16(0))
}

func (s QuerySection) SetType(v ObjectType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s QuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s QuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s QuerySection) Options() (QueryOption_List, error) {
	p, err := s.Struct.Ptr(3)
	return QueryOption_List{List: p.List()}, err
}

func (s QuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetOptions(v QueryOption_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated QueryOption_List, preferring placement in s's segment.
func (s QuerySection) NewOptions(n int32) (QueryOption_List, error) {
	l, err := NewQueryOption_List(s.Struct.Segment(), n)
	if err != nil {
		return QueryOption_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// QuerySection_List is a list of QuerySection.
type QuerySection_List struct{ capnp.List }

// NewQuerySection creates a new list of QuerySection.
func NewQuerySection_List(s *capnp.Segment, sz int32) (QuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return QuerySection_List{l}, err
}

func (s QuerySection_List) At(i int) QuerySection { return QuerySection{s.List.Struct(i)} }

func (s QuerySection_List) Set(i int, v QuerySection) error { return s.List.SetStruct(i, v.Struct) }

// QuerySection_Promise is a wrapper for a QuerySection promised by a client call.
type QuerySection_Promise struct{ *capnp.Pipeline }

func (p QuerySection_Promise) Struct() (QuerySection, error) {
	s, err := p.Pipeline.Struct()
	return QuerySection{s}, err
}

type QueryOption uint16

// QueryOption_TypeID is the unique identifier for the type QueryOption.
const QueryOption_TypeID = 0xabc9ff4fbb5f0b04

// Values of QueryOption.
const (
	QueryOption_minE2ELatency            QueryOption = 0
	QueryOption_minLastHopAnswerSize     QueryOption = 1
	QueryOption_minInfoLeakage           QueryOption = 2
	QueryOption_cachedAnswersOnly        QueryOption = 3
	QueryOption_expiredAssertionsOk      QueryOption = 4
	QueryOption_tokenTracing             QueryOption = 5
	QueryOption_noVerificationDelegation QueryOption = 6
	QueryOption_noProactiveCaching       QueryOption = 7
)

// String returns the enum's constant name.
func (c QueryOption) String() string {
	switch c {
	case QueryOption_minE2ELatency:
		return "minE2ELatency"
	case QueryOption_minLastHopAnswerSize:
		return "minLastHopAnswerSize"
	case QueryOption_minInfoLeakage:
		return "minInfoLeakage"
	case QueryOption_cachedAnswersOnly:
		return "cachedAnswersOnly"
	case QueryOption_expiredAssertionsOk:
		return "expiredAssertionsOk"
	case QueryOption_tokenTracing:
		return "tokenTracing"
	case QueryOption_noVerificationDelegation:
		return "noVerificationDelegation"
	case QueryOption_noProactiveCaching:
		return "noProactiveCaching"

	default:
		return ""
	}
}

// QueryOptionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func QueryOptionFromString(c string) QueryOption {
	switch c {
	case "minE2ELatency":
		return QueryOption_minE2ELatency
	case "minLastHopAnswerSize":
		return QueryOption_minLastHopAnswerSize
	case "minInfoLeakage":
		return QueryOption_minInfoLeakage
	case "cachedAnswersOnly":
		return QueryOption_cachedAnswersOnly
	case "expiredAssertionsOk":
		return QueryOption_expiredAssertionsOk
	case "tokenTracing":
		return QueryOption_tokenTracing
	case "noVerificationDelegation":
		return QueryOption_noVerificationDelegation
	case "noProactiveCaching":
		return QueryOption_noProactiveCaching

	default:
		return 0
	}
}

type QueryOption_List struct{ capnp.List }

func NewQueryOption_List(s *capnp.Segment, sz int32) (QueryOption_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return QueryOption_List{l.List}, err
}

func (l QueryOption_List) At(i int) QueryOption {
	ul := capnp.UInt16List{List: l.List}
	return QueryOption(ul.At(i))
}

func (l QueryOption_List) Set(i int, v QueryOption) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type ObjectType uint16

// ObjectType_TypeID is the unique identifier for the type ObjectType.
const ObjectType_TypeID = 0xfd4f6f21b80818a8

// Values of ObjectType.
const (
	ObjectType_oTName        ObjectType = 0
	ObjectType_oTIP6Addr     ObjectType = 1
	ObjectType_oTIP4Addr     ObjectType = 2
	ObjectType_oTRedirection ObjectType = 3
	ObjectType_oTDelegation  ObjectType = 4
	ObjectType_oTNameset     ObjectType = 5
	ObjectType_oTCertInfo    ObjectType = 6
	ObjectType_oTServiceInfo ObjectType = 7
	ObjectType_oTRegistrar   ObjectType = 8
	ObjectType_oTRegistrant  ObjectType = 9
	ObjectType_oTInfraKey    ObjectType = 10
	ObjectType_oTExtraKey    ObjectType = 11
)

// String returns the enum's constant name.
func (c ObjectType) String() string {
	switch c {
	case ObjectType_oTName:
		return "oTName"
	case ObjectType_oTIP6Addr:
		return "oTIP6Addr"
	case ObjectType_oTIP4Addr:
		return "oTIP4Addr"
	case ObjectType_oTRedirection:
		return "oTRedirection"
	case ObjectType_oTDelegation:
		return "oTDelegation"
	case ObjectType_oTNameset:
		return "oTNameset"
	case ObjectType_oTCertInfo:
		return "oTCertInfo"
	case ObjectType_oTServiceInfo:
		return "oTServiceInfo"
	case ObjectType_oTRegistrar:
		return "oTRegistrar"
	case ObjectType_oTRegistrant:
		return "oTRegistrant"
	case ObjectType_oTInfraKey:
		return "oTInfraKey"
	case ObjectType_oTExtraKey:
		return "oTExtraKey"

	default:
		return ""
	}
}

// ObjectTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ObjectTypeFromString(c string) ObjectType {
	switch c {
	case "oTName":
		return ObjectType_oTName
	case "oTIP6Addr":
		return ObjectType_oTIP6Addr
	case "oTIP4Addr":
		return ObjectType_oTIP4Addr
	case "oTRedirection":
		return ObjectType_oTRedirection
	case "oTDelegation":
		return ObjectType_oTDelegation
	case "oTNameset":
		return ObjectType_oTNameset
	case "oTCertInfo":
		return ObjectType_oTCertInfo
	case "oTServiceInfo":
		return ObjectType_oTServiceInfo
	case "oTRegistrar":
		return ObjectType_oTRegistrar
	case "oTRegistrant":
		return ObjectType_oTRegistrant
	case "oTInfraKey":
		return ObjectType_oTInfraKey
	case "oTExtraKey":
		return ObjectType_oTExtraKey

	default:
		return 0
	}
}

type ObjectType_List struct{ capnp.List }

func NewObjectType_List(s *capnp.Segment, sz int32) (ObjectType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ObjectType_List{l.List}, err
}

func (l ObjectType_List) At(i int) ObjectType {
	ul := capnp.UInt16List{List: l.List}
	return ObjectType(ul.At(i))
}

func (l ObjectType_List) Set(i int, v ObjectType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type SubjectAddr struct{ capnp.Struct }

// SubjectAddr_TypeID is the unique identifier for the type SubjectAddr.
const SubjectAddr_TypeID = 0xe48faf3beca83da0

func NewSubjectAddr(s *capnp.Segment) (SubjectAddr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SubjectAddr{st}, err
}

func NewRootSubjectAddr(s *capnp.Segment) (SubjectAddr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SubjectAddr{st}, err
}

func ReadRootSubjectAddr(msg *capnp.Message) (SubjectAddr, error) {
	root, err := msg.RootPtr()
	return SubjectAddr{root.Struct()}, err
}

func (s SubjectAddr) String() string {
	str, _ := text.Marshal(0xe48faf3beca83da0, s.Struct)
	return str
}

func (s SubjectAddr) AddressFamily() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SubjectAddr) HasAddressFamily() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SubjectAddr) AddressFamilyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SubjectAddr) SetAddressFamily(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SubjectAddr) PrefixLength() uint32 {
	return s.Struct.Uint32(0)
}

func (s SubjectAddr) SetPrefixLength(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SubjectAddr) Address() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SubjectAddr) HasAddress() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SubjectAddr) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SubjectAddr) SetAddress(v string) error {
	return s.Struct.SetText(1, v)
}

// SubjectAddr_List is a list of SubjectAddr.
type SubjectAddr_List struct{ capnp.List }

// NewSubjectAddr creates a new list of SubjectAddr.
func NewSubjectAddr_List(s *capnp.Segment, sz int32) (SubjectAddr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SubjectAddr_List{l}, err
}

func (s SubjectAddr_List) At(i int) SubjectAddr { return SubjectAddr{s.List.Struct(i)} }

func (s SubjectAddr_List) Set(i int, v SubjectAddr) error { return s.List.SetStruct(i, v.Struct) }

// SubjectAddr_Promise is a wrapper for a SubjectAddr promised by a client call.
type SubjectAddr_Promise struct{ *capnp.Pipeline }

func (p SubjectAddr_Promise) Struct() (SubjectAddr, error) {
	s, err := p.Pipeline.Struct()
	return SubjectAddr{s}, err
}

type AddressAssertionSection struct{ capnp.Struct }

// AddressAssertionSection_TypeID is the unique identifier for the type AddressAssertionSection.
const AddressAssertionSection_TypeID = 0xdbf0b70cd25804f1

func NewAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func NewRootAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func ReadRootAddressAssertionSection(msg *capnp.Message) (AddressAssertionSection, error) {
	root, err := msg.RootPtr()
	return AddressAssertionSection{root.Struct()}, err
}

func (s AddressAssertionSection) String() string {
	str, _ := text.Marshal(0xdbf0b70cd25804f1, s.Struct)
	return str
}

func (s AddressAssertionSection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressAssertionSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressAssertionSection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressAssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(1)
	return Obj_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AddressAssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AddressAssertionSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

// AddressAssertionSection_List is a list of AddressAssertionSection.
type AddressAssertionSection_List struct{ capnp.List }

// NewAddressAssertionSection creates a new list of AddressAssertionSection.
func NewAddressAssertionSection_List(s *capnp.Segment, sz int32) (AddressAssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressAssertionSection_List{l}, err
}

func (s AddressAssertionSection_List) At(i int) AddressAssertionSection {
	return AddressAssertionSection{s.List.Struct(i)}
}

func (s AddressAssertionSection_List) Set(i int, v AddressAssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressAssertionSection_Promise is a wrapper for a AddressAssertionSection promised by a client call.
type AddressAssertionSection_Promise struct{ *capnp.Pipeline }

func (p AddressAssertionSection_Promise) Struct() (AddressAssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressAssertionSection{s}, err
}

func (p AddressAssertionSection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddressZoneSection struct{ capnp.Struct }

// AddressZoneSection_TypeID is the unique identifier for the type AddressZoneSection.
const AddressZoneSection_TypeID = 0xb6e3b8602914cca6

func NewAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func NewRootAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func ReadRootAddressZoneSection(msg *capnp.Message) (AddressZoneSection, error) {
	root, err := msg.RootPtr()
	return AddressZoneSection{root.Struct()}, err
}

func (s AddressZoneSection) String() string {
	str, _ := text.Marshal(0xb6e3b8602914cca6, s.Struct)
	return str
}

func (s AddressZoneSection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressZoneSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressZoneSection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(1)
	return Signature_List{List: p.List()}, err
}

func (s AddressZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AddressZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressZoneSection) Content() (AddressAssertionSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return AddressAssertionSection_List{List: p.List()}, err
}

func (s AddressZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetContent(v AddressAssertionSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AddressAssertionSection_List, preferring placement in s's segment.
func (s AddressZoneSection) NewContent(n int32) (AddressAssertionSection_List, error) {
	l, err := NewAddressAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AddressAssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// AddressZoneSection_List is a list of AddressZoneSection.
type AddressZoneSection_List struct{ capnp.List }

// NewAddressZoneSection creates a new list of AddressZoneSection.
func NewAddressZoneSection_List(s *capnp.Segment, sz int32) (AddressZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressZoneSection_List{l}, err
}

func (s AddressZoneSection_List) At(i int) AddressZoneSection {
	return AddressZoneSection{s.List.Struct(i)}
}

func (s AddressZoneSection_List) Set(i int, v AddressZoneSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressZoneSection_Promise is a wrapper for a AddressZoneSection promised by a client call.
type AddressZoneSection_Promise struct{ *capnp.Pipeline }

func (p AddressZoneSection_Promise) Struct() (AddressZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressZoneSection{s}, err
}

func (p AddressZoneSection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddressQuerySection struct{ capnp.Struct }

// AddressQuerySection_TypeID is the unique identifier for the type AddressQuerySection.
const AddressQuerySection_TypeID = 0xaa95f2c2154f801a

func NewAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return AddressQuerySection{st}, err
}

func NewRootAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return AddressQuerySection{st}, err
}

func ReadRootAddressQuerySection(msg *capnp.Message) (AddressQuerySection, error) {
	root, err := msg.RootPtr()
	return AddressQuerySection{root.Struct()}, err
}

func (s AddressQuerySection) String() string {
	str, _ := text.Marshal(0xaa95f2c2154f801a, s.Struct)
	return str
}

func (s AddressQuerySection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressQuerySection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressQuerySection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressQuerySection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s AddressQuerySection) HasToken() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetToken(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s AddressQuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressQuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressQuerySection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressQuerySection) Types() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Int32List{List: p.List()}, err
}

func (s AddressQuerySection) HasTypes() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetTypes(v capnp.Int32List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s AddressQuerySection) NewTypes(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s AddressQuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s AddressQuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s AddressQuerySection) Options() (QueryOption_List, error) {
	p, err := s.Struct.Ptr(4)
	return QueryOption_List{List: p.List()}, err
}

func (s AddressQuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetOptions(v QueryOption_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated QueryOption_List, preferring placement in s's segment.
func (s AddressQuerySection) NewOptions(n int32) (QueryOption_List, error) {
	l, err := NewQueryOption_List(s.Struct.Segment(), n)
	if err != nil {
		return QueryOption_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// AddressQuerySection_List is a list of AddressQuerySection.
type AddressQuerySection_List struct{ capnp.List }

// NewAddressQuerySection creates a new list of AddressQuerySection.
func NewAddressQuerySection_List(s *capnp.Segment, sz int32) (AddressQuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return AddressQuerySection_List{l}, err
}

func (s AddressQuerySection_List) At(i int) AddressQuerySection {
	return AddressQuerySection{s.List.Struct(i)}
}

func (s AddressQuerySection_List) Set(i int, v AddressQuerySection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressQuerySection_Promise is a wrapper for a AddressQuerySection promised by a client call.
type AddressQuerySection_Promise struct{ *capnp.Pipeline }

func (p AddressQuerySection_Promise) Struct() (AddressQuerySection, error) {
	s, err := p.Pipeline.Struct()
	return AddressQuerySection{s}, err
}

func (p AddressQuerySection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type NotificationSection struct{ capnp.Struct }

// NotificationSection_TypeID is the unique identifier for the type NotificationSection.
const NotificationSection_TypeID = 0x844542c0bc50f248

func NewNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func NewRootNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func ReadRootNotificationSection(msg *capnp.Message) (NotificationSection, error) {
	root, err := msg.RootPtr()
	return NotificationSection{root.Struct()}, err
}

func (s NotificationSection) String() string {
	str, _ := text.Marshal(0x844542c0bc50f248, s.Struct)
	return str
}

func (s NotificationSection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s NotificationSection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NotificationSection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s NotificationSection) Type() NotificationType {
	return NotificationType(s.Struct.Uint16(0))
}

func (s NotificationSection) SetType(v NotificationType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s NotificationSection) Data() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s NotificationSection) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NotificationSection) DataBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s NotificationSection) SetData(v string) error {
	return s.Struct.SetText(1, v)
}

// NotificationSection_List is a list of NotificationSection.
type NotificationSection_List struct{ capnp.List }

// NewNotificationSection creates a new list of NotificationSection.
func NewNotificationSection_List(s *capnp.Segment, sz int32) (NotificationSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return NotificationSection_List{l}, err
}

func (s NotificationSection_List) At(i int) NotificationSection {
	return NotificationSection{s.List.Struct(i)}
}

func (s NotificationSection_List) Set(i int, v NotificationSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// NotificationSection_Promise is a wrapper for a NotificationSection promised by a client call.
type NotificationSection_Promise struct{ *capnp.Pipeline }

func (p NotificationSection_Promise) Struct() (NotificationSection, error) {
	s, err := p.Pipeline.Struct()
	return NotificationSection{s}, err
}

type NotificationType uint16

// NotificationType_TypeID is the unique identifier for the type NotificationType.
const NotificationType_TypeID = 0xcbd9cd959c154da1

// Values of NotificationType.
const (
	NotificationType_heartbeat          NotificationType = 0
	NotificationType_capHashNotKnown    NotificationType = 1
	NotificationType_badMessage         NotificationType = 2
	NotificationType_rcvInconsistentMsg NotificationType = 3
	NotificationType_noAssertionsExist  NotificationType = 4
	NotificationType_msgTooLarge        NotificationType = 5
	NotificationType_unspecServerErr    NotificationType = 6
	NotificationType_serverNotCapable   NotificationType = 7
	NotificationType_noAssertionAvail   NotificationType = 8
)

// String returns the enum's constant name.
func (c NotificationType) String() string {
	switch c {
	case NotificationType_heartbeat:
		return "heartbeat"
	case NotificationType_capHashNotKnown:
		return "capHashNotKnown"
	case NotificationType_badMessage:
		return "badMessage"
	case NotificationType_rcvInconsistentMsg:
		return "rcvInconsistentMsg"
	case NotificationType_noAssertionsExist:
		return "noAssertionsExist"
	case NotificationType_msgTooLarge:
		return "msgTooLarge"
	case NotificationType_unspecServerErr:
		return "unspecServerErr"
	case NotificationType_serverNotCapable:
		return "serverNotCapable"
	case NotificationType_noAssertionAvail:
		return "noAssertionAvail"

	default:
		return ""
	}
}

// NotificationTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func NotificationTypeFromString(c string) NotificationType {
	switch c {
	case "heartbeat":
		return NotificationType_heartbeat
	case "capHashNotKnown":
		return NotificationType_capHashNotKnown
	case "badMessage":
		return NotificationType_badMessage
	case "rcvInconsistentMsg":
		return NotificationType_rcvInconsistentMsg
	case "noAssertionsExist":
		return NotificationType_noAssertionsExist
	case "msgTooLarge":
		return NotificationType_msgTooLarge
	case "unspecServerErr":
		return NotificationType_unspecServerErr
	case "serverNotCapable":
		return NotificationType_serverNotCapable
	case "noAssertionAvail":
		return NotificationType_noAssertionAvail

	default:
		return 0
	}
}

type NotificationType_List struct{ capnp.List }

func NewNotificationType_List(s *capnp.Segment, sz int32) (NotificationType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return NotificationType_List{l.List}, err
}

func (l NotificationType_List) At(i int) NotificationType {
	ul := capnp.UInt16List{List: l.List}
	return NotificationType(ul.At(i))
}

func (l NotificationType_List) Set(i int, v NotificationType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Signature struct{ capnp.Struct }

// Signature_TypeID is the unique identifier for the type Signature.
const Signature_TypeID = 0xcf61cf65228728bc

func NewSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func NewRootSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func ReadRootSignature(msg *capnp.Message) (Signature, error) {
	root, err := msg.RootPtr()
	return Signature{root.Struct()}, err
}

func (s Signature) String() string {
	str, _ := text.Marshal(0xcf61cf65228728bc, s.Struct)
	return str
}

func (s Signature) KeySpace() KeySpaceID {
	return KeySpaceID(s.Struct.Uint16(0))
}

func (s Signature) SetKeySpace(v KeySpaceID) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Signature) Algorithm() SignatureAlgorithmType {
	return SignatureAlgorithmType(s.Struct.Uint16(2))
}

func (s Signature) SetAlgorithm(v SignatureAlgorithmType) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s Signature) ValidSince() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Signature) SetValidSince(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Signature) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s Signature) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s Signature) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Signature) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Signature) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Signature_List is a list of Signature.
type Signature_List struct{ capnp.List }

// NewSignature creates a new list of Signature.
func NewSignature_List(s *capnp.Segment, sz int32) (Signature_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Signature_List{l}, err
}

func (s Signature_List) At(i int) Signature { return Signature{s.List.Struct(i)} }

func (s Signature_List) Set(i int, v Signature) error { return s.List.SetStruct(i, v.Struct) }

// Signature_Promise is a wrapper for a Signature promised by a client call.
type Signature_Promise struct{ *capnp.Pipeline }

func (p Signature_Promise) Struct() (Signature, error) {
	s, err := p.Pipeline.Struct()
	return Signature{s}, err
}

type KeySpaceID uint16

// KeySpaceID_TypeID is the unique identifier for the type KeySpaceID.
const KeySpaceID_TypeID = 0x8c6fb57d7725ec03

// Values of KeySpaceID.
const (
	KeySpaceID_rainsKeySpace KeySpaceID = 0
)

// String returns the enum's constant name.
func (c KeySpaceID) String() string {
	switch c {
	case KeySpaceID_rainsKeySpace:
		return "rainsKeySpace"

	default:
		return ""
	}
}

// KeySpaceIDFromString returns the enum value with a name,
// or the zero value if there's no such value.
func KeySpaceIDFromString(c string) KeySpaceID {
	switch c {
	case "rainsKeySpace":
		return KeySpaceID_rainsKeySpace

	default:
		return 0
	}
}

type KeySpaceID_List struct{ capnp.List }

func NewKeySpaceID_List(s *capnp.Segment, sz int32) (KeySpaceID_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return KeySpaceID_List{l.List}, err
}

func (l KeySpaceID_List) At(i int) KeySpaceID {
	ul := capnp.UInt16List{List: l.List}
	return KeySpaceID(ul.At(i))
}

func (l KeySpaceID_List) Set(i int, v KeySpaceID) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type SignatureAlgorithmType uint16

// SignatureAlgorithmType_TypeID is the unique identifier for the type SignatureAlgorithmType.
const SignatureAlgorithmType_TypeID = 0x824d474588994863

// Values of SignatureAlgorithmType.
const (
	SignatureAlgorithmType_ed25519  SignatureAlgorithmType = 0
	SignatureAlgorithmType_ed448    SignatureAlgorithmType = 1
	SignatureAlgorithmType_ecdsa256 SignatureAlgorithmType = 2
	SignatureAlgorithmType_ecdsa384 SignatureAlgorithmType = 3
)

// String returns the enum's constant name.
func (c SignatureAlgorithmType) String() string {
	switch c {
	case SignatureAlgorithmType_ed25519:
		return "ed25519"
	case SignatureAlgorithmType_ed448:
		return "ed448"
	case SignatureAlgorithmType_ecdsa256:
		return "ecdsa256"
	case SignatureAlgorithmType_ecdsa384:
		return "ecdsa384"

	default:
		return ""
	}
}

// SignatureAlgorithmTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SignatureAlgorithmTypeFromString(c string) SignatureAlgorithmType {
	switch c {
	case "ed25519":
		return SignatureAlgorithmType_ed25519
	case "ed448":
		return SignatureAlgorithmType_ed448
	case "ecdsa256":
		return SignatureAlgorithmType_ecdsa256
	case "ecdsa384":
		return SignatureAlgorithmType_ecdsa384

	default:
		return 0
	}
}

type SignatureAlgorithmType_List struct{ capnp.List }

func NewSignatureAlgorithmType_List(s *capnp.Segment, sz int32) (SignatureAlgorithmType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SignatureAlgorithmType_List{l.List}, err
}

func (l SignatureAlgorithmType_List) At(i int) SignatureAlgorithmType {
	ul := capnp.UInt16List{List: l.List}
	return SignatureAlgorithmType(ul.At(i))
}

func (l SignatureAlgorithmType_List) Set(i int, v SignatureAlgorithmType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type HashAlgorithmType uint16

// HashAlgorithmType_TypeID is the unique identifier for the type HashAlgorithmType.
const HashAlgorithmType_TypeID = 0xef2306d933494fde

// Values of HashAlgorithmType.
const (
	HashAlgorithmType_noHashAlgo HashAlgorithmType = 0
	HashAlgorithmType_sha256     HashAlgorithmType = 1
	HashAlgorithmType_sha384     HashAlgorithmType = 2
	HashAlgorithmType_sha512     HashAlgorithmType = 3
)

// String returns the enum's constant name.
func (c HashAlgorithmType) String() string {
	switch c {
	case HashAlgorithmType_noHashAlgo:
		return "noHashAlgo"
	case HashAlgorithmType_sha256:
		return "sha256"
	case HashAlgorithmType_sha384:
		return "sha384"
	case HashAlgorithmType_sha512:
		return "sha512"

	default:
		return ""
	}
}

// HashAlgorithmTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func HashAlgorithmTypeFromString(c string) HashAlgorithmType {
	switch c {
	case "noHashAlgo":
		return HashAlgorithmType_noHashAlgo
	case "sha256":
		return HashAlgorithmType_sha256
	case "sha384":
		return HashAlgorithmType_sha384
	case "sha512":
		return HashAlgorithmType_sha512

	default:
		return 0
	}
}

type HashAlgorithmType_List struct{ capnp.List }

func NewHashAlgorithmType_List(s *capnp.Segment, sz int32) (HashAlgorithmType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return HashAlgorithmType_List{l.List}, err
}

func (l HashAlgorithmType_List) At(i int) HashAlgorithmType {
	ul := capnp.UInt16List{List: l.List}
	return HashAlgorithmType(ul.At(i))
}

func (l HashAlgorithmType_List) Set(i int, v HashAlgorithmType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PublicKey struct{ capnp.Struct }

// PublicKey_TypeID is the unique identifier for the type PublicKey.
const PublicKey_TypeID = 0x8cfae4b3459db40f

func NewPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func NewRootPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func ReadRootPublicKey(msg *capnp.Message) (PublicKey, error) {
	root, err := msg.RootPtr()
	return PublicKey{root.Struct()}, err
}

func (s PublicKey) String() string {
	str, _ := text.Marshal(0x8cfae4b3459db40f, s.Struct)
	return str
}

func (s PublicKey) KeySpace() KeySpaceID {
	return KeySpaceID(s.Struct.Uint16(0))
}

func (s PublicKey) SetKeySpace(v KeySpaceID) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s PublicKey) Type() SignatureAlgorithmType {
	return SignatureAlgorithmType(s.Struct.Uint16(2))
}

func (s PublicKey) SetType(v SignatureAlgorithmType) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s PublicKey) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PublicKey) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PublicKey) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PublicKey) ValidFrom() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s PublicKey) SetValidFrom(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s PublicKey) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s PublicKey) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

// PublicKey_List is a list of PublicKey.
type PublicKey_List struct{ capnp.List }

// NewPublicKey creates a new list of PublicKey.
func NewPublicKey_List(s *capnp.Segment, sz int32) (PublicKey_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PublicKey_List{l}, err
}

func (s PublicKey_List) At(i int) PublicKey { return PublicKey{s.List.Struct(i)} }

func (s PublicKey_List) Set(i int, v PublicKey) error { return s.List.SetStruct(i, v.Struct) }

// PublicKey_Promise is a wrapper for a PublicKey promised by a client call.
type PublicKey_Promise struct{ *capnp.Pipeline }

func (p PublicKey_Promise) Struct() (PublicKey, error) {
	s, err := p.Pipeline.Struct()
	return PublicKey{s}, err
}

type CertificateObject struct{ capnp.Struct }

// CertificateObject_TypeID is the unique identifier for the type CertificateObject.
const CertificateObject_TypeID = 0xfb92513472887325

func NewCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertificateObject{st}, err
}

func NewRootCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertificateObject{st}, err
}

func ReadRootCertificateObject(msg *capnp.Message) (CertificateObject, error) {
	root, err := msg.RootPtr()
	return CertificateObject{root.Struct()}, err
}

func (s CertificateObject) String() string {
	str, _ := text.Marshal(0xfb92513472887325, s.Struct)
	return str
}

func (s CertificateObject) Type() ProtocolType {
	return ProtocolType(s.Struct.Uint16(0))
}

func (s CertificateObject) SetType(v ProtocolType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s CertificateObject) Usage() CertificateUsage {
	return CertificateUsage(s.Struct.Uint16(2))
}

func (s CertificateObject) SetUsage(v CertificateUsage) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s CertificateObject) HashAlgo() HashAlgorithmType {
	return HashAlgorithmType(s.Struct.Uint16(4))
}

func (s CertificateObject) SetHashAlgo(v HashAlgorithmType) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s CertificateObject) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertificateObject) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertificateObject) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertificateObject_List is a list of CertificateObject.
type CertificateObject_List struct{ capnp.List }

// NewCertificateObject creates a new list of CertificateObject.
func NewCertificateObject_List(s *capnp.Segment, sz int32) (CertificateObject_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return CertificateObject_List{l}, err
}

func (s CertificateObject_List) At(i int) CertificateObject {
	return CertificateObject{s.List.Struct(i)}
}

func (s CertificateObject_List) Set(i int, v CertificateObject) error {
	return s.List.SetStruct(i, v.Struct)
}

// CertificateObject_Promise is a wrapper for a CertificateObject promised by a client call.
type CertificateObject_Promise struct{ *capnp.Pipeline }

func (p CertificateObject_Promise) Struct() (CertificateObject, error) {
	s, err := p.Pipeline.Struct()
	return CertificateObject{s}, err
}

type ProtocolType uint16

// ProtocolType_TypeID is the unique identifier for the type ProtocolType.
const ProtocolType_TypeID = 0x869060a0330d319a

// Values of ProtocolType.
const (
	ProtocolType_pTUnspecified ProtocolType = 0
	ProtocolType_pTTLS         ProtocolType = 1
)

// String returns the enum's constant name.
func (c ProtocolType) String() string {
	switch c {
	case ProtocolType_pTUnspecified:
		return "pTUnspecified"
	case ProtocolType_pTTLS:
		return "pTTLS"

	default:
		return ""
	}
}

// ProtocolTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ProtocolTypeFromString(c string) ProtocolType {
	switch c {
	case "pTUnspecified":
		return ProtocolType_pTUnspecified
	case "pTTLS":
		return ProtocolType_pTTLS

	default:
		return 0
	}
}

type ProtocolType_List struct{ capnp.List }

func NewProtocolType_List(s *capnp.Segment, sz int32) (ProtocolType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ProtocolType_List{l.List}, err
}

func (l ProtocolType_List) At(i int) ProtocolType {
	ul := capnp.UInt16List{List: l.List}
	return ProtocolType(ul.At(i))
}

func (l ProtocolType_List) Set(i int, v ProtocolType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type CertificateUsage uint16

// CertificateUsage_TypeID is the unique identifier for the type CertificateUsage.
const CertificateUsage_TypeID = 0xaddb752fe579c78e

// Values of CertificateUsage.
const (
	CertificateUsage_cUTrustAnchor CertificateUsage = 0
	CertificateUsage_cUEndEntity   CertificateUsage = 1
)

// String returns the enum's constant name.
func (c CertificateUsage) String() string {
	switch c {
	case CertificateUsage_cUTrustAnchor:
		return "cUTrustAnchor"
	case CertificateUsage_cUEndEntity:
		return "cUEndEntity"

	default:
		return ""
	}
}

// CertificateUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CertificateUsageFromString(c string) CertificateUsage {
	switch c {
	case "cUTrustAnchor":
		return CertificateUsage_cUTrustAnchor
	case "cUEndEntity":
		return CertificateUsage_cUEndEntity

	default:
		return 0
	}
}

type CertificateUsage_List struct{ capnp.List }

func NewCertificateUsage_List(s *capnp.Segment, sz int32) (CertificateUsage_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return CertificateUsage_List{l.List}, err
}

func (l CertificateUsage_List) At(i int) CertificateUsage {
	ul := capnp.UInt16List{List: l.List}
	return CertificateUsage(ul.At(i))
}

func (l CertificateUsage_List) Set(i int, v CertificateUsage) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type ServiceInfo struct{ capnp.Struct }

// ServiceInfo_TypeID is the unique identifier for the type ServiceInfo.
const ServiceInfo_TypeID = 0xeab015ca8107699b

func NewServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func NewRootServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func ReadRootServiceInfo(msg *capnp.Message) (ServiceInfo, error) {
	root, err := msg.RootPtr()
	return ServiceInfo{root.Struct()}, err
}

func (s ServiceInfo) String() string {
	str, _ := text.Marshal(0xeab015ca8107699b, s.Struct)
	return str
}

func (s ServiceInfo) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceInfo) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfo) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ServiceInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s ServiceInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s ServiceInfo) Priority() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfo) SetPriority(v uint32) {
	s.Struct.SetUint32(4, v)
}

// ServiceInfo_List is a list of ServiceInfo.
type ServiceInfo_List struct{ capnp.List }

// NewServiceInfo creates a new list of ServiceInfo.
func NewServiceInfo_List(s *capnp.Segment, sz int32) (ServiceInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfo_List{l}, err
}

func (s ServiceInfo_List) At(i int) ServiceInfo { return ServiceInfo{s.List.Struct(i)} }

func (s ServiceInfo_List) Set(i int, v ServiceInfo) error { return s.List.SetStruct(i, v.Struct) }

// ServiceInfo_Promise is a wrapper for a ServiceInfo promised by a client call.
type ServiceInfo_Promise struct{ *capnp.Pipeline }

func (p ServiceInfo_Promise) Struct() (ServiceInfo, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfo{s}, err
}

type Obj struct{ capnp.Struct }
type Obj_value Obj
type Obj_value_Which uint16

const (
	Obj_value_Which_name    Obj_value_Which = 0
	Obj_value_Which_ip6     Obj_value_Which = 1
	Obj_value_Which_ip4     Obj_value_Which = 2
	Obj_value_Which_redir   Obj_value_Which = 3
	Obj_value_Which_deleg   Obj_value_Which = 4
	Obj_value_Which_nameset Obj_value_Which = 5
	Obj_value_Which_cert    Obj_value_Which = 6
	Obj_value_Which_service Obj_value_Which = 7
	Obj_value_Which_regr    Obj_value_Which = 8
	Obj_value_Which_regt    Obj_value_Which = 9
	Obj_value_Which_infra   Obj_value_Which = 10
	Obj_value_Which_extra   Obj_value_Which = 11
)

func (w Obj_value_Which) String() string {
	const s = "nameip6ip4redirdelegnamesetcertserviceregrregtinfraextra"
	switch w {
	case Obj_value_Which_name:
		return s[0:4]
	case Obj_value_Which_ip6:
		return s[4:7]
	case Obj_value_Which_ip4:
		return s[7:10]
	case Obj_value_Which_redir:
		return s[10:15]
	case Obj_value_Which_deleg:
		return s[15:20]
	case Obj_value_Which_nameset:
		return s[20:27]
	case Obj_value_Which_cert:
		return s[27:31]
	case Obj_value_Which_service:
		return s[31:38]
	case Obj_value_Which_regr:
		return s[38:42]
	case Obj_value_Which_regt:
		return s[42:46]
	case Obj_value_Which_infra:
		return s[46:51]
	case Obj_value_Which_extra:
		return s[51:56]

	}
	return "Obj_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Obj_TypeID is the unique identifier for the type Obj.
const Obj_TypeID = 0xeb2fd278248964aa

func NewObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func NewRootObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func ReadRootObj(msg *capnp.Message) (Obj, error) {
	root, err := msg.RootPtr()
	return Obj{root.Struct()}, err
}

func (s Obj) String() string {
	str, _ := text.Marshal(0xeb2fd278248964aa, s.Struct)
	return str
}

func (s Obj) Type() ObjectType {
	return ObjectType(s.Struct.Uint16(0))
}

func (s Obj) SetType(v ObjectType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Obj) Value() Obj_value { return Obj_value(s) }

func (s Obj_value) Which() Obj_value_Which {
	return Obj_value_Which(s.Struct.Uint16(2))
}
func (s Obj_value) Name() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Obj_value) HasName() bool {
	if s.Struct.Uint16(2) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetName(v capnp.TextList) error {
	s.Struct.SetUint16(2, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewName sets the name field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Obj_value) NewName(n int32) (capnp.TextList, error) {
	s.Struct.SetUint16(2, 0)
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Obj_value) Ip6() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasIp6() bool {
	if s.Struct.Uint16(2) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) Ip6Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetIp6(v string) error {
	s.Struct.SetUint16(2, 1)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Ip4() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasIp4() bool {
	if s.Struct.Uint16(2) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) Ip4Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetIp4(v string) error {
	s.Struct.SetUint16(2, 2)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Redir() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRedir() bool {
	if s.Struct.Uint16(2) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RedirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRedir(v string) error {
	s.Struct.SetUint16(2, 3)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Deleg() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasDeleg() bool {
	if s.Struct.Uint16(2) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetDeleg(v PublicKey) error {
	s.Struct.SetUint16(2, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDeleg sets the deleg field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewDeleg() (PublicKey, error) {
	s.Struct.SetUint16(2, 4)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Nameset() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasNameset() bool {
	if s.Struct.Uint16(2) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) NamesetBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetNameset(v string) error {
	s.Struct.SetUint16(2, 5)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Cert() (CertificateObject, error) {
	p, err := s.Struct.Ptr(0)
	return CertificateObject{Struct: p.Struct()}, err
}

func (s Obj_value) HasCert() bool {
	if s.Struct.Uint16(2) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetCert(v CertificateObject) error {
	s.Struct.SetUint16(2, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCert sets the cert field to a newly
// allocated CertificateObject struct, preferring placement in s's segment.
func (s Obj_value) NewCert() (CertificateObject, error) {
	s.Struct.SetUint16(2, 6)
	ss, err := NewCertificateObject(s.Struct.Segment())
	if err != nil {
		return CertificateObject{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Service() (ServiceInfo, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceInfo{Struct: p.Struct()}, err
}

func (s Obj_value) HasService() bool {
	if s.Struct.Uint16(2) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetService(v ServiceInfo) error {
	s.Struct.SetUint16(2, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewService sets the service field to a newly
// allocated ServiceInfo struct, preferring placement in s's segment.
func (s Obj_value) NewService() (ServiceInfo, error) {
	s.Struct.SetUint16(2, 7)
	ss, err := NewServiceInfo(s.Struct.Segment())
	if err != nil {
		return ServiceInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Regr() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRegr() bool {
	if s.Struct.Uint16(2) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RegrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRegr(v string) error {
	s.Struct.SetUint16(2, 8)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Regt() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRegt() bool {
	if s.Struct.Uint16(2) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RegtBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRegt(v string) error {
	s.Struct.SetUint16(2, 9)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Infra() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasInfra() bool {
	if s.Struct.Uint16(2) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetInfra(v PublicKey) error {
	s.Struct.SetUint16(2, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfra sets the infra field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewInfra() (PublicKey, error) {
	s.Struct.SetUint16(2, 10)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Extra() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasExtra() bool {
	if s.Struct.Uint16(2) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetExtra(v PublicKey) error {
	s.Struct.SetUint16(2, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExtra sets the extra field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewExtra() (PublicKey, error) {
	s.Struct.SetUint16(2, 11)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Obj_List is a list of Obj.
type Obj_List struct{ capnp.List }

// NewObj creates a new list of Obj.
func NewObj_List(s *capnp.Segment, sz int32) (Obj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Obj_List{l}, err
}

func (s Obj_List) At(i int) Obj { return Obj{s.List.Struct(i)} }

func (s Obj_List) Set(i int, v Obj) error { return s.List.SetStruct(i, v.Struct) }

// Obj_Promise is a wrapper for a Obj promised by a client call.
type Obj_Promise struct{ *capnp.Pipeline }

func (p Obj_Promise) Struct() (Obj, error) {
	s, err := p.Pipeline.Struct()
	return Obj{s}, err
}

func (p Obj_Promise) Value() Obj_value_Promise { return Obj_value_Promise{p.Pipeline} }

// Obj_value_Promise is a wrapper for a Obj_value promised by a client call.
type Obj_value_Promise struct{ *capnp.Pipeline }

func (p Obj_value_Promise) Struct() (Obj_value, error) {
	s, err := p.Pipeline.Struct()
	return Obj_value{s}, err
}

func (p Obj_value_Promise) Deleg() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Cert() CertificateObject_Promise {
	return CertificateObject_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Service() ServiceInfo_Promise {
	return ServiceInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Infra() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Extra() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_fb2d77234707241e = "x\xda\xacY\x7fl\x1c\xd5\xf1\x9f\xd9\xbd\xcb\xd9\x8e\xfd" +
	"\xbd[\xaf\x1dB$\xbe\x07!\xe8\xfbM\xa4@rN" +
	"RH\x8b\xcc\x19\x0c\xb1c\xc7^\xdf\xb9\x8d\xad\xa0f" +
	"}\xf7r\xb7\xc9y\xf7\xb2\xbbN|\x11Q\x12\x14\xda" +
	"\x80B\xf9\x99\x8a\xd0 %\x15\xd0@\x89\x80\x96\xb6 " +
	"\x82\x0a\x15\x15?\x0a\x0aE\xb4%\x85@+\x12\xb5\xb4" +
	"A\xfc\x10i!\x94n5o\xf7n\xd7w\xe7\x10\xda" +
	"\xfeu\xbbo\xe6\xbd\x9d\x99\xf7\x99\xcf\xcc{\xb7\xa8\xa5" +
	"\xe1\x0aaq\xd8i\x04P\xec\xf0\x0c'\xb3b\xef\xae" +
	"\xeek\xfa\xaf\x07\xa9]p\xfew^\xe4\x9a\x0b7/" +
	"\xfc\x0c\x00;N\x84\xc6P\xfe4\x14\x01\x90O\x85r" +
	"\x80\xce\x8a\x8f\x06\x0f?\xdd\xd5\xbd\x13\x94vD_5" +
	",D\x00:.\x08\xf7\xa2\xbc4L\xda\x8b\xc3\x0f\x03" +
	":w/n\xe9\xd8\xbf\xf6\xd6o\xd5\xac\xfbB\xb8\x15" +
	"\xe5\xa3\\\xf37\xe1\xaf\x00:\xe2\xc9\x8b6o\xfd\x89" +
	"\xb1\xbbF\xf3XX@\xf9]\xaey\"\x1c\x07t\xa2" +
	"\x8f\xdd\xd3\xfd\xe3\xe3\xa7w\x93\x05b\xc0\x02$\x95c" +
	"\xe1\xd3\xaer\xc7\x89p\x1c\x01\x9d9\xdb\x07\xda\x7f\xf1" +
	"\xd1\x9e\x07\xab\xed\xe5:\x18\xe9E\xb9=B\x8fR\xe4" +
	"\x1b\xa4\x1e\x9a\xf9\xcd'\x07\x9c\x17~Xc\xc6\x8e\x86" +
	"&\x94ok\xa0o\xdc\xdc\xf0\x1c\xa0\xf3\x9d\xe7J'" +
	".\x99x\xe3P\x8d\xe6\xfc\xc6\x04\xca\x975\x92\xe6\xd2" +
	"Fr\xed\xfe\x97\xda\xe6\xaf}\xfc\x9d\x9f\x82\xd4\x1e\xb4" +
	"\x80\x82\xda\x91l\xecBY\xe1\xca\xfd\x8d\x7f\x02t\x16" +
	"\xb6\x1f\xd9\xf5\xfb-\xedO\xd5S\xeeijEy\xa4" +
	"\x89\x94\x87\x9bH\xf9\xfd\x86\xdf\xde\x91<\xf9\xbb\xa7\xab" +
	"\x94g\x90\xb2:\xb3\x15\xe5\x8d3\xe9q|&\xf7\xed" +
	"@\x7f\xfb\xbe=/\x1f\xfdU\xed&7'P>\xd5" +
	"L\xeb~\xd8\xfc6\xa0\xf3\xf6\x842\xde\xb5{\xd9K" +
	"\x144\xa1\xda\x8a\xbd-\xad(?\xd0B\x8f\xf7\xb5\xf0" +
	"\x85\x0f\xff\xff\xb7\xe7\xb2#\xea\x91\xba;\x82\xd1\xd3r" +
	"K\x94\xb4\x1b\xa3|Gny\xe2\xd4\xca\xe4\x85\xef\x1c" +
	"\xa9\xe7\xe1\xfcX\x13\xca\x97\xc5x\xecb\xe4\xe1\x87\xa1" +
	"\xd5\xaf6\xff\xec\x837\xea)/\x96\xd6\xa3\xdc-\x91" +
	"rR\"\xe5\xfd\x97\x1f<\xf9\xd5\x87o9^\x17\x9b" +
	"\x97\xb76\xa1\xdc\xdfJ\xda=\xad\x84\xcd\xa6'\xd3\xd7" +
	"\xde\xf1\xa3\xb7N\x80r.\xa2\xf3`\xf6\xc6y\x93\xaf" +
	"^\xf2W\x18\xc6\x086#\xca\xef\xb6\x9e\x06\xecx\xaf" +
	"\xf5\x07\x02\xa0\xf3=-\xb2\xe3\xc5\xf6G\xfeR\xbd2" +
	"y\xd8\xf1h{\x13\xca\xcf\xb4\xd3\xcaO\xb5\xd3\xca\x95" +
	"\xb5\xeah\xcb#\xb3^\x94\xd9,zRgm\x06t" +
	"z\x7f\xbe\xa0g\xe5\xbe'NVy\xc8\xf1y`V" +
	"\x02\xe5GI\xb9\xe3\xd0,\x1e\xbc\xb7\x06z:\x8e\xce" +
	"\xb8\xf0\xfd\x9a=|\xf7\x9c\xe5(\x7fz\x0eO\xd4s" +
	"(Q\xdf<\xb6\xfe\xfe\xc8w?\xf8\xb8\xca\x88n\x8c" +
	"4\x00t\x9c7{.\xca\x0bg\xf3\x98\xcf~\x8eV" +
	"\xbe\xc8\xdae.Qn\xff\xac\xae\x8b\xe19\xcbQn" +
	"\x9fC\xabKs(\xd4\x07g7<~\x811\xf0y" +
	"\xad\x1ds\x04\x94O\x91f\xc7\x87s\xfe\x0fa\xa1S" +
	"4\x0d\xdb\xb8\xc4TC\x9an\xf5[\xb9\x8b3jQ" +
	"/.Oi9]\xb5'L\x96,\xe4\x0cS\xb3\xf3" +
	"\xe3\xe9H\xa9\xc8\x06\x11\x95\x18\x0a\x00\xd2\xfc.\x00D" +
	"\xe9\x82\x04\x00\x0a\xd2\xb9\xbd\x00(J\xed\xbd\x00\xdbX" +
	"6\xb1t\xe9\xe2\xcb\xe2,\xbbd\xc9\xa5\x0e\xcbd-" +
	"5\xb1t\x19\x00\xb8\xcf\x1d\x97.\xa1\xe7\xfa\x9f]e" +
	"\xd8\xda:-\xa3\xda\x9a\xa1\xa7X\x86~\x00\xe8\xa3\xcd" +
	"b\x08 \x84\x00Rw\x02@\xb9BD\xa5O@\xc4" +
	"6\xa4\xb1\x9e\x05\x00\xcaU\"*\x83\x02J\x02\xb6q" +
	"\x0b\xfbip\x85\x88JZ\xc0\xb8ml`:\xb6\x80" +
	"\x80-\x80Q\xbbTd\x18\xf53\x0e\x10\xa3\x80\xd1\xac" +
	"j\xab\xd8\x0c\x026\x03V\x0c\x14\xa7\x188H\xa3\x19" +
	"\xa3\x90.\x15\x91G\xa3\x81\x7fK2y4Z\x12\xe4" +
	"YzX\xb7\x8a,\x03qm\x9d\xc6\xb2\xf1b:\xdd" +
	"\x97\x9af\xb9\x95\xac\x94*\xaa\x19\xd6s\x15\xf72\xc4" +
	"\x17\x0b\x9b\x00\x8e\xa9j\xba\xb5\x92\x95 \xce\x15*\xf3" +
	"\x85\xa9\xe6L\x8cu\x16\xb4\xccJV\xa2\xe9m\x95 " +
	"m\xed\x05P\xae\x13Q\xd9%\xa0T\x8e\xd2\x0d\x14\x90" +
	"\xed\"*\xbb\x05D\xc1\x0d\xd2\x8ds\x01\x94\x9d\"*" +
	"\xb7\x0a(\x89\xd8\x86\"\x80t\xf3\x10\x80\xb2[D\xe5" +
	".\x01\xa5\x90\xd0\x86!\x00i\xcf(\x80r\xa7\x88\xca" +
	"~\x01\x9d\x0d\x9e\xdd\x00\x80Q\xbf8xq\xf4\xc2[" +
	"\xa9Z\xeepd\x03+\x95w\xc0\xd9\xa4\x16\xb4\xec\xd5" +
	"\xa6\x018\x8ea\x100\\\x1e\x1b\xd6m\x10\xb5Be" +
	"\xb0>N\x92\xd9\xac\xc9,K\x99`fi\x0aNf" +
	"WB\xb0w\x0c@\xb9KD\xe5\xde@\x08\x0e\x10x" +
	"\xf6\x89\xa8\x1c$\xa0x1\xb8\xaf\x0b@\xd9/\xa2\xf2" +
	"\x10\xc5@tc\xf0\x00i\xde+\xa2\xf2\xb4\x80\x18r" +
	"C\xf0\x14)>.\xa2\xf2\xac\x80R8\xd4\x86a\x00" +
	"\xe9\x19\x1a<,\xa2\xf2\xba\x80\x8e51\xb6\x9ee\xec" +
	"$D\xb2Y\x13c>\xe5\x01b\x0c\xaa`\xb8-c" +
	"\xe86\x9b\xb4\xcb\x90\x8bS\xdc,\xfc\x1f\xc0A\x111" +
	"\x04\x02=nc\x93E\xcddV9 \xdb\x8c\"y" +
	"[Q\x8b\xfa5\x11\x90\x06\xa7A\x1a\x0f\xd5@\xd1\x8f" +
	"\xd4\xf9\xdc\xf7\x11\x17\xb8\xc3\x0f\xf24\x1e\xde\xc2\xd3X" +
	"\xb9\x1d\x00C\x92\xf2}\x00\x0cK\xcaz\x00\x9c!\xf5" +
	"\xbf\x08\x80\x11I\xb9\x1b\xc0\x19\xd7\xf4\xeeDw\x9f\x0a" +
	"q\x9b\xe9\x99\x12\xbd\xf7\xa9\x96\xbd\x02\x8dbR\xb76" +
	"33\x9a\xd2\xb60\x1a\xee\xd1\xd7\x19}\xd0\xc9\xd4\x0d" +
	"j\x8e9\x195\x93g\xd9\xa4\x8e\xa4c\x0d\xe8\x05," +
	"9\xae\x7f\xd9$Z\x163\xc9\xbc\x885\xb0\xc1\xe1\x81" +
	"J\x9b*D3\x9a\x9est\xe3\xeb\xcc\xd4\xd6i\x82" +
	"K\x0dW\xb1\x02\xcb\xa9\xae/\x8en\x0c\x9a\x86\x9a\xb1" +
	"Q\xdb\xc4\xaeT3yM\xd4s\xd3\x04\xe1J\xfa\x02" +
	"\xe7\x17\x16\x1f\xb6\xd4\\\x9d\x0c\x1e\x03p2\xc3is" +
	"\xc2\xb2\x93\x10\xd73y\xc3t2\xc3\xddz\xb6[\xb7" +
	"!\xa2\xd9\xa53#r\xd4\xd0Y\x19\x90\x9c,+x" +
	"T\x09\x8fkET\x0a\x01<j\x94Ty\x11\x95\x9d" +
	"\x01<\xee\xe8\x0a$o\x19\x8f7ty\xc9\xbb\xef\x8b" +
	"a\xe6X\x1e{\x83\xe8\xe3)\xe6\xf7\x01.P\xaa\xe1" +
	"\xe7\xbe\xeb\xb6?\xa1R\xdd\xcf\x88\xac!b\xaa~f" +
	"Yj\xce\xa5\xc4\x80\xcf\x94DkDT\xf2\x01\x9fY" +
	"\x97\x17\x88\xeb\x02>\x97(\x10\x93\"*w\x06|\xbe" +
	"m=\x80r\xab\x9b\x98\xf5R'hk\xa5\x9ez\xb6" +
	"\x9eU\x08\x9c\x8cZT\xc7\xb4\x82\x06Q[\xf3\xf5\x9a" +
	"\xdd\xd4\x9b\xc6\xdfT^5\xb3\xee\x1e\xa3^\xc59]" +
	"\x1eG>\x12\xf0\xf7\x10\xb9\xf6\x90\x88\xca\xf3\x01\x7f\x7f" +
	"IhxVD\xe5\x95\x80\xbf/\xd3\xf4\xe7ET^" +
	"#\xde\xf5H\xe7\xd7D\xc6\xaf\x88\xa8\xbcI\xa4\x13v" +
	"I\xe7(i\xbe&\xa2\xf2\x07\xa1N,*=\xcb\x97" +
	"\x8a\x85\x07\xaaQ\x88\x18:\x9b\x0a\x0a\x1f$\x8e\xa9\xea" +
	"9\xe6\x11wY\x87\x8f\xa5\x8d/(\x9d\x81\xda\x1e\xd7" +
	"\xd3^31\x8fG\x83\x0d\xf1\xe4S\xaf\xe7,t\xed" +
	"(g\xa1\x91\xbb9\x0b\x8d\xdc\xceYhd\x8c\xb3\xd0" +
	"\xf0\xf5.\x0b\xdd\x04\x80\x0d\xfc\xc7\xc93\xd5\xb4\xc7\x98" +
	"\x0ah\xd3~\xaeP\xad\xfc*\xc1\xb0W\xea\xc6f\x1d" +
	"\xc6\xd4,\x87\xa6\x98c\x8e\x99\xd9\xd4\xa3g\x0c\x1d-" +
	"\xcd\xa2\x80\xf5\x8b\x161K\x92\x13\x0f\x12\xa9vOj" +
	"\x16\xda\xce\xb8\x95K\x1bF\x9f\x0a\x113\xc7\x9c\x09^" +
	"\xcdSL471\xb3\xdb4\xc1b\xf4\xb4\xca\xb0\xaf" +
	"$\xf4\x14\x18\xe7 \x7f\x95\xe4&U+\x04:\x9c:" +
	"<<\x0dz\x12~\x85\xad\xa0\xe7\x9e\x05\x812VF" +
	"\xcf\x81.\xbf\x8c\xa1\x07\x9e\xfb\x16\x04\xaaX\x08]\xf0" +
	"<\xd0\xe5U1\x02dXt\xc1s\x88\x06\x0f\xbae" +
	"\xac\xaa1\xd2\xd5\xf1i\xb7\xbe\\\xd6+\xbd\xa5[\xd6" +
	"\xff\xfd\x02%Tw\x9c\x9dn\xcby6\xad\xccP\xa0" +
	"m)7|7\x8f\x06\xda\x16Qp\xc3\x12l[\xca" +
	"u<\x18\xd33\xb72\x8e\xea\xb5\xbf\x04\xf7\x9a\x8e\xc6" +
	"\xedXR\x9a\x0eb\x86\x9d\xb1\x8dq[\xcbr\xf3S" +
	"\x1f\x19\xc1\xd2Q];F\x03\x94Y\x8eAi\xcc\xa3" +
	"\xcc/Y;\xfe{d\xf0\xc5,|\xc6Z\x99,W" +
	"\xfc\x14\xcbD\xe9\xf7l\x0a&\xb9\x92\x15Q\xd9\x1ep" +
	"z\xeb\xa8\xe7\xf4]\x01\xa7\xf7ty\xc5\xe3,\x0af" +
	"\xad#\x953\xe2\x97\xa1\xd0\x1a\xb2\x9c\xa6\x80x\xc6d" +
	"\xb3f\xcd\xe1\xc6\xf4\x0f2e\x97\xfb\xa9\x0a\xf6\x89\xa8" +
	"\xac\x0e`}\x98\xbc\x1b\x14QY#\xa0\xa3\xba\xf1\xbc" +
	"\x1a\xe2\xea\xb8V(\x05>\xcf\xd6i\x93}\x0c\xa2z" +
	"\xce\xcec\x03\x08\xd8\x00\xb8\xcdS\xaf\xb1rj>\x0e" +
	"\x8c\xad\xef\xbcx\x93Z\x98`\xca\"1\xd4\xec8\xdc" +
	"\x1a9\x89\x0b\x00R_C\x11S\xabQ\xc0\x16\xfc\xa7" +
	"\xc3-\x92\x87q.@j\x90\x04kH |\xee\xf0" +
	"\x8d\x90G\xb8 M\x82\xb5$\x10\xff\xe1\xf04\x94\xaf" +
	"\xc5\x04@j5\x09\xb2$\x08}\xe6p\x82\x92U." +
	"XC\x82<\x09\xc2\xa7\x9d6\x9c\x01 3\xec\x02H" +
	"\xad%A\x81\x043>u\xda\xf8\xa9]\xe3VeI" +
	"P$A\xe4\x13\xa7\x0d\x1b\x00\xe4q>#O\x02\x9b" +
	"\x04\x0d\x7fw\xda\xb0\x11@\xde\xc8g\x14H0I\x82" +
	"\xc6\xbf9m\xd8\x04 OpA\x91\x04\xd7\x91\xa0\xe9" +
	"\x94\xd3\x863\x01\xe4\x12\xb7\xca&\xc1v\x12\xcc\xfc\xd8" +
	"i\xc3f\x00y+\x17L\x92`'\x0a\x1e\x89Nm" +
	"%\"ZqY9\xde\x11\xad\xb8\xa4\xd2\xf2\x9b,\xab" +
	"\x99\x95\xb7,\xf5\xb5\x18\xf3\xef\xd0<x\xd2\x8a\x16\xf3" +
	"\x998C\xa5&\xe6\xdf\x09xjT\x98\xb4\x0c\xc3\x98" +
	"\x7f!\xe2J\xa2&\xcbU\xbeB/\xfe\x99C\xd3\xd7" +
	"\x99j\xed'\xe3l\xd2\xae7>\x1d\xa4\xdd/S\xb7" +
	"_\x03\xe9\x05g{^\xef\xf5q>\xa5\x10E\x8b\x86" +
	"ic\x04\x04\x8cp\x034b\xe4\x12\xf1\xb5\x87\xe8\xe9" +
	"\x11\xec\x1a\xd3P1f>}x\x9e\x88\xca\"2\x06" +
	"\x03\xb7L\xd2\xc2\x04\x08\xd3\x94\xb88O\x83i\\\x0f" +
	"\xb0X<Sf\xb1@\xf9\x1a\xabW\xbe\x02\x84\\a" +
	"\xb1\xbd\xa3^Uz,\xc0b\x8f\xd2\xf4GDT\x0e" +
	"\x07Z\xc2'h\xfac\xee\xd9\xb4Lm\xab RS" +
	"\xbb\xffcB;\xcb\x9e\xb0~`\xa8\x11\xf3n\x8f:" +
	"\xf3\xe3\xe9\xa9\xb7G\xa3\xbc\xe1\xbbh9o\xf8\xce[" +
	"\xee\xde\x1e-\xe7\x9d\x94;\x0f\xc4\x9c\xd1i\xe5\xd5\xc4" +
	"\xd2e\xf4\xd3q\xe9\x12\xfaY\xba81\xcd\xd7\xdc\x03" +
	"\x08/\xa0\x11o\x13\xce\xe7\xb4\xc5w!\xd8D\xbb\x94" +
	"E\xa3G\x13~\x17\xed\xf2\x15\xd9v\x8c0\xf2\xba\x88" +
	"\xca\xf12Y\xd1F\xfc\x91t\xdf\x14Q\xf9s\x99\xa9" +
	"h'N\x107\x1f\x17Q\xf9\xa0LS\xd4`\xbdG" +
	"\xa3'ET>)s\xd4\x0c\x00\xe9\xd4M\x00\xca'" +
	"\"\xa6B\x15\x86\xe2\x17\xb08\x060D\xe4\xd1\x8c\xc4" +
	"\xe5\x1e\x9c\x00\xf5\xaaN\x9e\xb2\xd2\xa2\xb3\x07\xc6\xfc\x9b" +
	"e/\xbf\xb7\xd0\xf6\xc4\xfc\xbb[O}#5\x9b\x18" +
	"\xf3/\x8c\xbd$\xd6\xbdV\x1cx\xd9\xc5\x98\xff\xb7\x81" +
	"\xa7\xe0\x95\x08\x05\xa2\xde\x0a\x95{\xfa\xa9\x0a\xfe\xa9\x1d" +
	"\xa0\xea\xc0\x18\xd0\xf2\xe0\x13\xf3\xaf\xda\xcfH&\x81S" +
	"z\xe7\x00\xc7_Uc\xb0\xa0\xde\xa92\x11\xe8\x16\xca" +
	")\xa5\xf5z\xc7k\xdb\xef\x937\xd2\xec\x82\x88\xca\xa4" +
	"Pii+\xff\x83x\xf9>AP\xc2\xa8\xff'\x82" +
	"\xd7\xef\xe5=H\xbb\xbdb\xe5\xb27x}x\xe6\x1e" +
	"\xcfu\x87r\x81\x13\xd3\"\xf7\x0en9O\x86\x1dC" +
	"<\x19\xb6\x0e\xf1d(\x99\xfc\xf43\xb1\x9e\x9f~6" +
	"\x0e\xf1\xd3\xcf\xf8(?\xfdh&?\xfd0:\x125" +
	"J*\xa94\xb9\xa7\xa6\x99\xd2\xc8(@\xa7\x91^\xa5" +
	"\x8e3\xc7H\xf7\x0c.Kf\xb3\x80&\x7f^Ry" +
	"\x1e\xa2\xb2\xc3\xc0%,\xc7H\xbb\x17*.\x1c\x1cw" +
	"\xb6\xc5\xe8@e\xa4i7zt\x10\xd7\x19\x8e\x91v" +
	"y\x1e\xe2\x9c\xe9\xf9:9\xcd\xb2!b\xaa\xa6\xff\x16" +
	"5U\x9df\xf6PiY\x09\"+9F\xba\x9b\xea" +
	"\x09\x7f\xf9W\x00\x00\x00\xff\xff\xe2\x83\xc9\x0c"

func init() {
	schemas.Register(schema_fb2d77234707241e,
		0x824d474588994863,
		0x844542c0bc50f248,
		0x869060a0330d319a,
		0x8c6fb57d7725ec03,
		0x8cfae4b3459db40f,
		0xaa95f2c2154f801a,
		0xabc9ff4fbb5f0b04,
		0xaddb752fe579c78e,
		0xb6e3b8602914cca6,
		0xbd157ada88cf152d,
		0xc0d7ec4193d608ef,
		0xcbd9cd959c154da1,
		0xcc368c426d5175df,
		0xcf61cf65228728bc,
		0xcfe323414bf5b98f,
		0xdbf0b70cd25804f1,
		0xe48faf3beca83da0,
		0xe5deb2935d54bb0a,
		0xeab015ca8107699b,
		0xeb2fd278248964aa,
		0xecb99c4b492abf4a,
		0xef2306d933494fde,
		0xf4f09607a66adddc,
		0xfb92513472887325,
		0xfd4f6f21b80818a8)
}
