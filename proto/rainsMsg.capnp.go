// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type RainsMessage struct{ capnp.Struct }

// RainsMessage_TypeID is the unique identifier for the type RainsMessage.
const RainsMessage_TypeID = 0xbd157ada88cf152d

func NewRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func NewRootRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func ReadRootRainsMessage(msg *capnp.Message) (RainsMessage, error) {
	root, err := msg.RootPtr()
	return RainsMessage{root.Struct()}, err
}

func (s RainsMessage) String() string {
	str, _ := text.Marshal(0xbd157ada88cf152d, s.Struct)
	return str
}

func (s RainsMessage) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s RainsMessage) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s RainsMessage) Content() (MessageSection_List, error) {
	p, err := s.Struct.Ptr(1)
	return MessageSection_List{List: p.List()}, err
}

func (s RainsMessage) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetContent(v MessageSection_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated MessageSection_List, preferring placement in s's segment.
func (s RainsMessage) NewContent(n int32) (MessageSection_List, error) {
	l, err := NewMessageSection_List(s.Struct.Segment(), n)
	if err != nil {
		return MessageSection_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s RainsMessage) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s RainsMessage) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Capabilities() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s RainsMessage) HasCapabilities() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetCapabilities(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewCapabilities sets the capabilities field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RainsMessage) NewCapabilities(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// RainsMessage_List is a list of RainsMessage.
type RainsMessage_List struct{ capnp.List }

// NewRainsMessage creates a new list of RainsMessage.
func NewRainsMessage_List(s *capnp.Segment, sz int32) (RainsMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return RainsMessage_List{l}, err
}

func (s RainsMessage_List) At(i int) RainsMessage { return RainsMessage{s.List.Struct(i)} }

func (s RainsMessage_List) Set(i int, v RainsMessage) error { return s.List.SetStruct(i, v.Struct) }

// RainsMessage_Promise is a wrapper for a RainsMessage promised by a client call.
type RainsMessage_Promise struct{ *capnp.Pipeline }

func (p RainsMessage_Promise) Struct() (RainsMessage, error) {
	s, err := p.Pipeline.Struct()
	return RainsMessage{s}, err
}

type MessageSection struct{ capnp.Struct }
type MessageSection_Which uint16

const (
	MessageSection_Which_assertion        MessageSection_Which = 0
	MessageSection_Which_shard            MessageSection_Which = 1
	MessageSection_Which_zone             MessageSection_Which = 2
	MessageSection_Which_query            MessageSection_Which = 3
	MessageSection_Which_notification     MessageSection_Which = 4
	MessageSection_Which_addressQuery     MessageSection_Which = 5
	MessageSection_Which_addressAssertion MessageSection_Which = 6
	MessageSection_Which_addressZone      MessageSection_Which = 7
)

func (w MessageSection_Which) String() string {
	const s = "assertionshardzonequerynotificationaddressQueryaddressAssertionaddressZone"
	switch w {
	case MessageSection_Which_assertion:
		return s[0:9]
	case MessageSection_Which_shard:
		return s[9:14]
	case MessageSection_Which_zone:
		return s[14:18]
	case MessageSection_Which_query:
		return s[18:23]
	case MessageSection_Which_notification:
		return s[23:35]
	case MessageSection_Which_addressQuery:
		return s[35:47]
	case MessageSection_Which_addressAssertion:
		return s[47:63]
	case MessageSection_Which_addressZone:
		return s[63:74]

	}
	return "MessageSection_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// MessageSection_TypeID is the unique identifier for the type MessageSection.
const MessageSection_TypeID = 0xf4f09607a66adddc

func NewMessageSection(s *capnp.Segment) (MessageSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageSection{st}, err
}

func NewRootMessageSection(s *capnp.Segment) (MessageSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return MessageSection{st}, err
}

func ReadRootMessageSection(msg *capnp.Message) (MessageSection, error) {
	root, err := msg.RootPtr()
	return MessageSection{root.Struct()}, err
}

func (s MessageSection) String() string {
	str, _ := text.Marshal(0xf4f09607a66adddc, s.Struct)
	return str
}

func (s MessageSection) Which() MessageSection_Which {
	return MessageSection_Which(s.Struct.Uint16(0))
}
func (s MessageSection) Assertion() (AssertionSection, error) {
	p, err := s.Struct.Ptr(0)
	return AssertionSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAssertion() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAssertion(v AssertionSection) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAssertion sets the assertion field to a newly
// allocated AssertionSection struct, preferring placement in s's segment.
func (s MessageSection) NewAssertion() (AssertionSection, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAssertionSection(s.Struct.Segment())
	if err != nil {
		return AssertionSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Shard() (ShardSection, error) {
	p, err := s.Struct.Ptr(0)
	return ShardSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasShard() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetShard(v ShardSection) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewShard sets the shard field to a newly
// allocated ShardSection struct, preferring placement in s's segment.
func (s MessageSection) NewShard() (ShardSection, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewShardSection(s.Struct.Segment())
	if err != nil {
		return ShardSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Zone() (ZoneSection, error) {
	p, err := s.Struct.Ptr(0)
	return ZoneSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasZone() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetZone(v ZoneSection) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewZone sets the zone field to a newly
// allocated ZoneSection struct, preferring placement in s's segment.
func (s MessageSection) NewZone() (ZoneSection, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewZoneSection(s.Struct.Segment())
	if err != nil {
		return ZoneSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Query() (QuerySection, error) {
	p, err := s.Struct.Ptr(0)
	return QuerySection{Struct: p.Struct()}, err
}

func (s MessageSection) HasQuery() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetQuery(v QuerySection) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewQuery sets the query field to a newly
// allocated QuerySection struct, preferring placement in s's segment.
func (s MessageSection) NewQuery() (QuerySection, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewQuerySection(s.Struct.Segment())
	if err != nil {
		return QuerySection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) Notification() (NotificationSection, error) {
	p, err := s.Struct.Ptr(0)
	return NotificationSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasNotification() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetNotification(v NotificationSection) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewNotification sets the notification field to a newly
// allocated NotificationSection struct, preferring placement in s's segment.
func (s MessageSection) NewNotification() (NotificationSection, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewNotificationSection(s.Struct.Segment())
	if err != nil {
		return NotificationSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressQuery() (AddressQuerySection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressQuerySection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressQuery() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressQuery(v AddressQuerySection) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressQuery sets the addressQuery field to a newly
// allocated AddressQuerySection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressQuery() (AddressQuerySection, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewAddressQuerySection(s.Struct.Segment())
	if err != nil {
		return AddressQuerySection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressAssertion() (AddressAssertionSection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressAssertionSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressAssertion() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressAssertion(v AddressAssertionSection) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressAssertion sets the addressAssertion field to a newly
// allocated AddressAssertionSection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressAssertion() (AddressAssertionSection, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewAddressAssertionSection(s.Struct.Segment())
	if err != nil {
		return AddressAssertionSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s MessageSection) AddressZone() (AddressZoneSection, error) {
	p, err := s.Struct.Ptr(0)
	return AddressZoneSection{Struct: p.Struct()}, err
}

func (s MessageSection) HasAddressZone() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSection) SetAddressZone(v AddressZoneSection) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAddressZone sets the addressZone field to a newly
// allocated AddressZoneSection struct, preferring placement in s's segment.
func (s MessageSection) NewAddressZone() (AddressZoneSection, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewAddressZoneSection(s.Struct.Segment())
	if err != nil {
		return AddressZoneSection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MessageSection_List is a list of MessageSection.
type MessageSection_List struct{ capnp.List }

// NewMessageSection creates a new list of MessageSection.
func NewMessageSection_List(s *capnp.Segment, sz int32) (MessageSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return MessageSection_List{l}, err
}

func (s MessageSection_List) At(i int) MessageSection { return MessageSection{s.List.Struct(i)} }

func (s MessageSection_List) Set(i int, v MessageSection) error { return s.List.SetStruct(i, v.Struct) }

// MessageSection_Promise is a wrapper for a MessageSection promised by a client call.
type MessageSection_Promise struct{ *capnp.Pipeline }

func (p MessageSection_Promise) Struct() (MessageSection, error) {
	s, err := p.Pipeline.Struct()
	return MessageSection{s}, err
}

func (p MessageSection_Promise) Assertion() AssertionSection_Promise {
	return AssertionSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Shard() ShardSection_Promise {
	return ShardSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Zone() ZoneSection_Promise {
	return ZoneSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Query() QuerySection_Promise {
	return QuerySection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) Notification() NotificationSection_Promise {
	return NotificationSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressQuery() AddressQuerySection_Promise {
	return AddressQuerySection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressAssertion() AddressAssertionSection_Promise {
	return AddressAssertionSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p MessageSection_Promise) AddressZone() AddressZoneSection_Promise {
	return AddressZoneSection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AssertionSection struct{ capnp.Struct }

// AssertionSection_TypeID is the unique identifier for the type AssertionSection.
const AssertionSection_TypeID = 0xecb99c4b492abf4a

func NewAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func NewRootAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func ReadRootAssertionSection(msg *capnp.Message) (AssertionSection, error) {
	root, err := msg.RootPtr()
	return AssertionSection{root.Struct()}, err
}

func (s AssertionSection) String() string {
	str, _ := text.Marshal(0xecb99c4b492abf4a, s.Struct)
	return str
}

func (s AssertionSection) SubjectName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s AssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(1)
	return Obj_List{List: p.List()}, err
}

func (s AssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s AssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(3, v)
}

func (s AssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s AssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s AssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s AssertionSection) SetContext(v string) error {
	return s.Struct.SetText(4, v)
}

// AssertionSection_List is a list of AssertionSection.
type AssertionSection_List struct{ capnp.List }

// NewAssertionSection creates a new list of AssertionSection.
func NewAssertionSection_List(s *capnp.Segment, sz int32) (AssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return AssertionSection_List{l}, err
}

func (s AssertionSection_List) At(i int) AssertionSection { return AssertionSection{s.List.Struct(i)} }

func (s AssertionSection_List) Set(i int, v AssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AssertionSection_Promise is a wrapper for a AssertionSection promised by a client call.
type AssertionSection_Promise struct{ *capnp.Pipeline }

func (p AssertionSection_Promise) Struct() (AssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AssertionSection{s}, err
}

type ShardSection struct{ capnp.Struct }

// ShardSection_TypeID is the unique identifier for the type ShardSection.
const ShardSection_TypeID = 0xc0d7ec4193d608ef

func NewShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func NewRootShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func ReadRootShardSection(msg *capnp.Message) (ShardSection, error) {
	root, err := msg.RootPtr()
	return ShardSection{root.Struct()}, err
}

func (s ShardSection) String() string {
	str, _ := text.Marshal(0xc0d7ec4193d608ef, s.Struct)
	return str
}

func (s ShardSection) Content() (AssertionSection_List, error) {
	p, err := s.Struct.Ptr(0)
	return AssertionSection_List{List: p.List()}, err
}

func (s ShardSection) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetContent(v AssertionSection_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AssertionSection_List, preferring placement in s's segment.
func (s ShardSection) NewContent(n int32) (AssertionSection_List, error) {
	l, err := NewAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ShardSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(1)
	return Signature_List{List: p.List()}, err
}

func (s ShardSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ShardSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s ShardSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ShardSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ShardSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ShardSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ShardSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s ShardSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ShardSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s ShardSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

func (s ShardSection) RangeFrom() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s ShardSection) HasRangeFrom() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeFromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeFrom(v string) error {
	return s.Struct.SetText(4, v)
}

func (s ShardSection) RangeTo() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s ShardSection) HasRangeTo() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeTo(v string) error {
	return s.Struct.SetText(5, v)
}

// ShardSection_List is a list of ShardSection.
type ShardSection_List struct{ capnp.List }

// NewShardSection creates a new list of ShardSection.
func NewShardSection_List(s *capnp.Segment, sz int32) (ShardSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return ShardSection_List{l}, err
}

func (s ShardSection_List) At(i int) ShardSection { return ShardSection{s.List.Struct(i)} }

func (s ShardSection_List) Set(i int, v ShardSection) error { return s.List.SetStruct(i, v.Struct) }

// ShardSection_Promise is a wrapper for a ShardSection promised by a client call.
type ShardSection_Promise struct{ *capnp.Pipeline }

func (p ShardSection_Promise) Struct() (ShardSection, error) {
	s, err := p.Pipeline.Struct()
	return ShardSection{s}, err
}

type ZoneSection struct{ capnp.Struct }

// ZoneSection_TypeID is the unique identifier for the type ZoneSection.
const ZoneSection_TypeID = 0xcfe323414bf5b98f

func NewZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func NewRootZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func ReadRootZoneSection(msg *capnp.Message) (ZoneSection, error) {
	root, err := msg.RootPtr()
	return ZoneSection{root.Struct()}, err
}

func (s ZoneSection) String() string {
	str, _ := text.Marshal(0xcfe323414bf5b98f, s.Struct)
	return str
}

func (s ZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s ZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ZoneSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ZoneSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ZoneSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ZoneSection) Content() (MessageSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return MessageSection_List{List: p.List()}, err
}

func (s ZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetContent(v MessageSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated MessageSection_List, preferring placement in s's segment.
func (s ZoneSection) NewContent(n int32) (MessageSection_List, error) {
	l, err := NewMessageSection_List(s.Struct.Segment(), n)
	if err != nil {
		return MessageSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// ZoneSection_List is a list of ZoneSection.
type ZoneSection_List struct{ capnp.List }

// NewZoneSection creates a new list of ZoneSection.
func NewZoneSection_List(s *capnp.Segment, sz int32) (ZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return ZoneSection_List{l}, err
}

func (s ZoneSection_List) At(i int) ZoneSection { return ZoneSection{s.List.Struct(i)} }

func (s ZoneSection_List) Set(i int, v ZoneSection) error { return s.List.SetStruct(i, v.Struct) }

// ZoneSection_Promise is a wrapper for a ZoneSection promised by a client call.
type ZoneSection_Promise struct{ *capnp.Pipeline }

func (p ZoneSection_Promise) Struct() (ZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return ZoneSection{s}, err
}

type QuerySection struct{ capnp.Struct }

// QuerySection_TypeID is the unique identifier for the type QuerySection.
const QuerySection_TypeID = 0xcc368c426d5175df

func NewQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return QuerySection{st}, err
}

func NewRootQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return QuerySection{st}, err
}

func ReadRootQuerySection(msg *capnp.Message) (QuerySection, error) {
	root, err := msg.RootPtr()
	return QuerySection{root.Struct()}, err
}

func (s QuerySection) String() string {
	str, _ := text.Marshal(0xcc368c426d5175df, s.Struct)
	return str
}

func (s QuerySection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s QuerySection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s QuerySection) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s QuerySection) HasName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s QuerySection) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s QuerySection) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s QuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s QuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s QuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s QuerySection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s QuerySection) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s QuerySection) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s QuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s QuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s QuerySection) Options() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Int32List{List: p.List()}, err
}

func (s QuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetOptions(v capnp.Int32List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s QuerySection) NewOptions(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// QuerySection_List is a list of QuerySection.
type QuerySection_List struct{ capnp.List }

// NewQuerySection creates a new list of QuerySection.
func NewQuerySection_List(s *capnp.Segment, sz int32) (QuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return QuerySection_List{l}, err
}

func (s QuerySection_List) At(i int) QuerySection { return QuerySection{s.List.Struct(i)} }

func (s QuerySection_List) Set(i int, v QuerySection) error { return s.List.SetStruct(i, v.Struct) }

// QuerySection_Promise is a wrapper for a QuerySection promised by a client call.
type QuerySection_Promise struct{ *capnp.Pipeline }

func (p QuerySection_Promise) Struct() (QuerySection, error) {
	s, err := p.Pipeline.Struct()
	return QuerySection{s}, err
}

type SubjectAddr struct{ capnp.Struct }

// SubjectAddr_TypeID is the unique identifier for the type SubjectAddr.
const SubjectAddr_TypeID = 0xe48faf3beca83da0

func NewSubjectAddr(s *capnp.Segment) (SubjectAddr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SubjectAddr{st}, err
}

func NewRootSubjectAddr(s *capnp.Segment) (SubjectAddr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SubjectAddr{st}, err
}

func ReadRootSubjectAddr(msg *capnp.Message) (SubjectAddr, error) {
	root, err := msg.RootPtr()
	return SubjectAddr{root.Struct()}, err
}

func (s SubjectAddr) String() string {
	str, _ := text.Marshal(0xe48faf3beca83da0, s.Struct)
	return str
}

func (s SubjectAddr) AddressFamily() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SubjectAddr) HasAddressFamily() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SubjectAddr) AddressFamilyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SubjectAddr) SetAddressFamily(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SubjectAddr) PrefixLength() uint32 {
	return s.Struct.Uint32(0)
}

func (s SubjectAddr) SetPrefixLength(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SubjectAddr) Address() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SubjectAddr) HasAddress() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SubjectAddr) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SubjectAddr) SetAddress(v string) error {
	return s.Struct.SetText(1, v)
}

// SubjectAddr_List is a list of SubjectAddr.
type SubjectAddr_List struct{ capnp.List }

// NewSubjectAddr creates a new list of SubjectAddr.
func NewSubjectAddr_List(s *capnp.Segment, sz int32) (SubjectAddr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SubjectAddr_List{l}, err
}

func (s SubjectAddr_List) At(i int) SubjectAddr { return SubjectAddr{s.List.Struct(i)} }

func (s SubjectAddr_List) Set(i int, v SubjectAddr) error { return s.List.SetStruct(i, v.Struct) }

// SubjectAddr_Promise is a wrapper for a SubjectAddr promised by a client call.
type SubjectAddr_Promise struct{ *capnp.Pipeline }

func (p SubjectAddr_Promise) Struct() (SubjectAddr, error) {
	s, err := p.Pipeline.Struct()
	return SubjectAddr{s}, err
}

type AddressAssertionSection struct{ capnp.Struct }

// AddressAssertionSection_TypeID is the unique identifier for the type AddressAssertionSection.
const AddressAssertionSection_TypeID = 0xdbf0b70cd25804f1

func NewAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func NewRootAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func ReadRootAddressAssertionSection(msg *capnp.Message) (AddressAssertionSection, error) {
	root, err := msg.RootPtr()
	return AddressAssertionSection{root.Struct()}, err
}

func (s AddressAssertionSection) String() string {
	str, _ := text.Marshal(0xdbf0b70cd25804f1, s.Struct)
	return str
}

func (s AddressAssertionSection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressAssertionSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressAssertionSection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressAssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(1)
	return Obj_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AddressAssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AddressAssertionSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

// AddressAssertionSection_List is a list of AddressAssertionSection.
type AddressAssertionSection_List struct{ capnp.List }

// NewAddressAssertionSection creates a new list of AddressAssertionSection.
func NewAddressAssertionSection_List(s *capnp.Segment, sz int32) (AddressAssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressAssertionSection_List{l}, err
}

func (s AddressAssertionSection_List) At(i int) AddressAssertionSection {
	return AddressAssertionSection{s.List.Struct(i)}
}

func (s AddressAssertionSection_List) Set(i int, v AddressAssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressAssertionSection_Promise is a wrapper for a AddressAssertionSection promised by a client call.
type AddressAssertionSection_Promise struct{ *capnp.Pipeline }

func (p AddressAssertionSection_Promise) Struct() (AddressAssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressAssertionSection{s}, err
}

func (p AddressAssertionSection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddressZoneSection struct{ capnp.Struct }

// AddressZoneSection_TypeID is the unique identifier for the type AddressZoneSection.
const AddressZoneSection_TypeID = 0xb6e3b8602914cca6

func NewAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func NewRootAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func ReadRootAddressZoneSection(msg *capnp.Message) (AddressZoneSection, error) {
	root, err := msg.RootPtr()
	return AddressZoneSection{root.Struct()}, err
}

func (s AddressZoneSection) String() string {
	str, _ := text.Marshal(0xb6e3b8602914cca6, s.Struct)
	return str
}

func (s AddressZoneSection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressZoneSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressZoneSection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(1)
	return Signature_List{List: p.List()}, err
}

func (s AddressZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AddressZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressZoneSection) Content() (AddressAssertionSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return AddressAssertionSection_List{List: p.List()}, err
}

func (s AddressZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetContent(v AddressAssertionSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AddressAssertionSection_List, preferring placement in s's segment.
func (s AddressZoneSection) NewContent(n int32) (AddressAssertionSection_List, error) {
	l, err := NewAddressAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AddressAssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// AddressZoneSection_List is a list of AddressZoneSection.
type AddressZoneSection_List struct{ capnp.List }

// NewAddressZoneSection creates a new list of AddressZoneSection.
func NewAddressZoneSection_List(s *capnp.Segment, sz int32) (AddressZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressZoneSection_List{l}, err
}

func (s AddressZoneSection_List) At(i int) AddressZoneSection {
	return AddressZoneSection{s.List.Struct(i)}
}

func (s AddressZoneSection_List) Set(i int, v AddressZoneSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressZoneSection_Promise is a wrapper for a AddressZoneSection promised by a client call.
type AddressZoneSection_Promise struct{ *capnp.Pipeline }

func (p AddressZoneSection_Promise) Struct() (AddressZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressZoneSection{s}, err
}

func (p AddressZoneSection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddressQuerySection struct{ capnp.Struct }

// AddressQuerySection_TypeID is the unique identifier for the type AddressQuerySection.
const AddressQuerySection_TypeID = 0xaa95f2c2154f801a

func NewAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return AddressQuerySection{st}, err
}

func NewRootAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return AddressQuerySection{st}, err
}

func ReadRootAddressQuerySection(msg *capnp.Message) (AddressQuerySection, error) {
	root, err := msg.RootPtr()
	return AddressQuerySection{root.Struct()}, err
}

func (s AddressQuerySection) String() string {
	str, _ := text.Marshal(0xaa95f2c2154f801a, s.Struct)
	return str
}

func (s AddressQuerySection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressQuerySection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressQuerySection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressQuerySection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s AddressQuerySection) HasToken() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetToken(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s AddressQuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressQuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressQuerySection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressQuerySection) Types() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s AddressQuerySection) SetTypes(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s AddressQuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s AddressQuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s AddressQuerySection) Options() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Int32List{List: p.List()}, err
}

func (s AddressQuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetOptions(v capnp.Int32List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s AddressQuerySection) NewOptions(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// AddressQuerySection_List is a list of AddressQuerySection.
type AddressQuerySection_List struct{ capnp.List }

// NewAddressQuerySection creates a new list of AddressQuerySection.
func NewAddressQuerySection_List(s *capnp.Segment, sz int32) (AddressQuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return AddressQuerySection_List{l}, err
}

func (s AddressQuerySection_List) At(i int) AddressQuerySection {
	return AddressQuerySection{s.List.Struct(i)}
}

func (s AddressQuerySection_List) Set(i int, v AddressQuerySection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressQuerySection_Promise is a wrapper for a AddressQuerySection promised by a client call.
type AddressQuerySection_Promise struct{ *capnp.Pipeline }

func (p AddressQuerySection_Promise) Struct() (AddressQuerySection, error) {
	s, err := p.Pipeline.Struct()
	return AddressQuerySection{s}, err
}

func (p AddressQuerySection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type NotificationSection struct{ capnp.Struct }

// NotificationSection_TypeID is the unique identifier for the type NotificationSection.
const NotificationSection_TypeID = 0x844542c0bc50f248

func NewNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func NewRootNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func ReadRootNotificationSection(msg *capnp.Message) (NotificationSection, error) {
	root, err := msg.RootPtr()
	return NotificationSection{root.Struct()}, err
}

func (s NotificationSection) String() string {
	str, _ := text.Marshal(0x844542c0bc50f248, s.Struct)
	return str
}

func (s NotificationSection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s NotificationSection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NotificationSection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s NotificationSection) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s NotificationSection) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s NotificationSection) Data() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s NotificationSection) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NotificationSection) DataBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s NotificationSection) SetData(v string) error {
	return s.Struct.SetText(1, v)
}

// NotificationSection_List is a list of NotificationSection.
type NotificationSection_List struct{ capnp.List }

// NewNotificationSection creates a new list of NotificationSection.
func NewNotificationSection_List(s *capnp.Segment, sz int32) (NotificationSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return NotificationSection_List{l}, err
}

func (s NotificationSection_List) At(i int) NotificationSection {
	return NotificationSection{s.List.Struct(i)}
}

func (s NotificationSection_List) Set(i int, v NotificationSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// NotificationSection_Promise is a wrapper for a NotificationSection promised by a client call.
type NotificationSection_Promise struct{ *capnp.Pipeline }

func (p NotificationSection_Promise) Struct() (NotificationSection, error) {
	s, err := p.Pipeline.Struct()
	return NotificationSection{s}, err
}

type Signature struct{ capnp.Struct }

// Signature_TypeID is the unique identifier for the type Signature.
const Signature_TypeID = 0xcf61cf65228728bc

func NewSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func NewRootSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func ReadRootSignature(msg *capnp.Message) (Signature, error) {
	root, err := msg.RootPtr()
	return Signature{root.Struct()}, err
}

func (s Signature) String() string {
	str, _ := text.Marshal(0xcf61cf65228728bc, s.Struct)
	return str
}

func (s Signature) KeySpace() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Signature) SetKeySpace(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Signature) Algorithm() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s Signature) SetAlgorithm(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s Signature) ValidSince() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Signature) SetValidSince(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Signature) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s Signature) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s Signature) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Signature) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Signature) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Signature_List is a list of Signature.
type Signature_List struct{ capnp.List }

// NewSignature creates a new list of Signature.
func NewSignature_List(s *capnp.Segment, sz int32) (Signature_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Signature_List{l}, err
}

func (s Signature_List) At(i int) Signature { return Signature{s.List.Struct(i)} }

func (s Signature_List) Set(i int, v Signature) error { return s.List.SetStruct(i, v.Struct) }

// Signature_Promise is a wrapper for a Signature promised by a client call.
type Signature_Promise struct{ *capnp.Pipeline }

func (p Signature_Promise) Struct() (Signature, error) {
	s, err := p.Pipeline.Struct()
	return Signature{s}, err
}

type PublicKey struct{ capnp.Struct }

// PublicKey_TypeID is the unique identifier for the type PublicKey.
const PublicKey_TypeID = 0x8cfae4b3459db40f

func NewPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func NewRootPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func ReadRootPublicKey(msg *capnp.Message) (PublicKey, error) {
	root, err := msg.RootPtr()
	return PublicKey{root.Struct()}, err
}

func (s PublicKey) String() string {
	str, _ := text.Marshal(0x8cfae4b3459db40f, s.Struct)
	return str
}

func (s PublicKey) KeySpace() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s PublicKey) SetKeySpace(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s PublicKey) Type() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s PublicKey) SetType(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s PublicKey) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PublicKey) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PublicKey) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PublicKey) ValidSince() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s PublicKey) SetValidSince(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s PublicKey) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s PublicKey) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

// PublicKey_List is a list of PublicKey.
type PublicKey_List struct{ capnp.List }

// NewPublicKey creates a new list of PublicKey.
func NewPublicKey_List(s *capnp.Segment, sz int32) (PublicKey_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PublicKey_List{l}, err
}

func (s PublicKey_List) At(i int) PublicKey { return PublicKey{s.List.Struct(i)} }

func (s PublicKey_List) Set(i int, v PublicKey) error { return s.List.SetStruct(i, v.Struct) }

// PublicKey_Promise is a wrapper for a PublicKey promised by a client call.
type PublicKey_Promise struct{ *capnp.Pipeline }

func (p PublicKey_Promise) Struct() (PublicKey, error) {
	s, err := p.Pipeline.Struct()
	return PublicKey{s}, err
}

type CertificateObject struct{ capnp.Struct }

// CertificateObject_TypeID is the unique identifier for the type CertificateObject.
const CertificateObject_TypeID = 0xfb92513472887325

func NewCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CertificateObject{st}, err
}

func NewRootCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1})
	return CertificateObject{st}, err
}

func ReadRootCertificateObject(msg *capnp.Message) (CertificateObject, error) {
	root, err := msg.RootPtr()
	return CertificateObject{root.Struct()}, err
}

func (s CertificateObject) String() string {
	str, _ := text.Marshal(0xfb92513472887325, s.Struct)
	return str
}

func (s CertificateObject) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s CertificateObject) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s CertificateObject) Usage() int32 {
	return int32(s.Struct.Uint32(4))
}

func (s CertificateObject) SetUsage(v int32) {
	s.Struct.SetUint32(4, uint32(v))
}

func (s CertificateObject) HashAlgo() int32 {
	return int32(s.Struct.Uint32(8))
}

func (s CertificateObject) SetHashAlgo(v int32) {
	s.Struct.SetUint32(8, uint32(v))
}

func (s CertificateObject) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertificateObject) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertificateObject) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertificateObject_List is a list of CertificateObject.
type CertificateObject_List struct{ capnp.List }

// NewCertificateObject creates a new list of CertificateObject.
func NewCertificateObject_List(s *capnp.Segment, sz int32) (CertificateObject_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 1}, sz)
	return CertificateObject_List{l}, err
}

func (s CertificateObject_List) At(i int) CertificateObject {
	return CertificateObject{s.List.Struct(i)}
}

func (s CertificateObject_List) Set(i int, v CertificateObject) error {
	return s.List.SetStruct(i, v.Struct)
}

// CertificateObject_Promise is a wrapper for a CertificateObject promised by a client call.
type CertificateObject_Promise struct{ *capnp.Pipeline }

func (p CertificateObject_Promise) Struct() (CertificateObject, error) {
	s, err := p.Pipeline.Struct()
	return CertificateObject{s}, err
}

type ServiceInfo struct{ capnp.Struct }

// ServiceInfo_TypeID is the unique identifier for the type ServiceInfo.
const ServiceInfo_TypeID = 0xeab015ca8107699b

func NewServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func NewRootServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func ReadRootServiceInfo(msg *capnp.Message) (ServiceInfo, error) {
	root, err := msg.RootPtr()
	return ServiceInfo{root.Struct()}, err
}

func (s ServiceInfo) String() string {
	str, _ := text.Marshal(0xeab015ca8107699b, s.Struct)
	return str
}

func (s ServiceInfo) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceInfo) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfo) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ServiceInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s ServiceInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s ServiceInfo) Priority() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfo) SetPriority(v uint32) {
	s.Struct.SetUint32(4, v)
}

// ServiceInfo_List is a list of ServiceInfo.
type ServiceInfo_List struct{ capnp.List }

// NewServiceInfo creates a new list of ServiceInfo.
func NewServiceInfo_List(s *capnp.Segment, sz int32) (ServiceInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfo_List{l}, err
}

func (s ServiceInfo_List) At(i int) ServiceInfo { return ServiceInfo{s.List.Struct(i)} }

func (s ServiceInfo_List) Set(i int, v ServiceInfo) error { return s.List.SetStruct(i, v.Struct) }

// ServiceInfo_Promise is a wrapper for a ServiceInfo promised by a client call.
type ServiceInfo_Promise struct{ *capnp.Pipeline }

func (p ServiceInfo_Promise) Struct() (ServiceInfo, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfo{s}, err
}

type Obj struct{ capnp.Struct }
type Obj_value Obj
type Obj_value_Which uint16

const (
	Obj_value_Which_name    Obj_value_Which = 0
	Obj_value_Which_ip6     Obj_value_Which = 1
	Obj_value_Which_ip4     Obj_value_Which = 2
	Obj_value_Which_redir   Obj_value_Which = 3
	Obj_value_Which_deleg   Obj_value_Which = 4
	Obj_value_Which_nameset Obj_value_Which = 5
	Obj_value_Which_cert    Obj_value_Which = 6
	Obj_value_Which_service Obj_value_Which = 7
	Obj_value_Which_regr    Obj_value_Which = 8
	Obj_value_Which_regt    Obj_value_Which = 9
	Obj_value_Which_infra   Obj_value_Which = 10
	Obj_value_Which_extra   Obj_value_Which = 11
)

func (w Obj_value_Which) String() string {
	const s = "nameip6ip4redirdelegnamesetcertserviceregrregtinfraextra"
	switch w {
	case Obj_value_Which_name:
		return s[0:4]
	case Obj_value_Which_ip6:
		return s[4:7]
	case Obj_value_Which_ip4:
		return s[7:10]
	case Obj_value_Which_redir:
		return s[10:15]
	case Obj_value_Which_deleg:
		return s[15:20]
	case Obj_value_Which_nameset:
		return s[20:27]
	case Obj_value_Which_cert:
		return s[27:31]
	case Obj_value_Which_service:
		return s[31:38]
	case Obj_value_Which_regr:
		return s[38:42]
	case Obj_value_Which_regt:
		return s[42:46]
	case Obj_value_Which_infra:
		return s[46:51]
	case Obj_value_Which_extra:
		return s[51:56]

	}
	return "Obj_value_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Obj_TypeID is the unique identifier for the type Obj.
const Obj_TypeID = 0xeb2fd278248964aa

func NewObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func NewRootObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func ReadRootObj(msg *capnp.Message) (Obj, error) {
	root, err := msg.RootPtr()
	return Obj{root.Struct()}, err
}

func (s Obj) String() string {
	str, _ := text.Marshal(0xeb2fd278248964aa, s.Struct)
	return str
}

func (s Obj) Type() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s Obj) SetType(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

func (s Obj) Value() Obj_value { return Obj_value(s) }

func (s Obj_value) Which() Obj_value_Which {
	return Obj_value_Which(s.Struct.Uint16(4))
}
func (s Obj_value) Name() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.TextList{List: p.List()}, err
}

func (s Obj_value) HasName() bool {
	if s.Struct.Uint16(4) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetName(v capnp.TextList) error {
	s.Struct.SetUint16(4, 0)
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewName sets the name field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s Obj_value) NewName(n int32) (capnp.TextList, error) {
	s.Struct.SetUint16(4, 0)
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s Obj_value) Ip6() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasIp6() bool {
	if s.Struct.Uint16(4) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) Ip6Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetIp6(v string) error {
	s.Struct.SetUint16(4, 1)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Ip4() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasIp4() bool {
	if s.Struct.Uint16(4) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) Ip4Bytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetIp4(v string) error {
	s.Struct.SetUint16(4, 2)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Redir() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRedir() bool {
	if s.Struct.Uint16(4) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RedirBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRedir(v string) error {
	s.Struct.SetUint16(4, 3)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Deleg() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasDeleg() bool {
	if s.Struct.Uint16(4) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetDeleg(v PublicKey) error {
	s.Struct.SetUint16(4, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewDeleg sets the deleg field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewDeleg() (PublicKey, error) {
	s.Struct.SetUint16(4, 4)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Nameset() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasNameset() bool {
	if s.Struct.Uint16(4) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) NamesetBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetNameset(v string) error {
	s.Struct.SetUint16(4, 5)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Cert() (CertificateObject, error) {
	p, err := s.Struct.Ptr(0)
	return CertificateObject{Struct: p.Struct()}, err
}

func (s Obj_value) HasCert() bool {
	if s.Struct.Uint16(4) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetCert(v CertificateObject) error {
	s.Struct.SetUint16(4, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewCert sets the cert field to a newly
// allocated CertificateObject struct, preferring placement in s's segment.
func (s Obj_value) NewCert() (CertificateObject, error) {
	s.Struct.SetUint16(4, 6)
	ss, err := NewCertificateObject(s.Struct.Segment())
	if err != nil {
		return CertificateObject{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Service() (ServiceInfo, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceInfo{Struct: p.Struct()}, err
}

func (s Obj_value) HasService() bool {
	if s.Struct.Uint16(4) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetService(v ServiceInfo) error {
	s.Struct.SetUint16(4, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewService sets the service field to a newly
// allocated ServiceInfo struct, preferring placement in s's segment.
func (s Obj_value) NewService() (ServiceInfo, error) {
	s.Struct.SetUint16(4, 7)
	ss, err := NewServiceInfo(s.Struct.Segment())
	if err != nil {
		return ServiceInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Regr() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRegr() bool {
	if s.Struct.Uint16(4) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RegrBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRegr(v string) error {
	s.Struct.SetUint16(4, 8)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Regt() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Obj_value) HasRegt() bool {
	if s.Struct.Uint16(4) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) RegtBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Obj_value) SetRegt(v string) error {
	s.Struct.SetUint16(4, 9)
	return s.Struct.SetText(0, v)
}

func (s Obj_value) Infra() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasInfra() bool {
	if s.Struct.Uint16(4) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetInfra(v PublicKey) error {
	s.Struct.SetUint16(4, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewInfra sets the infra field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewInfra() (PublicKey, error) {
	s.Struct.SetUint16(4, 10)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Obj_value) Extra() (PublicKey, error) {
	p, err := s.Struct.Ptr(0)
	return PublicKey{Struct: p.Struct()}, err
}

func (s Obj_value) HasExtra() bool {
	if s.Struct.Uint16(4) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj_value) SetExtra(v PublicKey) error {
	s.Struct.SetUint16(4, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewExtra sets the extra field to a newly
// allocated PublicKey struct, preferring placement in s's segment.
func (s Obj_value) NewExtra() (PublicKey, error) {
	s.Struct.SetUint16(4, 11)
	ss, err := NewPublicKey(s.Struct.Segment())
	if err != nil {
		return PublicKey{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Obj_List is a list of Obj.
type Obj_List struct{ capnp.List }

// NewObj creates a new list of Obj.
func NewObj_List(s *capnp.Segment, sz int32) (Obj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Obj_List{l}, err
}

func (s Obj_List) At(i int) Obj { return Obj{s.List.Struct(i)} }

func (s Obj_List) Set(i int, v Obj) error { return s.List.SetStruct(i, v.Struct) }

// Obj_Promise is a wrapper for a Obj promised by a client call.
type Obj_Promise struct{ *capnp.Pipeline }

func (p Obj_Promise) Struct() (Obj, error) {
	s, err := p.Pipeline.Struct()
	return Obj{s}, err
}

func (p Obj_Promise) Value() Obj_value_Promise { return Obj_value_Promise{p.Pipeline} }

// Obj_value_Promise is a wrapper for a Obj_value promised by a client call.
type Obj_value_Promise struct{ *capnp.Pipeline }

func (p Obj_value_Promise) Struct() (Obj_value, error) {
	s, err := p.Pipeline.Struct()
	return Obj_value{s}, err
}

func (p Obj_value_Promise) Deleg() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Cert() CertificateObject_Promise {
	return CertificateObject_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Service() ServiceInfo_Promise {
	return ServiceInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Infra() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Obj_value_Promise) Extra() PublicKey_Promise {
	return PublicKey_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_fb2d77234707241e = "x\xda\xacX\x7f\x8cTW\x15>\xe7\xdd\x99}\xc3\xee" +
	",3\xb3o\x96X\xffp\x0d\xa5\x89\xddd[\xba[" +
	"\x9bX5\xdb\x1d\xa5\x96\x05\xca^f\x89\xb8\xa1\x09o" +
	"g.\xb3o\x99}3\xbcyKw\x1a6\xd0\x04\"" +
	"\x18\x9aV[\x0cDHhR*4%\xa5JU\"" +
	"F4m\xacM\x09m\xd3\xaa(U\x9b\xd2\xd4(\x8d" +
	"\xb4)\x8a\x8b\xf5\x99\xf3\xe6\xfd\xb83;\x0bK\xf4\xaf" +
	"\xdd\xb9\xe7\xbb\xef\x9d\xf3\x9ds\xbfs\xee[z\xb8\xe5" +
	"\x1e\xe5\x8eh\xbf\x0a\xc0\x87\xa3-\xce}\x1f\x0d\x9d:" +
	"\x9dY\xb6\x03x'\xa2\xf3\x99%\xea\xd7n~\xb0\xe7" +
	"*D\x15\x15\xa0o'\x1bDm?S\x01\xb4\xbd\xec" +
	"9@'q\xe2\xe0\xb2\x1f^\x98\xd9Ch&\xa1\x91" +
	" =\x91\x19\xed\x0b\x11\xda\xf7\xf9H\x17\x02:\x9f\xde" +
	"\xbe\xba\xf3\x97\x1f\xed}\x86\xd0\x8a\x84v1<:\x88" +
	"\x9a\x88\xd2\xbfz\xf4\xeb\x04\x7f\xfa\xd5\xf4\xad\x1b~\xf2" +
	"\xee\x8f \xd5\x89\x8d\xe8_\xb4dP{\xbd\x85^s" +
	"\xa6\xe5}@\xa7\xa7\xf3\xec\xae\xdf?\xd4\xf9\xb3f\xe0" +
	"_\xab\x1d\xa8\x9dS\x09\xfc\x96J\xe0\xbf\xc7~\xf3\xf8" +
	"\xc0\xc5\xdf\x9en\x00\xd3\xe3\xfa\xde\x89u\xa0\xf6a\x8c" +
	"\xfe\xfd \xe6\xfa\xf1\xa7I>\x91\xd9s\xd7\xabM\xdd" +
	"\x16\xad\x1d\xa8M\xb6\xd2\xbf\x9b[]\xf8\xa9\xcf}s" +
	"\xb18\xab\x9fm\xca\xc9\x99\xb6\x19\xed\\\x1b\xa1\xdfj" +
	"s9y\xf4\xe4\xe5\x15\x037\xbf{\xb6\x99\xdf\x97\xe3" +
	"\xad\xa8E\xdbi\x1f\xb6\x93\xdf\x1fF\xd6\xbd\x11\xff\xf1" +
	"\xa5?4\x03\x7f\xd2>\x8eZj!\x81\xdb\x17\x12\xf8" +
	"\xd0\x97\x8f\\\xfc\xe2s\x8f^h\x9a\xc9\x05\x89V\xd4" +
	"nJ\x10\xba3A\x99l\xfd\xe9\xf0\x03\x8f\xff\xe0\x8f" +
	"\xef\x01\xbf\x09\xd1y&\xbf{\xc9\xd4\x1b\xb7\xff\x0d\xd6" +
	"\xa2\x8aqT\xb4\x17\x123\x80}'\x13\xdfW\x00\x9d" +
	"\xef\x19\xea\xc3\xaft\x1e\xffk\xe3\x93)\xc2\xbe\xe9\x8e" +
	"V\xd4\x1e\xe9\xa0'\xef\xee\xa0'\x07\xcfj\x82\xd6n" +
	"\xd1^\xd1\xee\xd0\xdcj\xd1\x1e\x04t\x06\x7f\xde\xbd|" +
	"\xc5\x81\x93\x17\x1b\"t\xcbbB\xebEm\x9a\xc0}" +
	"U\xcd%\xef\xfc\xdb\xe3O\xab\xdf\xbd\xf4q\xc3\xa3\x97" +
	"\xa1\x1a\x03\xe8{!\xbd\x18\xb5\x97\xd2n\xb9\xa4\x7fE" +
	"\xf8[*\xbb\xac;\xf9w\xae6f\xd2u\xfc\xe0\xa2" +
	"\xbbQ;\xb6\x88|9\xba\xe8}\xe8q\xcaV\xc9." +
	"\xddn\xe9\x11\xc3\xac\xac\xaa\x14n\xcb\xe9e\xb3|\xf7" +
	"\xfd%\xdb\xd8h\xe4t\xdb(\x99Y\x91\xa3?\x00C" +
	"\x88<\xce\"\x00\x11\x04H-\xeb\x05\xe0\xf70\xe4+" +
	"\x15DL#\xad-\xef\x06\xe0_e\xc8\x87\x14L)" +
	"\x98F\x05 \xb5\x8a\x16\xefc\xc8\x87\x15\xec\xb2K\x9b" +
	"\x84\x89\xed\xa0`;`\xc2\xae\x96\x05F@\xc1\x08`" +
	"\"\xaf\xdb:\xc6A\xc18`\xe0\x96R\xe7\xd6\xd0\xe4" +
	"h\x7f\xd1\xc8\xad\x10U\xf2%\x1d\xf82=\x08\xc0\xb7" +
	"2\xe4\xbb\x14L\xf9\xce\xec\xa4\xf7ng\xc8\xf7(\x88" +
	"J\xcd\x97\xdd\x8b\x01\xf8\x0e\x86\xfc1\x05S\x0c\xd3\xc8" +
	"\x00R\x8f\x8c\x00\xf0=\x0c\xf9>\x05S\x11%\x8d\x11" +
	"\x80\xd4^Z|\x82!?\xa4\xa0\xb3IT\xb3e=" +
	"'\x00 pW\xf6]\xdd$\xaa~P\xce\x16\xbdh" +
	"\xe4\xb3\x86\x09,'0\x0a\x0aF\xfd\xc5\xb5\xa6\x0d\xcc" +
	"(\x06\x8b\xcd\xb9\x1f\xc8\xe7-Q\xa9\xf0IaU\xeb" +
	"\xb8\xffT\x10\xef\xfeQ\x00\xbe\x8f!\x7fJ\x8a\xf7I" +
	"J\xc8\x01\x86\xfc\x08\x91\xef\x05|8\x03\xc0\x0f1\xe4" +
	"\xcf*\x88\xac\x16\xefQ\x02>\xc5\x90\x1f\xa7x\xb1\x16" +
	"\xef1\x02\x1ea\xc8O(\x98\x8a\xb24F\x01R\xcf" +
	"\xd3\xe2\xb3\x0c\xf9\xcb\x0a:\x95\xc9\xd1q\x91\xb3\x07@" +
	"\xcd\xe7-L\x86G\x0f\x10\x93\xd0\x90\xdam\xb9\x92i" +
	"\x8b)\xdbOh\x17\xd1U\xf1\xf9\xda&\xa6\xca\x86%" +
	"*>\x13\xdbJe\x0a\xb3\x82\x0b\x01\x87\x18\xba\xb0\x85" +
	"\xd7#h\xa4d\x0a\x9f\x1f\xa2'\x19\xd0\xa3\x13=\x1b" +
	"\x18\xf2\xa2D\x8fA\x09\x1dc\xc8wH\xf4<\x9c\x91" +
	"\x0a\x87y\xfc\xec\xccx\x85s\xe0\xfaQ;\x15\xa3`" +
	"\xea\xf6\xa4\x05L\x04\xee'Cy\x04\xa4\xc5F6j" +
	"\xbfM;\xdc\x10\x88^mC\x109\xab\x8b|\x8dN" +
	"?E\xa5\xa2\x17P4\xc4LI]\xcf\x90\x8fI1" +
	"\x8b\x8cG\xc4V)\xe6*\x111\xc5\x90?!\xc5\xfc" +
	"\xedq\x00\xfeX\xadN\x9aeR\xf65\x10$\xcf\xd7" +
	"yQ\xe0\xe4\xf4\xb2>j\x14\x0dH\xd8F\x88\x8b7" +
	"d\xba>\xde\xec\x98n\xe5k9F\xb3\xe1\x08d\xbc" +
	"\xf3y\\\x8a\xf7\xd8HX\xafA\xbc/Q5\xbc\xc8" +
	"\x90\xbf&\xc5{\x86\xb6\xbf\xcc\x90\xbfIg R;" +
	"\x03\xaf\xaf\x01\xe0\xaf1\xe4\xe7\xe9\x0cDkg\xe0\x1c" +
	"!\xdfd\xc8\xff\xac4\xe1\"\x90\xf2\x1b\xe2\xc2+\xaa" +
	"\x11PK\xa6\xa8/\x8a\xb0H\x1cK7\x0b\xe2^\xab" +
	"\x048\x11`\xdc\xb5\xe1\xd2,\x9d\xac\xe7M\xd2\x8eY" +
	"\xbc\xf5\x86\xba\x16\xf0v\xb0[\xd2\x13\x9f\xb7'3\xa1" +
	"\x9e\xf8\xd2q\xb8;\x94\x93@:\x8ef$=\xf1\xa5" +
	"#\xd0\x93\x17g\xa9\xbe\xa9O\xcc\x19t\x9d\xac\xde\xa8" +
	"L\xd47\x8b\xacQ\xe8ws!\xe6\xd3,\xd6H\x8d" +
	"\xc1\xef\\u\x8d\x81)5\x0a\xe4\xc6\x80^\xe1\xc8\xfc" +
	"5k\x16\x8e^,\x94,\xc3\x1e\xa3T\xfak\xf3\xee" +
	"\x13\xb5\xce\xe8\xb7\x97\xe6\x19\x97\xc5\xb0Q\x0dG$\x11" +
	"\xf0\xe3\xad\x8ez\"p\x83j\xf8\xff+\xef\xeb\xeb\xca" +
	"5\xd5\x7f\xa0R\x11\x967\x9e$\xe8\xef|Z\x00\x85" +
	"\x92g\xc8\xb7KAO\x8fxA\xef\x93\x82\xde\x9b\xf1" +
	"\xe4p\x1e-`v \xc10x#\xa20\xeb\xf8\xcf" +
	"!\x89\x9e3\xf9\xbc5k\"\xb3\xc2\xe9\xcb\x0fy\x15" +
	"\xe9\xfaJ\x86|\x9dT\xd7k)\xba!\x86|\xbd\x82" +
	"\x8e^\xe3\xf3^\xe8\xd2'\x8cbUz\xbd\xd8hL" +
	"\xad\x14\x900\x0b\xf6\x18\xc6@\xc1\x18\xe06\x0f~\x9d" +
	"Am\xf5\xe8x\xffm[\xf4\xe2\xa4\xe0KY$\xee" +
	"8\xae7\xda\x00v\x03d\xbf\x84\x0c\xb3\xebP\xc1v" +
	"\xfc\x8f\xe3z\xa4\xad\xc5\xc5\x00\xd9!2\xac'\x83\xf2" +
	"\x89\xe3&B\xfb\x86k\x18&\xc3\x062\xb0\x7f;\xee" +
	"\x91\xd3\x1e\xc0^\x80\xec:2\xe4\xc9\x10\xb9\xea\xb8\xc2" +
	"\xa3\xe9\xaea=\x19\xc6\xc8\x10\x9dq\xd2\xd8\x02\xa0\x09" +
	"\xcc\x00d7\x90\xa1H\x86\x96\x7f9iw<7\\" +
	"\xaf\xf2d(\x93A\xbd\xe2\xa41\x06\xa0M\xb8;\xc6" +
	"\xc8`\x93!\xf6O'\x8d\x0b\x00\xb4\xcd\xee\x8e\"\x19" +
	"\xa6\xc8\xb0\xe0\x1fN\x1a[\x01\xb4I\xd7P&\xc3V" +
	"2\xb4^v\xd2\xd8\x06\xa0U]\xafl2l'C" +
	"\xdb\xc7N\x1a\xe3\x00\xda\xb4k\x98\"\xc3\x0eT<q" +
	"\xaco\x8e\xaaQ\xbe\xcb\xe7[5\xcaw\x063\x95%" +
	"\xf2\x86\x15\xfc\xca\x8b\xa2(`2\xbc\xaez\xe5IO" +
	"\xac\x88Pas\xc2\xb21\x19^\x13<XEX[" +
	"\x8c\x9c\xc0dx\xf3\xa9Y\x12\x96(\x04o\xa1\x1f\xe1" +
	"Pg\x98\x1b-}\xf6+\xbb\xc4\x94\xddl}\xae\x92" +
	"\xae\xbdy\xb9\xb9\xb14\xab\xa4\xbb\xe7{\xc9\x18\x0c\xeb" +
	"\xbc\xae\xc1$\xca%\xcbF\x15\x14T]\x07\x0c\xd2\xe1" +
	"*i\xb3W\xd1sWp\xcd\x99X\xe0\xcc\xad\xf4\xe2" +
	"%\x0c\xf9Rr\x06\xa5\xebd\xaa\xa7\x17\x94\xba\xd6\xd5" +
	"\xe5\x16\xff\x1c\x01K\xda\xd5\x95\xf3\xb5KjP\xa3\xcd" +
	"\x1a\x94$\xc3\x81v\xed\x1f\xf1\xfa\xce\x09I\xbb\x9e\xa7" +
	"\xed\xc7\x19\xf2S\xd2hs\x92\xb6\x9f`\xc8O\x87\x82" +
	"v?\xa8\xb3:\xf1\xff,c\xf3\x9cm\x9a\x13S\x1b" +
	"m\xddF\xa6z\xb4|\xd6\x95\x0f\x97\x17y<\xabI" +
	"\x07\xad\x9e\xeb\x0d\xe7\xb3\x9an\x103oS\xae~\xc7" +
	"\x90_\xf0E\x83\xa8y\x87\xb0\xe7\x19\xf2\xbf\xf8\x8aA" +
	"\xdc\xbcG\x1ay\x81!\xbf\xe4\xcb\x05\x0d0\x1f\xd0\xea" +
	"E\x86\xfc\x8a\xaf\x15-\x00\xa9\xcb\xdf\x02\xe0W\x18f" +
	"#\x81R\xb8_.p\x14`\x0d\x1d\xe28\x92\xa6z" +
	"\x09\x064\x1bfD:\x1d\x15\x9aj1\x19~\xa0\xf1" +
	"\xce\xd9CDX2\xfcX\xe2\xc17\xd30\x87\xc9\xf0" +
	"\x0b\x8dw\x98L\xef\x8e\x0en\xfb\xc3d\xf8U\xcb\x03" +
	"xR\xcd!\xe1=!\xf84U\x0f\x18@\xbf\x1e\x01" +
	"\x1a\xae\"\x12\xcaKh2\xfcbu\xcdC\xfd\x15z" +
	"\xa2\xfb\x09A\xf4\xafv+\xa2\xa1Aw7\xbb\xaf\xf4" +
	"J]\xdb/rc\xd0\xbb\xb8\xd9\xe1\x1c\xba\x99v\x17" +
	"\x19\xf2)\xa5~d\xec\x9a\xa4\x02\x0af\xac1\xbd2" +
	"6P,\x94\xe4\x8b\xbb<M\xfd7\x00\x00\xff\xff\x8a" +
	"C\xb4u"

func init() {
	schemas.Register(schema_fb2d77234707241e,
		0x844542c0bc50f248,
		0x8cfae4b3459db40f,
		0xaa95f2c2154f801a,
		0xb6e3b8602914cca6,
		0xbd157ada88cf152d,
		0xc0d7ec4193d608ef,
		0xcc368c426d5175df,
		0xcf61cf65228728bc,
		0xcfe323414bf5b98f,
		0xdbf0b70cd25804f1,
		0xe48faf3beca83da0,
		0xe5deb2935d54bb0a,
		0xeab015ca8107699b,
		0xeb2fd278248964aa,
		0xecb99c4b492abf4a,
		0xf4f09607a66adddc,
		0xfb92513472887325)
}
