// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	context "golang.org/x/net/context"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
	server "zombiezen.com/go/capnproto2/server"
)

// Constants defined in rainsMsg.capnp.
const (
	NoCapability = ""
	TLSOverTCP   = "urn:x-rains:tlssrv"
)

type RainsMessage struct{ capnp.Struct }

// RainsMessage_TypeID is the unique identifier for the type RainsMessage.
const RainsMessage_TypeID = 0xbd157ada88cf152d

func NewRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func NewRootRainsMessage(s *capnp.Segment) (RainsMessage, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return RainsMessage{st}, err
}

func ReadRootRainsMessage(msg *capnp.Message) (RainsMessage, error) {
	root, err := msg.RootPtr()
	return RainsMessage{root.Struct()}, err
}

func (s RainsMessage) String() string {
	str, _ := text.Marshal(0xbd157ada88cf152d, s.Struct)
	return str
}

func (s RainsMessage) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s RainsMessage) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s RainsMessage) Content() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(1)
	return capnp.PointerList{List: p.List()}, err
}

func (s RainsMessage) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetContent(v capnp.PointerList) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s RainsMessage) NewContent(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s RainsMessage) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s RainsMessage) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s RainsMessage) Capabilities() (capnp.TextList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.TextList{List: p.List()}, err
}

func (s RainsMessage) HasCapabilities() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s RainsMessage) SetCapabilities(v capnp.TextList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewCapabilities sets the capabilities field to a newly
// allocated capnp.TextList, preferring placement in s's segment.
func (s RainsMessage) NewCapabilities(n int32) (capnp.TextList, error) {
	l, err := capnp.NewTextList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.TextList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// RainsMessage_List is a list of RainsMessage.
type RainsMessage_List struct{ capnp.List }

// NewRainsMessage creates a new list of RainsMessage.
func NewRainsMessage_List(s *capnp.Segment, sz int32) (RainsMessage_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return RainsMessage_List{l}, err
}

func (s RainsMessage_List) At(i int) RainsMessage { return RainsMessage{s.List.Struct(i)} }

func (s RainsMessage_List) Set(i int, v RainsMessage) error { return s.List.SetStruct(i, v.Struct) }

// RainsMessage_Promise is a wrapper for a RainsMessage promised by a client call.
type RainsMessage_Promise struct{ *capnp.Pipeline }

func (p RainsMessage_Promise) Struct() (RainsMessage, error) {
	s, err := p.Pipeline.Struct()
	return RainsMessage{s}, err
}

type MessageSection struct{ Client capnp.Client }

// MessageSection_TypeID is the unique identifier for the type MessageSection.
const MessageSection_TypeID = 0xf4f09607a66adddc

type MessageSection_Server interface {
}

func MessageSection_ServerToClient(s MessageSection_Server) MessageSection {
	c, _ := s.(server.Closer)
	return MessageSection{Client: server.New(MessageSection_Methods(nil, s), c)}
}

func MessageSection_Methods(methods []server.Method, s MessageSection_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 0)
	}

	return methods
}

type MessageSectionWithSig struct{ Client capnp.Client }

// MessageSectionWithSig_TypeID is the unique identifier for the type MessageSectionWithSig.
const MessageSectionWithSig_TypeID = 0x9f30b9a1389539e7

func (c MessageSectionWithSig) Sigs(ctx context.Context, params func(MessageSectionWithSig_sigs_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_sigs_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_sigs_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "sigs",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_sigs_Params{Struct: s}) }
	}
	return MessageSectionWithSig_sigs_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) AddSig(ctx context.Context, params func(MessageSectionWithSig_addSig_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_addSig_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_addSig_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "addSig",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 1}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_addSig_Params{Struct: s}) }
	}
	return MessageSectionWithSig_addSig_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) DeleteSig(ctx context.Context, params func(MessageSectionWithSig_deleteSig_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_deleteSig_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_deleteSig_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      2,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "deleteSig",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 8, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_deleteSig_Params{Struct: s}) }
	}
	return MessageSectionWithSig_deleteSig_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) DeleteAllSigs(ctx context.Context, params func(MessageSectionWithSig_deleteAllSigs_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_deleteAllSigs_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_deleteAllSigs_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      3,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "deleteAllSigs",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_deleteAllSigs_Params{Struct: s}) }
	}
	return MessageSectionWithSig_deleteAllSigs_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) GetContext(ctx context.Context, params func(MessageSectionWithSig_getContext_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_getContext_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_getContext_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      4,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "getContext",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_getContext_Params{Struct: s}) }
	}
	return MessageSectionWithSig_getContext_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) GetSubjectZone(ctx context.Context, params func(MessageSectionWithSig_getSubjectZone_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_getSubjectZone_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_getSubjectZone_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      5,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "getSubjectZone",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_getSubjectZone_Params{Struct: s}) }
	}
	return MessageSectionWithSig_getSubjectZone_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) CreateStub(ctx context.Context, params func(MessageSectionWithSig_createStub_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_createStub_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_createStub_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      6,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "createStub",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_createStub_Params{Struct: s}) }
	}
	return MessageSectionWithSig_createStub_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) ValidFrom(ctx context.Context, params func(MessageSectionWithSig_validFrom_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_validFrom_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_validFrom_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      7,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "validFrom",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_validFrom_Params{Struct: s}) }
	}
	return MessageSectionWithSig_validFrom_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) ValidUntil(ctx context.Context, params func(MessageSectionWithSig_validUntil_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_validUntil_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_validUntil_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      8,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "validUntil",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_validUntil_Params{Struct: s}) }
	}
	return MessageSectionWithSig_validUntil_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) Hash(ctx context.Context, params func(MessageSectionWithSig_hash_Params) error, opts ...capnp.CallOption) MessageSectionWithSig_hash_Results_Promise {
	if c.Client == nil {
		return MessageSectionWithSig_hash_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      9,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "hash",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(MessageSectionWithSig_hash_Params{Struct: s}) }
	}
	return MessageSectionWithSig_hash_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) Begin(ctx context.Context, params func(Interval_begin_Params) error, opts ...capnp.CallOption) Interval_begin_Results_Promise {
	if c.Client == nil {
		return Interval_begin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "begin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Interval_begin_Params{Struct: s}) }
	}
	return Interval_begin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c MessageSectionWithSig) End(ctx context.Context, params func(Interval_end_Params) error, opts ...capnp.CallOption) Interval_end_Results_Promise {
	if c.Client == nil {
		return Interval_end_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "end",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Interval_end_Params{Struct: s}) }
	}
	return Interval_end_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type MessageSectionWithSig_Server interface {
	Sigs(MessageSectionWithSig_sigs) error

	AddSig(MessageSectionWithSig_addSig) error

	DeleteSig(MessageSectionWithSig_deleteSig) error

	DeleteAllSigs(MessageSectionWithSig_deleteAllSigs) error

	GetContext(MessageSectionWithSig_getContext) error

	GetSubjectZone(MessageSectionWithSig_getSubjectZone) error

	CreateStub(MessageSectionWithSig_createStub) error

	ValidFrom(MessageSectionWithSig_validFrom) error

	ValidUntil(MessageSectionWithSig_validUntil) error

	Hash(MessageSectionWithSig_hash) error

	Begin(Interval_begin) error

	End(Interval_end) error
}

func MessageSectionWithSig_ServerToClient(s MessageSectionWithSig_Server) MessageSectionWithSig {
	c, _ := s.(server.Closer)
	return MessageSectionWithSig{Client: server.New(MessageSectionWithSig_Methods(nil, s), c)}
}

func MessageSectionWithSig_Methods(methods []server.Method, s MessageSectionWithSig_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 12)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "sigs",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_sigs{c, opts, MessageSectionWithSig_sigs_Params{Struct: p}, MessageSectionWithSig_sigs_Results{Struct: r}}
			return s.Sigs(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "addSig",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_addSig{c, opts, MessageSectionWithSig_addSig_Params{Struct: p}, MessageSectionWithSig_addSig_Results{Struct: r}}
			return s.AddSig(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      2,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "deleteSig",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_deleteSig{c, opts, MessageSectionWithSig_deleteSig_Params{Struct: p}, MessageSectionWithSig_deleteSig_Results{Struct: r}}
			return s.DeleteSig(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      3,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "deleteAllSigs",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_deleteAllSigs{c, opts, MessageSectionWithSig_deleteAllSigs_Params{Struct: p}, MessageSectionWithSig_deleteAllSigs_Results{Struct: r}}
			return s.DeleteAllSigs(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      4,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "getContext",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_getContext{c, opts, MessageSectionWithSig_getContext_Params{Struct: p}, MessageSectionWithSig_getContext_Results{Struct: r}}
			return s.GetContext(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      5,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "getSubjectZone",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_getSubjectZone{c, opts, MessageSectionWithSig_getSubjectZone_Params{Struct: p}, MessageSectionWithSig_getSubjectZone_Results{Struct: r}}
			return s.GetSubjectZone(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      6,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "createStub",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_createStub{c, opts, MessageSectionWithSig_createStub_Params{Struct: p}, MessageSectionWithSig_createStub_Results{Struct: r}}
			return s.CreateStub(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      7,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "validFrom",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_validFrom{c, opts, MessageSectionWithSig_validFrom_Params{Struct: p}, MessageSectionWithSig_validFrom_Results{Struct: r}}
			return s.ValidFrom(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      8,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "validUntil",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_validUntil{c, opts, MessageSectionWithSig_validUntil_Params{Struct: p}, MessageSectionWithSig_validUntil_Results{Struct: r}}
			return s.ValidUntil(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 8, PointerCount: 0},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0x9f30b9a1389539e7,
			MethodID:      9,
			InterfaceName: "proto/rainsMsg.capnp:MessageSectionWithSig",
			MethodName:    "hash",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := MessageSectionWithSig_hash{c, opts, MessageSectionWithSig_hash_Params{Struct: p}, MessageSectionWithSig_hash_Results{Struct: r}}
			return s.Hash(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "begin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Interval_begin{c, opts, Interval_begin_Params{Struct: p}, Interval_begin_Results{Struct: r}}
			return s.Begin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "end",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Interval_end{c, opts, Interval_end_Params{Struct: p}, Interval_end_Results{Struct: r}}
			return s.End(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// MessageSectionWithSig_sigs holds the arguments for a server call to MessageSectionWithSig.sigs.
type MessageSectionWithSig_sigs struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_sigs_Params
	Results MessageSectionWithSig_sigs_Results
}

// MessageSectionWithSig_addSig holds the arguments for a server call to MessageSectionWithSig.addSig.
type MessageSectionWithSig_addSig struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_addSig_Params
	Results MessageSectionWithSig_addSig_Results
}

// MessageSectionWithSig_deleteSig holds the arguments for a server call to MessageSectionWithSig.deleteSig.
type MessageSectionWithSig_deleteSig struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_deleteSig_Params
	Results MessageSectionWithSig_deleteSig_Results
}

// MessageSectionWithSig_deleteAllSigs holds the arguments for a server call to MessageSectionWithSig.deleteAllSigs.
type MessageSectionWithSig_deleteAllSigs struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_deleteAllSigs_Params
	Results MessageSectionWithSig_deleteAllSigs_Results
}

// MessageSectionWithSig_getContext holds the arguments for a server call to MessageSectionWithSig.getContext.
type MessageSectionWithSig_getContext struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_getContext_Params
	Results MessageSectionWithSig_getContext_Results
}

// MessageSectionWithSig_getSubjectZone holds the arguments for a server call to MessageSectionWithSig.getSubjectZone.
type MessageSectionWithSig_getSubjectZone struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_getSubjectZone_Params
	Results MessageSectionWithSig_getSubjectZone_Results
}

// MessageSectionWithSig_createStub holds the arguments for a server call to MessageSectionWithSig.createStub.
type MessageSectionWithSig_createStub struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_createStub_Params
	Results MessageSectionWithSig_createStub_Results
}

// MessageSectionWithSig_validFrom holds the arguments for a server call to MessageSectionWithSig.validFrom.
type MessageSectionWithSig_validFrom struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_validFrom_Params
	Results MessageSectionWithSig_validFrom_Results
}

// MessageSectionWithSig_validUntil holds the arguments for a server call to MessageSectionWithSig.validUntil.
type MessageSectionWithSig_validUntil struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_validUntil_Params
	Results MessageSectionWithSig_validUntil_Results
}

// MessageSectionWithSig_hash holds the arguments for a server call to MessageSectionWithSig.hash.
type MessageSectionWithSig_hash struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  MessageSectionWithSig_hash_Params
	Results MessageSectionWithSig_hash_Results
}

type MessageSectionWithSig_sigs_Params struct{ capnp.Struct }

// MessageSectionWithSig_sigs_Params_TypeID is the unique identifier for the type MessageSectionWithSig_sigs_Params.
const MessageSectionWithSig_sigs_Params_TypeID = 0xa5dedc367594e97a

func NewMessageSectionWithSig_sigs_Params(s *capnp.Segment) (MessageSectionWithSig_sigs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_sigs_Params{st}, err
}

func NewRootMessageSectionWithSig_sigs_Params(s *capnp.Segment) (MessageSectionWithSig_sigs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_sigs_Params{st}, err
}

func ReadRootMessageSectionWithSig_sigs_Params(msg *capnp.Message) (MessageSectionWithSig_sigs_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_sigs_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_sigs_Params) String() string {
	str, _ := text.Marshal(0xa5dedc367594e97a, s.Struct)
	return str
}

// MessageSectionWithSig_sigs_Params_List is a list of MessageSectionWithSig_sigs_Params.
type MessageSectionWithSig_sigs_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_sigs_Params creates a new list of MessageSectionWithSig_sigs_Params.
func NewMessageSectionWithSig_sigs_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_sigs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_sigs_Params_List{l}, err
}

func (s MessageSectionWithSig_sigs_Params_List) At(i int) MessageSectionWithSig_sigs_Params {
	return MessageSectionWithSig_sigs_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_sigs_Params_List) Set(i int, v MessageSectionWithSig_sigs_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_sigs_Params_Promise is a wrapper for a MessageSectionWithSig_sigs_Params promised by a client call.
type MessageSectionWithSig_sigs_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_sigs_Params_Promise) Struct() (MessageSectionWithSig_sigs_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_sigs_Params{s}, err
}

type MessageSectionWithSig_sigs_Results struct{ capnp.Struct }

// MessageSectionWithSig_sigs_Results_TypeID is the unique identifier for the type MessageSectionWithSig_sigs_Results.
const MessageSectionWithSig_sigs_Results_TypeID = 0xbd3d681e8600457f

func NewMessageSectionWithSig_sigs_Results(s *capnp.Segment) (MessageSectionWithSig_sigs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_sigs_Results{st}, err
}

func NewRootMessageSectionWithSig_sigs_Results(s *capnp.Segment) (MessageSectionWithSig_sigs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_sigs_Results{st}, err
}

func ReadRootMessageSectionWithSig_sigs_Results(msg *capnp.Message) (MessageSectionWithSig_sigs_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_sigs_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_sigs_Results) String() string {
	str, _ := text.Marshal(0xbd3d681e8600457f, s.Struct)
	return str
}

func (s MessageSectionWithSig_sigs_Results) Sig() (Signature, error) {
	p, err := s.Struct.Ptr(0)
	return Signature{Struct: p.Struct()}, err
}

func (s MessageSectionWithSig_sigs_Results) HasSig() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_sigs_Results) SetSig(v Signature) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSig sets the sig field to a newly
// allocated Signature struct, preferring placement in s's segment.
func (s MessageSectionWithSig_sigs_Results) NewSig() (Signature, error) {
	ss, err := NewSignature(s.Struct.Segment())
	if err != nil {
		return Signature{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MessageSectionWithSig_sigs_Results_List is a list of MessageSectionWithSig_sigs_Results.
type MessageSectionWithSig_sigs_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_sigs_Results creates a new list of MessageSectionWithSig_sigs_Results.
func NewMessageSectionWithSig_sigs_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_sigs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_sigs_Results_List{l}, err
}

func (s MessageSectionWithSig_sigs_Results_List) At(i int) MessageSectionWithSig_sigs_Results {
	return MessageSectionWithSig_sigs_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_sigs_Results_List) Set(i int, v MessageSectionWithSig_sigs_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_sigs_Results_Promise is a wrapper for a MessageSectionWithSig_sigs_Results promised by a client call.
type MessageSectionWithSig_sigs_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_sigs_Results_Promise) Struct() (MessageSectionWithSig_sigs_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_sigs_Results{s}, err
}

func (p MessageSectionWithSig_sigs_Results_Promise) Sig() Signature_Promise {
	return Signature_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MessageSectionWithSig_addSig_Params struct{ capnp.Struct }

// MessageSectionWithSig_addSig_Params_TypeID is the unique identifier for the type MessageSectionWithSig_addSig_Params.
const MessageSectionWithSig_addSig_Params_TypeID = 0xd4ee6164b4bdc4eb

func NewMessageSectionWithSig_addSig_Params(s *capnp.Segment) (MessageSectionWithSig_addSig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_addSig_Params{st}, err
}

func NewRootMessageSectionWithSig_addSig_Params(s *capnp.Segment) (MessageSectionWithSig_addSig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_addSig_Params{st}, err
}

func ReadRootMessageSectionWithSig_addSig_Params(msg *capnp.Message) (MessageSectionWithSig_addSig_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_addSig_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_addSig_Params) String() string {
	str, _ := text.Marshal(0xd4ee6164b4bdc4eb, s.Struct)
	return str
}

func (s MessageSectionWithSig_addSig_Params) Sig() (Signature, error) {
	p, err := s.Struct.Ptr(0)
	return Signature{Struct: p.Struct()}, err
}

func (s MessageSectionWithSig_addSig_Params) HasSig() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_addSig_Params) SetSig(v Signature) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSig sets the sig field to a newly
// allocated Signature struct, preferring placement in s's segment.
func (s MessageSectionWithSig_addSig_Params) NewSig() (Signature, error) {
	ss, err := NewSignature(s.Struct.Segment())
	if err != nil {
		return Signature{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// MessageSectionWithSig_addSig_Params_List is a list of MessageSectionWithSig_addSig_Params.
type MessageSectionWithSig_addSig_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_addSig_Params creates a new list of MessageSectionWithSig_addSig_Params.
func NewMessageSectionWithSig_addSig_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_addSig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_addSig_Params_List{l}, err
}

func (s MessageSectionWithSig_addSig_Params_List) At(i int) MessageSectionWithSig_addSig_Params {
	return MessageSectionWithSig_addSig_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_addSig_Params_List) Set(i int, v MessageSectionWithSig_addSig_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_addSig_Params_Promise is a wrapper for a MessageSectionWithSig_addSig_Params promised by a client call.
type MessageSectionWithSig_addSig_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_addSig_Params_Promise) Struct() (MessageSectionWithSig_addSig_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_addSig_Params{s}, err
}

func (p MessageSectionWithSig_addSig_Params_Promise) Sig() Signature_Promise {
	return Signature_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type MessageSectionWithSig_addSig_Results struct{ capnp.Struct }

// MessageSectionWithSig_addSig_Results_TypeID is the unique identifier for the type MessageSectionWithSig_addSig_Results.
const MessageSectionWithSig_addSig_Results_TypeID = 0xbb86a24042c66855

func NewMessageSectionWithSig_addSig_Results(s *capnp.Segment) (MessageSectionWithSig_addSig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_addSig_Results{st}, err
}

func NewRootMessageSectionWithSig_addSig_Results(s *capnp.Segment) (MessageSectionWithSig_addSig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_addSig_Results{st}, err
}

func ReadRootMessageSectionWithSig_addSig_Results(msg *capnp.Message) (MessageSectionWithSig_addSig_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_addSig_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_addSig_Results) String() string {
	str, _ := text.Marshal(0xbb86a24042c66855, s.Struct)
	return str
}

// MessageSectionWithSig_addSig_Results_List is a list of MessageSectionWithSig_addSig_Results.
type MessageSectionWithSig_addSig_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_addSig_Results creates a new list of MessageSectionWithSig_addSig_Results.
func NewMessageSectionWithSig_addSig_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_addSig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_addSig_Results_List{l}, err
}

func (s MessageSectionWithSig_addSig_Results_List) At(i int) MessageSectionWithSig_addSig_Results {
	return MessageSectionWithSig_addSig_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_addSig_Results_List) Set(i int, v MessageSectionWithSig_addSig_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_addSig_Results_Promise is a wrapper for a MessageSectionWithSig_addSig_Results promised by a client call.
type MessageSectionWithSig_addSig_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_addSig_Results_Promise) Struct() (MessageSectionWithSig_addSig_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_addSig_Results{s}, err
}

type MessageSectionWithSig_deleteSig_Params struct{ capnp.Struct }

// MessageSectionWithSig_deleteSig_Params_TypeID is the unique identifier for the type MessageSectionWithSig_deleteSig_Params.
const MessageSectionWithSig_deleteSig_Params_TypeID = 0xb950ba19ca79c37f

func NewMessageSectionWithSig_deleteSig_Params(s *capnp.Segment) (MessageSectionWithSig_deleteSig_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_deleteSig_Params{st}, err
}

func NewRootMessageSectionWithSig_deleteSig_Params(s *capnp.Segment) (MessageSectionWithSig_deleteSig_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_deleteSig_Params{st}, err
}

func ReadRootMessageSectionWithSig_deleteSig_Params(msg *capnp.Message) (MessageSectionWithSig_deleteSig_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_deleteSig_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_deleteSig_Params) String() string {
	str, _ := text.Marshal(0xb950ba19ca79c37f, s.Struct)
	return str
}

func (s MessageSectionWithSig_deleteSig_Params) Int() int32 {
	return int32(s.Struct.Uint32(0))
}

func (s MessageSectionWithSig_deleteSig_Params) SetInt(v int32) {
	s.Struct.SetUint32(0, uint32(v))
}

// MessageSectionWithSig_deleteSig_Params_List is a list of MessageSectionWithSig_deleteSig_Params.
type MessageSectionWithSig_deleteSig_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_deleteSig_Params creates a new list of MessageSectionWithSig_deleteSig_Params.
func NewMessageSectionWithSig_deleteSig_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_deleteSig_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MessageSectionWithSig_deleteSig_Params_List{l}, err
}

func (s MessageSectionWithSig_deleteSig_Params_List) At(i int) MessageSectionWithSig_deleteSig_Params {
	return MessageSectionWithSig_deleteSig_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_deleteSig_Params_List) Set(i int, v MessageSectionWithSig_deleteSig_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_deleteSig_Params_Promise is a wrapper for a MessageSectionWithSig_deleteSig_Params promised by a client call.
type MessageSectionWithSig_deleteSig_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_deleteSig_Params_Promise) Struct() (MessageSectionWithSig_deleteSig_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_deleteSig_Params{s}, err
}

type MessageSectionWithSig_deleteSig_Results struct{ capnp.Struct }

// MessageSectionWithSig_deleteSig_Results_TypeID is the unique identifier for the type MessageSectionWithSig_deleteSig_Results.
const MessageSectionWithSig_deleteSig_Results_TypeID = 0x9439232ee1625745

func NewMessageSectionWithSig_deleteSig_Results(s *capnp.Segment) (MessageSectionWithSig_deleteSig_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteSig_Results{st}, err
}

func NewRootMessageSectionWithSig_deleteSig_Results(s *capnp.Segment) (MessageSectionWithSig_deleteSig_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteSig_Results{st}, err
}

func ReadRootMessageSectionWithSig_deleteSig_Results(msg *capnp.Message) (MessageSectionWithSig_deleteSig_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_deleteSig_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_deleteSig_Results) String() string {
	str, _ := text.Marshal(0x9439232ee1625745, s.Struct)
	return str
}

// MessageSectionWithSig_deleteSig_Results_List is a list of MessageSectionWithSig_deleteSig_Results.
type MessageSectionWithSig_deleteSig_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_deleteSig_Results creates a new list of MessageSectionWithSig_deleteSig_Results.
func NewMessageSectionWithSig_deleteSig_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_deleteSig_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_deleteSig_Results_List{l}, err
}

func (s MessageSectionWithSig_deleteSig_Results_List) At(i int) MessageSectionWithSig_deleteSig_Results {
	return MessageSectionWithSig_deleteSig_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_deleteSig_Results_List) Set(i int, v MessageSectionWithSig_deleteSig_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_deleteSig_Results_Promise is a wrapper for a MessageSectionWithSig_deleteSig_Results promised by a client call.
type MessageSectionWithSig_deleteSig_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_deleteSig_Results_Promise) Struct() (MessageSectionWithSig_deleteSig_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_deleteSig_Results{s}, err
}

type MessageSectionWithSig_deleteAllSigs_Params struct{ capnp.Struct }

// MessageSectionWithSig_deleteAllSigs_Params_TypeID is the unique identifier for the type MessageSectionWithSig_deleteAllSigs_Params.
const MessageSectionWithSig_deleteAllSigs_Params_TypeID = 0xc698b99f896737c7

func NewMessageSectionWithSig_deleteAllSigs_Params(s *capnp.Segment) (MessageSectionWithSig_deleteAllSigs_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteAllSigs_Params{st}, err
}

func NewRootMessageSectionWithSig_deleteAllSigs_Params(s *capnp.Segment) (MessageSectionWithSig_deleteAllSigs_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteAllSigs_Params{st}, err
}

func ReadRootMessageSectionWithSig_deleteAllSigs_Params(msg *capnp.Message) (MessageSectionWithSig_deleteAllSigs_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_deleteAllSigs_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_deleteAllSigs_Params) String() string {
	str, _ := text.Marshal(0xc698b99f896737c7, s.Struct)
	return str
}

// MessageSectionWithSig_deleteAllSigs_Params_List is a list of MessageSectionWithSig_deleteAllSigs_Params.
type MessageSectionWithSig_deleteAllSigs_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_deleteAllSigs_Params creates a new list of MessageSectionWithSig_deleteAllSigs_Params.
func NewMessageSectionWithSig_deleteAllSigs_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_deleteAllSigs_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_deleteAllSigs_Params_List{l}, err
}

func (s MessageSectionWithSig_deleteAllSigs_Params_List) At(i int) MessageSectionWithSig_deleteAllSigs_Params {
	return MessageSectionWithSig_deleteAllSigs_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_deleteAllSigs_Params_List) Set(i int, v MessageSectionWithSig_deleteAllSigs_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_deleteAllSigs_Params_Promise is a wrapper for a MessageSectionWithSig_deleteAllSigs_Params promised by a client call.
type MessageSectionWithSig_deleteAllSigs_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_deleteAllSigs_Params_Promise) Struct() (MessageSectionWithSig_deleteAllSigs_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_deleteAllSigs_Params{s}, err
}

type MessageSectionWithSig_deleteAllSigs_Results struct{ capnp.Struct }

// MessageSectionWithSig_deleteAllSigs_Results_TypeID is the unique identifier for the type MessageSectionWithSig_deleteAllSigs_Results.
const MessageSectionWithSig_deleteAllSigs_Results_TypeID = 0xf6bdb0430ec96918

func NewMessageSectionWithSig_deleteAllSigs_Results(s *capnp.Segment) (MessageSectionWithSig_deleteAllSigs_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteAllSigs_Results{st}, err
}

func NewRootMessageSectionWithSig_deleteAllSigs_Results(s *capnp.Segment) (MessageSectionWithSig_deleteAllSigs_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_deleteAllSigs_Results{st}, err
}

func ReadRootMessageSectionWithSig_deleteAllSigs_Results(msg *capnp.Message) (MessageSectionWithSig_deleteAllSigs_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_deleteAllSigs_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_deleteAllSigs_Results) String() string {
	str, _ := text.Marshal(0xf6bdb0430ec96918, s.Struct)
	return str
}

// MessageSectionWithSig_deleteAllSigs_Results_List is a list of MessageSectionWithSig_deleteAllSigs_Results.
type MessageSectionWithSig_deleteAllSigs_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_deleteAllSigs_Results creates a new list of MessageSectionWithSig_deleteAllSigs_Results.
func NewMessageSectionWithSig_deleteAllSigs_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_deleteAllSigs_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_deleteAllSigs_Results_List{l}, err
}

func (s MessageSectionWithSig_deleteAllSigs_Results_List) At(i int) MessageSectionWithSig_deleteAllSigs_Results {
	return MessageSectionWithSig_deleteAllSigs_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_deleteAllSigs_Results_List) Set(i int, v MessageSectionWithSig_deleteAllSigs_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_deleteAllSigs_Results_Promise is a wrapper for a MessageSectionWithSig_deleteAllSigs_Results promised by a client call.
type MessageSectionWithSig_deleteAllSigs_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_deleteAllSigs_Results_Promise) Struct() (MessageSectionWithSig_deleteAllSigs_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_deleteAllSigs_Results{s}, err
}

type MessageSectionWithSig_getContext_Params struct{ capnp.Struct }

// MessageSectionWithSig_getContext_Params_TypeID is the unique identifier for the type MessageSectionWithSig_getContext_Params.
const MessageSectionWithSig_getContext_Params_TypeID = 0xdef6357752ebba29

func NewMessageSectionWithSig_getContext_Params(s *capnp.Segment) (MessageSectionWithSig_getContext_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_getContext_Params{st}, err
}

func NewRootMessageSectionWithSig_getContext_Params(s *capnp.Segment) (MessageSectionWithSig_getContext_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_getContext_Params{st}, err
}

func ReadRootMessageSectionWithSig_getContext_Params(msg *capnp.Message) (MessageSectionWithSig_getContext_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_getContext_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_getContext_Params) String() string {
	str, _ := text.Marshal(0xdef6357752ebba29, s.Struct)
	return str
}

// MessageSectionWithSig_getContext_Params_List is a list of MessageSectionWithSig_getContext_Params.
type MessageSectionWithSig_getContext_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_getContext_Params creates a new list of MessageSectionWithSig_getContext_Params.
func NewMessageSectionWithSig_getContext_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_getContext_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_getContext_Params_List{l}, err
}

func (s MessageSectionWithSig_getContext_Params_List) At(i int) MessageSectionWithSig_getContext_Params {
	return MessageSectionWithSig_getContext_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_getContext_Params_List) Set(i int, v MessageSectionWithSig_getContext_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_getContext_Params_Promise is a wrapper for a MessageSectionWithSig_getContext_Params promised by a client call.
type MessageSectionWithSig_getContext_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_getContext_Params_Promise) Struct() (MessageSectionWithSig_getContext_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_getContext_Params{s}, err
}

type MessageSectionWithSig_getContext_Results struct{ capnp.Struct }

// MessageSectionWithSig_getContext_Results_TypeID is the unique identifier for the type MessageSectionWithSig_getContext_Results.
const MessageSectionWithSig_getContext_Results_TypeID = 0xfe7e3774c0f9bf1f

func NewMessageSectionWithSig_getContext_Results(s *capnp.Segment) (MessageSectionWithSig_getContext_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_getContext_Results{st}, err
}

func NewRootMessageSectionWithSig_getContext_Results(s *capnp.Segment) (MessageSectionWithSig_getContext_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_getContext_Results{st}, err
}

func ReadRootMessageSectionWithSig_getContext_Results(msg *capnp.Message) (MessageSectionWithSig_getContext_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_getContext_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_getContext_Results) String() string {
	str, _ := text.Marshal(0xfe7e3774c0f9bf1f, s.Struct)
	return str
}

func (s MessageSectionWithSig_getContext_Results) Context() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MessageSectionWithSig_getContext_Results) HasContext() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_getContext_Results) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MessageSectionWithSig_getContext_Results) SetContext(v string) error {
	return s.Struct.SetText(0, v)
}

// MessageSectionWithSig_getContext_Results_List is a list of MessageSectionWithSig_getContext_Results.
type MessageSectionWithSig_getContext_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_getContext_Results creates a new list of MessageSectionWithSig_getContext_Results.
func NewMessageSectionWithSig_getContext_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_getContext_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_getContext_Results_List{l}, err
}

func (s MessageSectionWithSig_getContext_Results_List) At(i int) MessageSectionWithSig_getContext_Results {
	return MessageSectionWithSig_getContext_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_getContext_Results_List) Set(i int, v MessageSectionWithSig_getContext_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_getContext_Results_Promise is a wrapper for a MessageSectionWithSig_getContext_Results promised by a client call.
type MessageSectionWithSig_getContext_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_getContext_Results_Promise) Struct() (MessageSectionWithSig_getContext_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_getContext_Results{s}, err
}

type MessageSectionWithSig_getSubjectZone_Params struct{ capnp.Struct }

// MessageSectionWithSig_getSubjectZone_Params_TypeID is the unique identifier for the type MessageSectionWithSig_getSubjectZone_Params.
const MessageSectionWithSig_getSubjectZone_Params_TypeID = 0xd48a054099ff07a6

func NewMessageSectionWithSig_getSubjectZone_Params(s *capnp.Segment) (MessageSectionWithSig_getSubjectZone_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_getSubjectZone_Params{st}, err
}

func NewRootMessageSectionWithSig_getSubjectZone_Params(s *capnp.Segment) (MessageSectionWithSig_getSubjectZone_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_getSubjectZone_Params{st}, err
}

func ReadRootMessageSectionWithSig_getSubjectZone_Params(msg *capnp.Message) (MessageSectionWithSig_getSubjectZone_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_getSubjectZone_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_getSubjectZone_Params) String() string {
	str, _ := text.Marshal(0xd48a054099ff07a6, s.Struct)
	return str
}

// MessageSectionWithSig_getSubjectZone_Params_List is a list of MessageSectionWithSig_getSubjectZone_Params.
type MessageSectionWithSig_getSubjectZone_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_getSubjectZone_Params creates a new list of MessageSectionWithSig_getSubjectZone_Params.
func NewMessageSectionWithSig_getSubjectZone_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_getSubjectZone_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_getSubjectZone_Params_List{l}, err
}

func (s MessageSectionWithSig_getSubjectZone_Params_List) At(i int) MessageSectionWithSig_getSubjectZone_Params {
	return MessageSectionWithSig_getSubjectZone_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_getSubjectZone_Params_List) Set(i int, v MessageSectionWithSig_getSubjectZone_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_getSubjectZone_Params_Promise is a wrapper for a MessageSectionWithSig_getSubjectZone_Params promised by a client call.
type MessageSectionWithSig_getSubjectZone_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_getSubjectZone_Params_Promise) Struct() (MessageSectionWithSig_getSubjectZone_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_getSubjectZone_Params{s}, err
}

type MessageSectionWithSig_getSubjectZone_Results struct{ capnp.Struct }

// MessageSectionWithSig_getSubjectZone_Results_TypeID is the unique identifier for the type MessageSectionWithSig_getSubjectZone_Results.
const MessageSectionWithSig_getSubjectZone_Results_TypeID = 0xc660dbd95ff47272

func NewMessageSectionWithSig_getSubjectZone_Results(s *capnp.Segment) (MessageSectionWithSig_getSubjectZone_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_getSubjectZone_Results{st}, err
}

func NewRootMessageSectionWithSig_getSubjectZone_Results(s *capnp.Segment) (MessageSectionWithSig_getSubjectZone_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_getSubjectZone_Results{st}, err
}

func ReadRootMessageSectionWithSig_getSubjectZone_Results(msg *capnp.Message) (MessageSectionWithSig_getSubjectZone_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_getSubjectZone_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_getSubjectZone_Results) String() string {
	str, _ := text.Marshal(0xc660dbd95ff47272, s.Struct)
	return str
}

func (s MessageSectionWithSig_getSubjectZone_Results) Zone() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MessageSectionWithSig_getSubjectZone_Results) HasZone() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_getSubjectZone_Results) ZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MessageSectionWithSig_getSubjectZone_Results) SetZone(v string) error {
	return s.Struct.SetText(0, v)
}

// MessageSectionWithSig_getSubjectZone_Results_List is a list of MessageSectionWithSig_getSubjectZone_Results.
type MessageSectionWithSig_getSubjectZone_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_getSubjectZone_Results creates a new list of MessageSectionWithSig_getSubjectZone_Results.
func NewMessageSectionWithSig_getSubjectZone_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_getSubjectZone_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_getSubjectZone_Results_List{l}, err
}

func (s MessageSectionWithSig_getSubjectZone_Results_List) At(i int) MessageSectionWithSig_getSubjectZone_Results {
	return MessageSectionWithSig_getSubjectZone_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_getSubjectZone_Results_List) Set(i int, v MessageSectionWithSig_getSubjectZone_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_getSubjectZone_Results_Promise is a wrapper for a MessageSectionWithSig_getSubjectZone_Results promised by a client call.
type MessageSectionWithSig_getSubjectZone_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_getSubjectZone_Results_Promise) Struct() (MessageSectionWithSig_getSubjectZone_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_getSubjectZone_Results{s}, err
}

type MessageSectionWithSig_createStub_Params struct{ capnp.Struct }

// MessageSectionWithSig_createStub_Params_TypeID is the unique identifier for the type MessageSectionWithSig_createStub_Params.
const MessageSectionWithSig_createStub_Params_TypeID = 0xa23710e0ed103b12

func NewMessageSectionWithSig_createStub_Params(s *capnp.Segment) (MessageSectionWithSig_createStub_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_createStub_Params{st}, err
}

func NewRootMessageSectionWithSig_createStub_Params(s *capnp.Segment) (MessageSectionWithSig_createStub_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_createStub_Params{st}, err
}

func ReadRootMessageSectionWithSig_createStub_Params(msg *capnp.Message) (MessageSectionWithSig_createStub_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_createStub_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_createStub_Params) String() string {
	str, _ := text.Marshal(0xa23710e0ed103b12, s.Struct)
	return str
}

// MessageSectionWithSig_createStub_Params_List is a list of MessageSectionWithSig_createStub_Params.
type MessageSectionWithSig_createStub_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_createStub_Params creates a new list of MessageSectionWithSig_createStub_Params.
func NewMessageSectionWithSig_createStub_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_createStub_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_createStub_Params_List{l}, err
}

func (s MessageSectionWithSig_createStub_Params_List) At(i int) MessageSectionWithSig_createStub_Params {
	return MessageSectionWithSig_createStub_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_createStub_Params_List) Set(i int, v MessageSectionWithSig_createStub_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_createStub_Params_Promise is a wrapper for a MessageSectionWithSig_createStub_Params promised by a client call.
type MessageSectionWithSig_createStub_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_createStub_Params_Promise) Struct() (MessageSectionWithSig_createStub_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_createStub_Params{s}, err
}

type MessageSectionWithSig_createStub_Results struct{ capnp.Struct }

// MessageSectionWithSig_createStub_Results_TypeID is the unique identifier for the type MessageSectionWithSig_createStub_Results.
const MessageSectionWithSig_createStub_Results_TypeID = 0x9cbf543afc5b2ef8

func NewMessageSectionWithSig_createStub_Results(s *capnp.Segment) (MessageSectionWithSig_createStub_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_createStub_Results{st}, err
}

func NewRootMessageSectionWithSig_createStub_Results(s *capnp.Segment) (MessageSectionWithSig_createStub_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_createStub_Results{st}, err
}

func ReadRootMessageSectionWithSig_createStub_Results(msg *capnp.Message) (MessageSectionWithSig_createStub_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_createStub_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_createStub_Results) String() string {
	str, _ := text.Marshal(0x9cbf543afc5b2ef8, s.Struct)
	return str
}

func (s MessageSectionWithSig_createStub_Results) Section() MessageSectionWithSig {
	p, _ := s.Struct.Ptr(0)
	return MessageSectionWithSig{Client: p.Interface().Client()}
}

func (s MessageSectionWithSig_createStub_Results) HasSection() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_createStub_Results) SetSection(v MessageSectionWithSig) error {
	if v.Client == nil {
		return s.Struct.SetPtr(0, capnp.Ptr{})
	}
	seg := s.Segment()
	in := capnp.NewInterface(seg, seg.Message().AddCap(v.Client))
	return s.Struct.SetPtr(0, in.ToPtr())
}

// MessageSectionWithSig_createStub_Results_List is a list of MessageSectionWithSig_createStub_Results.
type MessageSectionWithSig_createStub_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_createStub_Results creates a new list of MessageSectionWithSig_createStub_Results.
func NewMessageSectionWithSig_createStub_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_createStub_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_createStub_Results_List{l}, err
}

func (s MessageSectionWithSig_createStub_Results_List) At(i int) MessageSectionWithSig_createStub_Results {
	return MessageSectionWithSig_createStub_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_createStub_Results_List) Set(i int, v MessageSectionWithSig_createStub_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_createStub_Results_Promise is a wrapper for a MessageSectionWithSig_createStub_Results promised by a client call.
type MessageSectionWithSig_createStub_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_createStub_Results_Promise) Struct() (MessageSectionWithSig_createStub_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_createStub_Results{s}, err
}

func (p MessageSectionWithSig_createStub_Results_Promise) Section() MessageSectionWithSig {
	return MessageSectionWithSig{Client: p.Pipeline.GetPipeline(0).Client()}
}

type MessageSectionWithSig_validFrom_Params struct{ capnp.Struct }

// MessageSectionWithSig_validFrom_Params_TypeID is the unique identifier for the type MessageSectionWithSig_validFrom_Params.
const MessageSectionWithSig_validFrom_Params_TypeID = 0x85070a6faf2dcb4d

func NewMessageSectionWithSig_validFrom_Params(s *capnp.Segment) (MessageSectionWithSig_validFrom_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_validFrom_Params{st}, err
}

func NewRootMessageSectionWithSig_validFrom_Params(s *capnp.Segment) (MessageSectionWithSig_validFrom_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_validFrom_Params{st}, err
}

func ReadRootMessageSectionWithSig_validFrom_Params(msg *capnp.Message) (MessageSectionWithSig_validFrom_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_validFrom_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_validFrom_Params) String() string {
	str, _ := text.Marshal(0x85070a6faf2dcb4d, s.Struct)
	return str
}

// MessageSectionWithSig_validFrom_Params_List is a list of MessageSectionWithSig_validFrom_Params.
type MessageSectionWithSig_validFrom_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_validFrom_Params creates a new list of MessageSectionWithSig_validFrom_Params.
func NewMessageSectionWithSig_validFrom_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_validFrom_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_validFrom_Params_List{l}, err
}

func (s MessageSectionWithSig_validFrom_Params_List) At(i int) MessageSectionWithSig_validFrom_Params {
	return MessageSectionWithSig_validFrom_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_validFrom_Params_List) Set(i int, v MessageSectionWithSig_validFrom_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_validFrom_Params_Promise is a wrapper for a MessageSectionWithSig_validFrom_Params promised by a client call.
type MessageSectionWithSig_validFrom_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_validFrom_Params_Promise) Struct() (MessageSectionWithSig_validFrom_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_validFrom_Params{s}, err
}

type MessageSectionWithSig_validFrom_Results struct{ capnp.Struct }

// MessageSectionWithSig_validFrom_Results_TypeID is the unique identifier for the type MessageSectionWithSig_validFrom_Results.
const MessageSectionWithSig_validFrom_Results_TypeID = 0xddcec9b635b388d9

func NewMessageSectionWithSig_validFrom_Results(s *capnp.Segment) (MessageSectionWithSig_validFrom_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_validFrom_Results{st}, err
}

func NewRootMessageSectionWithSig_validFrom_Results(s *capnp.Segment) (MessageSectionWithSig_validFrom_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_validFrom_Results{st}, err
}

func ReadRootMessageSectionWithSig_validFrom_Results(msg *capnp.Message) (MessageSectionWithSig_validFrom_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_validFrom_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_validFrom_Results) String() string {
	str, _ := text.Marshal(0xddcec9b635b388d9, s.Struct)
	return str
}

func (s MessageSectionWithSig_validFrom_Results) ValidFrom() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s MessageSectionWithSig_validFrom_Results) SetValidFrom(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// MessageSectionWithSig_validFrom_Results_List is a list of MessageSectionWithSig_validFrom_Results.
type MessageSectionWithSig_validFrom_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_validFrom_Results creates a new list of MessageSectionWithSig_validFrom_Results.
func NewMessageSectionWithSig_validFrom_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_validFrom_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MessageSectionWithSig_validFrom_Results_List{l}, err
}

func (s MessageSectionWithSig_validFrom_Results_List) At(i int) MessageSectionWithSig_validFrom_Results {
	return MessageSectionWithSig_validFrom_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_validFrom_Results_List) Set(i int, v MessageSectionWithSig_validFrom_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_validFrom_Results_Promise is a wrapper for a MessageSectionWithSig_validFrom_Results promised by a client call.
type MessageSectionWithSig_validFrom_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_validFrom_Results_Promise) Struct() (MessageSectionWithSig_validFrom_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_validFrom_Results{s}, err
}

type MessageSectionWithSig_validUntil_Params struct{ capnp.Struct }

// MessageSectionWithSig_validUntil_Params_TypeID is the unique identifier for the type MessageSectionWithSig_validUntil_Params.
const MessageSectionWithSig_validUntil_Params_TypeID = 0xf53b9c54e2e0158b

func NewMessageSectionWithSig_validUntil_Params(s *capnp.Segment) (MessageSectionWithSig_validUntil_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_validUntil_Params{st}, err
}

func NewRootMessageSectionWithSig_validUntil_Params(s *capnp.Segment) (MessageSectionWithSig_validUntil_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_validUntil_Params{st}, err
}

func ReadRootMessageSectionWithSig_validUntil_Params(msg *capnp.Message) (MessageSectionWithSig_validUntil_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_validUntil_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_validUntil_Params) String() string {
	str, _ := text.Marshal(0xf53b9c54e2e0158b, s.Struct)
	return str
}

// MessageSectionWithSig_validUntil_Params_List is a list of MessageSectionWithSig_validUntil_Params.
type MessageSectionWithSig_validUntil_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_validUntil_Params creates a new list of MessageSectionWithSig_validUntil_Params.
func NewMessageSectionWithSig_validUntil_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_validUntil_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_validUntil_Params_List{l}, err
}

func (s MessageSectionWithSig_validUntil_Params_List) At(i int) MessageSectionWithSig_validUntil_Params {
	return MessageSectionWithSig_validUntil_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_validUntil_Params_List) Set(i int, v MessageSectionWithSig_validUntil_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_validUntil_Params_Promise is a wrapper for a MessageSectionWithSig_validUntil_Params promised by a client call.
type MessageSectionWithSig_validUntil_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_validUntil_Params_Promise) Struct() (MessageSectionWithSig_validUntil_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_validUntil_Params{s}, err
}

type MessageSectionWithSig_validUntil_Results struct{ capnp.Struct }

// MessageSectionWithSig_validUntil_Results_TypeID is the unique identifier for the type MessageSectionWithSig_validUntil_Results.
const MessageSectionWithSig_validUntil_Results_TypeID = 0x838419d256dc1071

func NewMessageSectionWithSig_validUntil_Results(s *capnp.Segment) (MessageSectionWithSig_validUntil_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_validUntil_Results{st}, err
}

func NewRootMessageSectionWithSig_validUntil_Results(s *capnp.Segment) (MessageSectionWithSig_validUntil_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return MessageSectionWithSig_validUntil_Results{st}, err
}

func ReadRootMessageSectionWithSig_validUntil_Results(msg *capnp.Message) (MessageSectionWithSig_validUntil_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_validUntil_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_validUntil_Results) String() string {
	str, _ := text.Marshal(0x838419d256dc1071, s.Struct)
	return str
}

func (s MessageSectionWithSig_validUntil_Results) ValidUntil() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s MessageSectionWithSig_validUntil_Results) SetValidUntil(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

// MessageSectionWithSig_validUntil_Results_List is a list of MessageSectionWithSig_validUntil_Results.
type MessageSectionWithSig_validUntil_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_validUntil_Results creates a new list of MessageSectionWithSig_validUntil_Results.
func NewMessageSectionWithSig_validUntil_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_validUntil_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return MessageSectionWithSig_validUntil_Results_List{l}, err
}

func (s MessageSectionWithSig_validUntil_Results_List) At(i int) MessageSectionWithSig_validUntil_Results {
	return MessageSectionWithSig_validUntil_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_validUntil_Results_List) Set(i int, v MessageSectionWithSig_validUntil_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_validUntil_Results_Promise is a wrapper for a MessageSectionWithSig_validUntil_Results promised by a client call.
type MessageSectionWithSig_validUntil_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_validUntil_Results_Promise) Struct() (MessageSectionWithSig_validUntil_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_validUntil_Results{s}, err
}

type MessageSectionWithSig_hash_Params struct{ capnp.Struct }

// MessageSectionWithSig_hash_Params_TypeID is the unique identifier for the type MessageSectionWithSig_hash_Params.
const MessageSectionWithSig_hash_Params_TypeID = 0x98ebe8ee44b55fad

func NewMessageSectionWithSig_hash_Params(s *capnp.Segment) (MessageSectionWithSig_hash_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_hash_Params{st}, err
}

func NewRootMessageSectionWithSig_hash_Params(s *capnp.Segment) (MessageSectionWithSig_hash_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return MessageSectionWithSig_hash_Params{st}, err
}

func ReadRootMessageSectionWithSig_hash_Params(msg *capnp.Message) (MessageSectionWithSig_hash_Params, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_hash_Params{root.Struct()}, err
}

func (s MessageSectionWithSig_hash_Params) String() string {
	str, _ := text.Marshal(0x98ebe8ee44b55fad, s.Struct)
	return str
}

// MessageSectionWithSig_hash_Params_List is a list of MessageSectionWithSig_hash_Params.
type MessageSectionWithSig_hash_Params_List struct{ capnp.List }

// NewMessageSectionWithSig_hash_Params creates a new list of MessageSectionWithSig_hash_Params.
func NewMessageSectionWithSig_hash_Params_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_hash_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return MessageSectionWithSig_hash_Params_List{l}, err
}

func (s MessageSectionWithSig_hash_Params_List) At(i int) MessageSectionWithSig_hash_Params {
	return MessageSectionWithSig_hash_Params{s.List.Struct(i)}
}

func (s MessageSectionWithSig_hash_Params_List) Set(i int, v MessageSectionWithSig_hash_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_hash_Params_Promise is a wrapper for a MessageSectionWithSig_hash_Params promised by a client call.
type MessageSectionWithSig_hash_Params_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_hash_Params_Promise) Struct() (MessageSectionWithSig_hash_Params, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_hash_Params{s}, err
}

type MessageSectionWithSig_hash_Results struct{ capnp.Struct }

// MessageSectionWithSig_hash_Results_TypeID is the unique identifier for the type MessageSectionWithSig_hash_Results.
const MessageSectionWithSig_hash_Results_TypeID = 0x897430f9f1af94c2

func NewMessageSectionWithSig_hash_Results(s *capnp.Segment) (MessageSectionWithSig_hash_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_hash_Results{st}, err
}

func NewRootMessageSectionWithSig_hash_Results(s *capnp.Segment) (MessageSectionWithSig_hash_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return MessageSectionWithSig_hash_Results{st}, err
}

func ReadRootMessageSectionWithSig_hash_Results(msg *capnp.Message) (MessageSectionWithSig_hash_Results, error) {
	root, err := msg.RootPtr()
	return MessageSectionWithSig_hash_Results{root.Struct()}, err
}

func (s MessageSectionWithSig_hash_Results) String() string {
	str, _ := text.Marshal(0x897430f9f1af94c2, s.Struct)
	return str
}

func (s MessageSectionWithSig_hash_Results) Hash() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s MessageSectionWithSig_hash_Results) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s MessageSectionWithSig_hash_Results) HashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s MessageSectionWithSig_hash_Results) SetHash(v string) error {
	return s.Struct.SetText(0, v)
}

// MessageSectionWithSig_hash_Results_List is a list of MessageSectionWithSig_hash_Results.
type MessageSectionWithSig_hash_Results_List struct{ capnp.List }

// NewMessageSectionWithSig_hash_Results creates a new list of MessageSectionWithSig_hash_Results.
func NewMessageSectionWithSig_hash_Results_List(s *capnp.Segment, sz int32) (MessageSectionWithSig_hash_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return MessageSectionWithSig_hash_Results_List{l}, err
}

func (s MessageSectionWithSig_hash_Results_List) At(i int) MessageSectionWithSig_hash_Results {
	return MessageSectionWithSig_hash_Results{s.List.Struct(i)}
}

func (s MessageSectionWithSig_hash_Results_List) Set(i int, v MessageSectionWithSig_hash_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// MessageSectionWithSig_hash_Results_Promise is a wrapper for a MessageSectionWithSig_hash_Results promised by a client call.
type MessageSectionWithSig_hash_Results_Promise struct{ *capnp.Pipeline }

func (p MessageSectionWithSig_hash_Results_Promise) Struct() (MessageSectionWithSig_hash_Results, error) {
	s, err := p.Pipeline.Struct()
	return MessageSectionWithSig_hash_Results{s}, err
}

type Interval struct{ Client capnp.Client }

// Interval_TypeID is the unique identifier for the type Interval.
const Interval_TypeID = 0xb288e1a44d8ed064

func (c Interval) Begin(ctx context.Context, params func(Interval_begin_Params) error, opts ...capnp.CallOption) Interval_begin_Results_Promise {
	if c.Client == nil {
		return Interval_begin_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "begin",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Interval_begin_Params{Struct: s}) }
	}
	return Interval_begin_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}
func (c Interval) End(ctx context.Context, params func(Interval_end_Params) error, opts ...capnp.CallOption) Interval_end_Results_Promise {
	if c.Client == nil {
		return Interval_end_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "end",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Interval_end_Params{Struct: s}) }
	}
	return Interval_end_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Interval_Server interface {
	Begin(Interval_begin) error

	End(Interval_end) error
}

func Interval_ServerToClient(s Interval_Server) Interval {
	c, _ := s.(server.Closer)
	return Interval{Client: server.New(Interval_Methods(nil, s), c)}
}

func Interval_Methods(methods []server.Method, s Interval_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 2)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "begin",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Interval_begin{c, opts, Interval_begin_Params{Struct: p}, Interval_begin_Results{Struct: r}}
			return s.Begin(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xb288e1a44d8ed064,
			MethodID:      1,
			InterfaceName: "proto/rainsMsg.capnp:Interval",
			MethodName:    "end",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Interval_end{c, opts, Interval_end_Params{Struct: p}, Interval_end_Results{Struct: r}}
			return s.End(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Interval_begin holds the arguments for a server call to Interval.begin.
type Interval_begin struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Interval_begin_Params
	Results Interval_begin_Results
}

// Interval_end holds the arguments for a server call to Interval.end.
type Interval_end struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Interval_end_Params
	Results Interval_end_Results
}

type Interval_begin_Params struct{ capnp.Struct }

// Interval_begin_Params_TypeID is the unique identifier for the type Interval_begin_Params.
const Interval_begin_Params_TypeID = 0xa00b05371373e6d6

func NewInterval_begin_Params(s *capnp.Segment) (Interval_begin_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Interval_begin_Params{st}, err
}

func NewRootInterval_begin_Params(s *capnp.Segment) (Interval_begin_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Interval_begin_Params{st}, err
}

func ReadRootInterval_begin_Params(msg *capnp.Message) (Interval_begin_Params, error) {
	root, err := msg.RootPtr()
	return Interval_begin_Params{root.Struct()}, err
}

func (s Interval_begin_Params) String() string {
	str, _ := text.Marshal(0xa00b05371373e6d6, s.Struct)
	return str
}

// Interval_begin_Params_List is a list of Interval_begin_Params.
type Interval_begin_Params_List struct{ capnp.List }

// NewInterval_begin_Params creates a new list of Interval_begin_Params.
func NewInterval_begin_Params_List(s *capnp.Segment, sz int32) (Interval_begin_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Interval_begin_Params_List{l}, err
}

func (s Interval_begin_Params_List) At(i int) Interval_begin_Params {
	return Interval_begin_Params{s.List.Struct(i)}
}

func (s Interval_begin_Params_List) Set(i int, v Interval_begin_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// Interval_begin_Params_Promise is a wrapper for a Interval_begin_Params promised by a client call.
type Interval_begin_Params_Promise struct{ *capnp.Pipeline }

func (p Interval_begin_Params_Promise) Struct() (Interval_begin_Params, error) {
	s, err := p.Pipeline.Struct()
	return Interval_begin_Params{s}, err
}

type Interval_begin_Results struct{ capnp.Struct }

// Interval_begin_Results_TypeID is the unique identifier for the type Interval_begin_Results.
const Interval_begin_Results_TypeID = 0x9ccb60a0785e0ebe

func NewInterval_begin_Results(s *capnp.Segment) (Interval_begin_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Interval_begin_Results{st}, err
}

func NewRootInterval_begin_Results(s *capnp.Segment) (Interval_begin_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Interval_begin_Results{st}, err
}

func ReadRootInterval_begin_Results(msg *capnp.Message) (Interval_begin_Results, error) {
	root, err := msg.RootPtr()
	return Interval_begin_Results{root.Struct()}, err
}

func (s Interval_begin_Results) String() string {
	str, _ := text.Marshal(0x9ccb60a0785e0ebe, s.Struct)
	return str
}

func (s Interval_begin_Results) Begin() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Interval_begin_Results) HasBegin() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Interval_begin_Results) BeginBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Interval_begin_Results) SetBegin(v string) error {
	return s.Struct.SetText(0, v)
}

// Interval_begin_Results_List is a list of Interval_begin_Results.
type Interval_begin_Results_List struct{ capnp.List }

// NewInterval_begin_Results creates a new list of Interval_begin_Results.
func NewInterval_begin_Results_List(s *capnp.Segment, sz int32) (Interval_begin_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Interval_begin_Results_List{l}, err
}

func (s Interval_begin_Results_List) At(i int) Interval_begin_Results {
	return Interval_begin_Results{s.List.Struct(i)}
}

func (s Interval_begin_Results_List) Set(i int, v Interval_begin_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// Interval_begin_Results_Promise is a wrapper for a Interval_begin_Results promised by a client call.
type Interval_begin_Results_Promise struct{ *capnp.Pipeline }

func (p Interval_begin_Results_Promise) Struct() (Interval_begin_Results, error) {
	s, err := p.Pipeline.Struct()
	return Interval_begin_Results{s}, err
}

type Interval_end_Params struct{ capnp.Struct }

// Interval_end_Params_TypeID is the unique identifier for the type Interval_end_Params.
const Interval_end_Params_TypeID = 0xe37f36219a0e109a

func NewInterval_end_Params(s *capnp.Segment) (Interval_end_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Interval_end_Params{st}, err
}

func NewRootInterval_end_Params(s *capnp.Segment) (Interval_end_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Interval_end_Params{st}, err
}

func ReadRootInterval_end_Params(msg *capnp.Message) (Interval_end_Params, error) {
	root, err := msg.RootPtr()
	return Interval_end_Params{root.Struct()}, err
}

func (s Interval_end_Params) String() string {
	str, _ := text.Marshal(0xe37f36219a0e109a, s.Struct)
	return str
}

// Interval_end_Params_List is a list of Interval_end_Params.
type Interval_end_Params_List struct{ capnp.List }

// NewInterval_end_Params creates a new list of Interval_end_Params.
func NewInterval_end_Params_List(s *capnp.Segment, sz int32) (Interval_end_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Interval_end_Params_List{l}, err
}

func (s Interval_end_Params_List) At(i int) Interval_end_Params {
	return Interval_end_Params{s.List.Struct(i)}
}

func (s Interval_end_Params_List) Set(i int, v Interval_end_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// Interval_end_Params_Promise is a wrapper for a Interval_end_Params promised by a client call.
type Interval_end_Params_Promise struct{ *capnp.Pipeline }

func (p Interval_end_Params_Promise) Struct() (Interval_end_Params, error) {
	s, err := p.Pipeline.Struct()
	return Interval_end_Params{s}, err
}

type Interval_end_Results struct{ capnp.Struct }

// Interval_end_Results_TypeID is the unique identifier for the type Interval_end_Results.
const Interval_end_Results_TypeID = 0xe0b5130f36b01c23

func NewInterval_end_Results(s *capnp.Segment) (Interval_end_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Interval_end_Results{st}, err
}

func NewRootInterval_end_Results(s *capnp.Segment) (Interval_end_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Interval_end_Results{st}, err
}

func ReadRootInterval_end_Results(msg *capnp.Message) (Interval_end_Results, error) {
	root, err := msg.RootPtr()
	return Interval_end_Results{root.Struct()}, err
}

func (s Interval_end_Results) String() string {
	str, _ := text.Marshal(0xe0b5130f36b01c23, s.Struct)
	return str
}

func (s Interval_end_Results) End() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Interval_end_Results) HasEnd() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Interval_end_Results) EndBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Interval_end_Results) SetEnd(v string) error {
	return s.Struct.SetText(0, v)
}

// Interval_end_Results_List is a list of Interval_end_Results.
type Interval_end_Results_List struct{ capnp.List }

// NewInterval_end_Results creates a new list of Interval_end_Results.
func NewInterval_end_Results_List(s *capnp.Segment, sz int32) (Interval_end_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Interval_end_Results_List{l}, err
}

func (s Interval_end_Results_List) At(i int) Interval_end_Results {
	return Interval_end_Results{s.List.Struct(i)}
}

func (s Interval_end_Results_List) Set(i int, v Interval_end_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// Interval_end_Results_Promise is a wrapper for a Interval_end_Results promised by a client call.
type Interval_end_Results_Promise struct{ *capnp.Pipeline }

func (p Interval_end_Results_Promise) Struct() (Interval_end_Results, error) {
	s, err := p.Pipeline.Struct()
	return Interval_end_Results{s}, err
}

type Hashable struct{ Client capnp.Client }

// Hashable_TypeID is the unique identifier for the type Hashable.
const Hashable_TypeID = 0xa26fe791fa514c3f

func (c Hashable) Hash(ctx context.Context, params func(Hashable_hash_Params) error, opts ...capnp.CallOption) Hashable_hash_Results_Promise {
	if c.Client == nil {
		return Hashable_hash_Results_Promise{Pipeline: capnp.NewPipeline(capnp.ErrorAnswer(capnp.ErrNullClient))}
	}
	call := &capnp.Call{
		Ctx: ctx,
		Method: capnp.Method{
			InterfaceID:   0xa26fe791fa514c3f,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Hashable",
			MethodName:    "hash",
		},
		Options: capnp.NewCallOptions(opts),
	}
	if params != nil {
		call.ParamsSize = capnp.ObjectSize{DataSize: 0, PointerCount: 0}
		call.ParamsFunc = func(s capnp.Struct) error { return params(Hashable_hash_Params{Struct: s}) }
	}
	return Hashable_hash_Results_Promise{Pipeline: capnp.NewPipeline(c.Client.Call(call))}
}

type Hashable_Server interface {
	Hash(Hashable_hash) error
}

func Hashable_ServerToClient(s Hashable_Server) Hashable {
	c, _ := s.(server.Closer)
	return Hashable{Client: server.New(Hashable_Methods(nil, s), c)}
}

func Hashable_Methods(methods []server.Method, s Hashable_Server) []server.Method {
	if cap(methods) == 0 {
		methods = make([]server.Method, 0, 1)
	}

	methods = append(methods, server.Method{
		Method: capnp.Method{
			InterfaceID:   0xa26fe791fa514c3f,
			MethodID:      0,
			InterfaceName: "proto/rainsMsg.capnp:Hashable",
			MethodName:    "hash",
		},
		Impl: func(c context.Context, opts capnp.CallOptions, p, r capnp.Struct) error {
			call := Hashable_hash{c, opts, Hashable_hash_Params{Struct: p}, Hashable_hash_Results{Struct: r}}
			return s.Hash(call)
		},
		ResultsSize: capnp.ObjectSize{DataSize: 0, PointerCount: 1},
	})

	return methods
}

// Hashable_hash holds the arguments for a server call to Hashable.hash.
type Hashable_hash struct {
	Ctx     context.Context
	Options capnp.CallOptions
	Params  Hashable_hash_Params
	Results Hashable_hash_Results
}

type Hashable_hash_Params struct{ capnp.Struct }

// Hashable_hash_Params_TypeID is the unique identifier for the type Hashable_hash_Params.
const Hashable_hash_Params_TypeID = 0x920d76878fcb1040

func NewHashable_hash_Params(s *capnp.Segment) (Hashable_hash_Params, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hashable_hash_Params{st}, err
}

func NewRootHashable_hash_Params(s *capnp.Segment) (Hashable_hash_Params, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0})
	return Hashable_hash_Params{st}, err
}

func ReadRootHashable_hash_Params(msg *capnp.Message) (Hashable_hash_Params, error) {
	root, err := msg.RootPtr()
	return Hashable_hash_Params{root.Struct()}, err
}

func (s Hashable_hash_Params) String() string {
	str, _ := text.Marshal(0x920d76878fcb1040, s.Struct)
	return str
}

// Hashable_hash_Params_List is a list of Hashable_hash_Params.
type Hashable_hash_Params_List struct{ capnp.List }

// NewHashable_hash_Params creates a new list of Hashable_hash_Params.
func NewHashable_hash_Params_List(s *capnp.Segment, sz int32) (Hashable_hash_Params_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 0}, sz)
	return Hashable_hash_Params_List{l}, err
}

func (s Hashable_hash_Params_List) At(i int) Hashable_hash_Params {
	return Hashable_hash_Params{s.List.Struct(i)}
}

func (s Hashable_hash_Params_List) Set(i int, v Hashable_hash_Params) error {
	return s.List.SetStruct(i, v.Struct)
}

// Hashable_hash_Params_Promise is a wrapper for a Hashable_hash_Params promised by a client call.
type Hashable_hash_Params_Promise struct{ *capnp.Pipeline }

func (p Hashable_hash_Params_Promise) Struct() (Hashable_hash_Params, error) {
	s, err := p.Pipeline.Struct()
	return Hashable_hash_Params{s}, err
}

type Hashable_hash_Results struct{ capnp.Struct }

// Hashable_hash_Results_TypeID is the unique identifier for the type Hashable_hash_Results.
const Hashable_hash_Results_TypeID = 0x89bef2e379450ee3

func NewHashable_hash_Results(s *capnp.Segment) (Hashable_hash_Results, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hashable_hash_Results{st}, err
}

func NewRootHashable_hash_Results(s *capnp.Segment) (Hashable_hash_Results, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return Hashable_hash_Results{st}, err
}

func ReadRootHashable_hash_Results(msg *capnp.Message) (Hashable_hash_Results, error) {
	root, err := msg.RootPtr()
	return Hashable_hash_Results{root.Struct()}, err
}

func (s Hashable_hash_Results) String() string {
	str, _ := text.Marshal(0x89bef2e379450ee3, s.Struct)
	return str
}

func (s Hashable_hash_Results) Hash() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s Hashable_hash_Results) HasHash() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Hashable_hash_Results) HashBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s Hashable_hash_Results) SetHash(v string) error {
	return s.Struct.SetText(0, v)
}

// Hashable_hash_Results_List is a list of Hashable_hash_Results.
type Hashable_hash_Results_List struct{ capnp.List }

// NewHashable_hash_Results creates a new list of Hashable_hash_Results.
func NewHashable_hash_Results_List(s *capnp.Segment, sz int32) (Hashable_hash_Results_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return Hashable_hash_Results_List{l}, err
}

func (s Hashable_hash_Results_List) At(i int) Hashable_hash_Results {
	return Hashable_hash_Results{s.List.Struct(i)}
}

func (s Hashable_hash_Results_List) Set(i int, v Hashable_hash_Results) error {
	return s.List.SetStruct(i, v.Struct)
}

// Hashable_hash_Results_Promise is a wrapper for a Hashable_hash_Results promised by a client call.
type Hashable_hash_Results_Promise struct{ *capnp.Pipeline }

func (p Hashable_hash_Results_Promise) Struct() (Hashable_hash_Results, error) {
	s, err := p.Pipeline.Struct()
	return Hashable_hash_Results{s}, err
}

type AssertionSection struct{ capnp.Struct }

// AssertionSection_TypeID is the unique identifier for the type AssertionSection.
const AssertionSection_TypeID = 0xecb99c4b492abf4a

func NewAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func NewRootAssertionSection(s *capnp.Segment) (AssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5})
	return AssertionSection{st}, err
}

func ReadRootAssertionSection(msg *capnp.Message) (AssertionSection, error) {
	root, err := msg.RootPtr()
	return AssertionSection{root.Struct()}, err
}

func (s AssertionSection) String() string {
	str, _ := text.Marshal(0xecb99c4b492abf4a, s.Struct)
	return str
}

func (s AssertionSection) SubjectName() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectNameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s AssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(1)
	return Obj_List{List: p.List()}, err
}

func (s AssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s AssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s AssertionSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AssertionSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AssertionSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AssertionSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(3, v)
}

func (s AssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s AssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s AssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s AssertionSection) SetContext(v string) error {
	return s.Struct.SetText(4, v)
}

// AssertionSection_List is a list of AssertionSection.
type AssertionSection_List struct{ capnp.List }

// NewAssertionSection creates a new list of AssertionSection.
func NewAssertionSection_List(s *capnp.Segment, sz int32) (AssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 5}, sz)
	return AssertionSection_List{l}, err
}

func (s AssertionSection_List) At(i int) AssertionSection { return AssertionSection{s.List.Struct(i)} }

func (s AssertionSection_List) Set(i int, v AssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AssertionSection_Promise is a wrapper for a AssertionSection promised by a client call.
type AssertionSection_Promise struct{ *capnp.Pipeline }

func (p AssertionSection_Promise) Struct() (AssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AssertionSection{s}, err
}

type ShardSection struct{ capnp.Struct }

// ShardSection_TypeID is the unique identifier for the type ShardSection.
const ShardSection_TypeID = 0xc0d7ec4193d608ef

func NewShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func NewRootShardSection(s *capnp.Segment) (ShardSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6})
	return ShardSection{st}, err
}

func ReadRootShardSection(msg *capnp.Message) (ShardSection, error) {
	root, err := msg.RootPtr()
	return ShardSection{root.Struct()}, err
}

func (s ShardSection) String() string {
	str, _ := text.Marshal(0xc0d7ec4193d608ef, s.Struct)
	return str
}

func (s ShardSection) Content() (AssertionSection_List, error) {
	p, err := s.Struct.Ptr(0)
	return AssertionSection_List{List: p.List()}, err
}

func (s ShardSection) HasContent() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetContent(v AssertionSection_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AssertionSection_List, preferring placement in s's segment.
func (s ShardSection) NewContent(n int32) (AssertionSection_List, error) {
	l, err := NewAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ShardSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(1)
	return Signature_List{List: p.List()}, err
}

func (s ShardSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ShardSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ShardSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s ShardSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ShardSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ShardSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ShardSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ShardSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s ShardSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ShardSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s ShardSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

func (s ShardSection) RangeFrom() (string, error) {
	p, err := s.Struct.Ptr(4)
	return p.Text(), err
}

func (s ShardSection) HasRangeFrom() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeFromBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(4)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeFrom(v string) error {
	return s.Struct.SetText(4, v)
}

func (s ShardSection) RangeTo() (string, error) {
	p, err := s.Struct.Ptr(5)
	return p.Text(), err
}

func (s ShardSection) HasRangeTo() bool {
	p, err := s.Struct.Ptr(5)
	return p.IsValid() || err != nil
}

func (s ShardSection) RangeToBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(5)
	return p.TextBytes(), err
}

func (s ShardSection) SetRangeTo(v string) error {
	return s.Struct.SetText(5, v)
}

// ShardSection_List is a list of ShardSection.
type ShardSection_List struct{ capnp.List }

// NewShardSection creates a new list of ShardSection.
func NewShardSection_List(s *capnp.Segment, sz int32) (ShardSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 6}, sz)
	return ShardSection_List{l}, err
}

func (s ShardSection_List) At(i int) ShardSection { return ShardSection{s.List.Struct(i)} }

func (s ShardSection_List) Set(i int, v ShardSection) error { return s.List.SetStruct(i, v.Struct) }

// ShardSection_Promise is a wrapper for a ShardSection promised by a client call.
type ShardSection_Promise struct{ *capnp.Pipeline }

func (p ShardSection_Promise) Struct() (ShardSection, error) {
	s, err := p.Pipeline.Struct()
	return ShardSection{s}, err
}

type ZoneSection struct{ capnp.Struct }

// ZoneSection_TypeID is the unique identifier for the type ZoneSection.
const ZoneSection_TypeID = 0xcfe323414bf5b98f

func NewZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func NewRootZoneSection(s *capnp.Segment) (ZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return ZoneSection{st}, err
}

func ReadRootZoneSection(msg *capnp.Message) (ZoneSection, error) {
	root, err := msg.RootPtr()
	return ZoneSection{root.Struct()}, err
}

func (s ZoneSection) String() string {
	str, _ := text.Marshal(0xcfe323414bf5b98f, s.Struct)
	return str
}

func (s ZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(0)
	return Signature_List{List: p.List()}, err
}

func (s ZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s ZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s ZoneSection) SubjectZone() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s ZoneSection) HasSubjectZone() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SubjectZoneBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s ZoneSection) SetSubjectZone(v string) error {
	return s.Struct.SetText(1, v)
}

func (s ZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s ZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s ZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s ZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s ZoneSection) Content() (capnp.PointerList, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.PointerList{List: p.List()}, err
}

func (s ZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s ZoneSection) SetContent(v capnp.PointerList) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated capnp.PointerList, preferring placement in s's segment.
func (s ZoneSection) NewContent(n int32) (capnp.PointerList, error) {
	l, err := capnp.NewPointerList(s.Struct.Segment(), n)
	if err != nil {
		return capnp.PointerList{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// ZoneSection_List is a list of ZoneSection.
type ZoneSection_List struct{ capnp.List }

// NewZoneSection creates a new list of ZoneSection.
func NewZoneSection_List(s *capnp.Segment, sz int32) (ZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return ZoneSection_List{l}, err
}

func (s ZoneSection_List) At(i int) ZoneSection { return ZoneSection{s.List.Struct(i)} }

func (s ZoneSection_List) Set(i int, v ZoneSection) error { return s.List.SetStruct(i, v.Struct) }

// ZoneSection_Promise is a wrapper for a ZoneSection promised by a client call.
type ZoneSection_Promise struct{ *capnp.Pipeline }

func (p ZoneSection_Promise) Struct() (ZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return ZoneSection{s}, err
}

type QuerySection struct{ capnp.Struct }

// QuerySection_TypeID is the unique identifier for the type QuerySection.
const QuerySection_TypeID = 0xcc368c426d5175df

func NewQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return QuerySection{st}, err
}

func NewRootQuerySection(s *capnp.Segment) (QuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4})
	return QuerySection{st}, err
}

func ReadRootQuerySection(msg *capnp.Message) (QuerySection, error) {
	root, err := msg.RootPtr()
	return QuerySection{root.Struct()}, err
}

func (s QuerySection) String() string {
	str, _ := text.Marshal(0xcc368c426d5175df, s.Struct)
	return str
}

func (s QuerySection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s QuerySection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s QuerySection) Name() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s QuerySection) HasName() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s QuerySection) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s QuerySection) SetName(v string) error {
	return s.Struct.SetText(1, v)
}

func (s QuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s QuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s QuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s QuerySection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s QuerySection) Type() ObjectType {
	return ObjectType(s.Struct.Uint16(0))
}

func (s QuerySection) SetType(v ObjectType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s QuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s QuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s QuerySection) Options() (QueryOption_List, error) {
	p, err := s.Struct.Ptr(3)
	return QueryOption_List{List: p.List()}, err
}

func (s QuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s QuerySection) SetOptions(v QueryOption_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated QueryOption_List, preferring placement in s's segment.
func (s QuerySection) NewOptions(n int32) (QueryOption_List, error) {
	l, err := NewQueryOption_List(s.Struct.Segment(), n)
	if err != nil {
		return QueryOption_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// QuerySection_List is a list of QuerySection.
type QuerySection_List struct{ capnp.List }

// NewQuerySection creates a new list of QuerySection.
func NewQuerySection_List(s *capnp.Segment, sz int32) (QuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 4}, sz)
	return QuerySection_List{l}, err
}

func (s QuerySection_List) At(i int) QuerySection { return QuerySection{s.List.Struct(i)} }

func (s QuerySection_List) Set(i int, v QuerySection) error { return s.List.SetStruct(i, v.Struct) }

// QuerySection_Promise is a wrapper for a QuerySection promised by a client call.
type QuerySection_Promise struct{ *capnp.Pipeline }

func (p QuerySection_Promise) Struct() (QuerySection, error) {
	s, err := p.Pipeline.Struct()
	return QuerySection{s}, err
}

type QueryOption uint16

// QueryOption_TypeID is the unique identifier for the type QueryOption.
const QueryOption_TypeID = 0xabc9ff4fbb5f0b04

// Values of QueryOption.
const (
	QueryOption_minE2ELatency            QueryOption = 0
	QueryOption_minLastHopAnswerSize     QueryOption = 1
	QueryOption_minInfoLeakage           QueryOption = 2
	QueryOption_cachedAnswersOnly        QueryOption = 3
	QueryOption_expiredAssertionsOk      QueryOption = 4
	QueryOption_tokenTracing             QueryOption = 5
	QueryOption_noVerificationDelegation QueryOption = 6
	QueryOption_noProactiveCaching       QueryOption = 7
)

// String returns the enum's constant name.
func (c QueryOption) String() string {
	switch c {
	case QueryOption_minE2ELatency:
		return "minE2ELatency"
	case QueryOption_minLastHopAnswerSize:
		return "minLastHopAnswerSize"
	case QueryOption_minInfoLeakage:
		return "minInfoLeakage"
	case QueryOption_cachedAnswersOnly:
		return "cachedAnswersOnly"
	case QueryOption_expiredAssertionsOk:
		return "expiredAssertionsOk"
	case QueryOption_tokenTracing:
		return "tokenTracing"
	case QueryOption_noVerificationDelegation:
		return "noVerificationDelegation"
	case QueryOption_noProactiveCaching:
		return "noProactiveCaching"

	default:
		return ""
	}
}

// QueryOptionFromString returns the enum value with a name,
// or the zero value if there's no such value.
func QueryOptionFromString(c string) QueryOption {
	switch c {
	case "minE2ELatency":
		return QueryOption_minE2ELatency
	case "minLastHopAnswerSize":
		return QueryOption_minLastHopAnswerSize
	case "minInfoLeakage":
		return QueryOption_minInfoLeakage
	case "cachedAnswersOnly":
		return QueryOption_cachedAnswersOnly
	case "expiredAssertionsOk":
		return QueryOption_expiredAssertionsOk
	case "tokenTracing":
		return QueryOption_tokenTracing
	case "noVerificationDelegation":
		return QueryOption_noVerificationDelegation
	case "noProactiveCaching":
		return QueryOption_noProactiveCaching

	default:
		return 0
	}
}

type QueryOption_List struct{ capnp.List }

func NewQueryOption_List(s *capnp.Segment, sz int32) (QueryOption_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return QueryOption_List{l.List}, err
}

func (l QueryOption_List) At(i int) QueryOption {
	ul := capnp.UInt16List{List: l.List}
	return QueryOption(ul.At(i))
}

func (l QueryOption_List) Set(i int, v QueryOption) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type ObjectType uint16

// ObjectType_TypeID is the unique identifier for the type ObjectType.
const ObjectType_TypeID = 0xfd4f6f21b80818a8

// Values of ObjectType.
const (
	ObjectType_oTName        ObjectType = 0
	ObjectType_oTIP6Addr     ObjectType = 1
	ObjectType_oTIP4Addr     ObjectType = 2
	ObjectType_oTRedirection ObjectType = 3
	ObjectType_oTDelegation  ObjectType = 4
	ObjectType_oTNameset     ObjectType = 5
	ObjectType_oTCertInfo    ObjectType = 6
	ObjectType_oTServiceInfo ObjectType = 7
	ObjectType_oTRegistrar   ObjectType = 8
	ObjectType_oTRegistrant  ObjectType = 9
	ObjectType_oTInfraKey    ObjectType = 10
	ObjectType_oTExtraKey    ObjectType = 11
)

// String returns the enum's constant name.
func (c ObjectType) String() string {
	switch c {
	case ObjectType_oTName:
		return "oTName"
	case ObjectType_oTIP6Addr:
		return "oTIP6Addr"
	case ObjectType_oTIP4Addr:
		return "oTIP4Addr"
	case ObjectType_oTRedirection:
		return "oTRedirection"
	case ObjectType_oTDelegation:
		return "oTDelegation"
	case ObjectType_oTNameset:
		return "oTNameset"
	case ObjectType_oTCertInfo:
		return "oTCertInfo"
	case ObjectType_oTServiceInfo:
		return "oTServiceInfo"
	case ObjectType_oTRegistrar:
		return "oTRegistrar"
	case ObjectType_oTRegistrant:
		return "oTRegistrant"
	case ObjectType_oTInfraKey:
		return "oTInfraKey"
	case ObjectType_oTExtraKey:
		return "oTExtraKey"

	default:
		return ""
	}
}

// ObjectTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ObjectTypeFromString(c string) ObjectType {
	switch c {
	case "oTName":
		return ObjectType_oTName
	case "oTIP6Addr":
		return ObjectType_oTIP6Addr
	case "oTIP4Addr":
		return ObjectType_oTIP4Addr
	case "oTRedirection":
		return ObjectType_oTRedirection
	case "oTDelegation":
		return ObjectType_oTDelegation
	case "oTNameset":
		return ObjectType_oTNameset
	case "oTCertInfo":
		return ObjectType_oTCertInfo
	case "oTServiceInfo":
		return ObjectType_oTServiceInfo
	case "oTRegistrar":
		return ObjectType_oTRegistrar
	case "oTRegistrant":
		return ObjectType_oTRegistrant
	case "oTInfraKey":
		return ObjectType_oTInfraKey
	case "oTExtraKey":
		return ObjectType_oTExtraKey

	default:
		return 0
	}
}

type ObjectType_List struct{ capnp.List }

func NewObjectType_List(s *capnp.Segment, sz int32) (ObjectType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ObjectType_List{l.List}, err
}

func (l ObjectType_List) At(i int) ObjectType {
	ul := capnp.UInt16List{List: l.List}
	return ObjectType(ul.At(i))
}

func (l ObjectType_List) Set(i int, v ObjectType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type SubjectAddr struct{ capnp.Struct }

// SubjectAddr_TypeID is the unique identifier for the type SubjectAddr.
const SubjectAddr_TypeID = 0xe48faf3beca83da0

func NewSubjectAddr(s *capnp.Segment) (SubjectAddr, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SubjectAddr{st}, err
}

func NewRootSubjectAddr(s *capnp.Segment) (SubjectAddr, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return SubjectAddr{st}, err
}

func ReadRootSubjectAddr(msg *capnp.Message) (SubjectAddr, error) {
	root, err := msg.RootPtr()
	return SubjectAddr{root.Struct()}, err
}

func (s SubjectAddr) String() string {
	str, _ := text.Marshal(0xe48faf3beca83da0, s.Struct)
	return str
}

func (s SubjectAddr) AddressFamily() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s SubjectAddr) HasAddressFamily() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SubjectAddr) AddressFamilyBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s SubjectAddr) SetAddressFamily(v string) error {
	return s.Struct.SetText(0, v)
}

func (s SubjectAddr) PrefixLength() uint32 {
	return s.Struct.Uint32(0)
}

func (s SubjectAddr) SetPrefixLength(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SubjectAddr) Address() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s SubjectAddr) HasAddress() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SubjectAddr) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s SubjectAddr) SetAddress(v string) error {
	return s.Struct.SetText(1, v)
}

// SubjectAddr_List is a list of SubjectAddr.
type SubjectAddr_List struct{ capnp.List }

// NewSubjectAddr creates a new list of SubjectAddr.
func NewSubjectAddr_List(s *capnp.Segment, sz int32) (SubjectAddr_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return SubjectAddr_List{l}, err
}

func (s SubjectAddr_List) At(i int) SubjectAddr { return SubjectAddr{s.List.Struct(i)} }

func (s SubjectAddr_List) Set(i int, v SubjectAddr) error { return s.List.SetStruct(i, v.Struct) }

// SubjectAddr_Promise is a wrapper for a SubjectAddr promised by a client call.
type SubjectAddr_Promise struct{ *capnp.Pipeline }

func (p SubjectAddr_Promise) Struct() (SubjectAddr, error) {
	s, err := p.Pipeline.Struct()
	return SubjectAddr{s}, err
}

type AddressAssertionSection struct{ capnp.Struct }

// AddressAssertionSection_TypeID is the unique identifier for the type AddressAssertionSection.
const AddressAssertionSection_TypeID = 0xdbf0b70cd25804f1

func NewAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func NewRootAddressAssertionSection(s *capnp.Segment) (AddressAssertionSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressAssertionSection{st}, err
}

func ReadRootAddressAssertionSection(msg *capnp.Message) (AddressAssertionSection, error) {
	root, err := msg.RootPtr()
	return AddressAssertionSection{root.Struct()}, err
}

func (s AddressAssertionSection) String() string {
	str, _ := text.Marshal(0xdbf0b70cd25804f1, s.Struct)
	return str
}

func (s AddressAssertionSection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressAssertionSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressAssertionSection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressAssertionSection) Content() (Obj_List, error) {
	p, err := s.Struct.Ptr(1)
	return Obj_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasContent() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetContent(v Obj_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated Obj_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewContent(n int32) (Obj_List, error) {
	l, err := NewObj_List(s.Struct.Segment(), n)
	if err != nil {
		return Obj_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(2)
	return Signature_List{List: p.List()}, err
}

func (s AddressAssertionSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressAssertionSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

func (s AddressAssertionSection) Context() (string, error) {
	p, err := s.Struct.Ptr(3)
	return p.Text(), err
}

func (s AddressAssertionSection) HasContext() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressAssertionSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(3)
	return p.TextBytes(), err
}

func (s AddressAssertionSection) SetContext(v string) error {
	return s.Struct.SetText(3, v)
}

// AddressAssertionSection_List is a list of AddressAssertionSection.
type AddressAssertionSection_List struct{ capnp.List }

// NewAddressAssertionSection creates a new list of AddressAssertionSection.
func NewAddressAssertionSection_List(s *capnp.Segment, sz int32) (AddressAssertionSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressAssertionSection_List{l}, err
}

func (s AddressAssertionSection_List) At(i int) AddressAssertionSection {
	return AddressAssertionSection{s.List.Struct(i)}
}

func (s AddressAssertionSection_List) Set(i int, v AddressAssertionSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressAssertionSection_Promise is a wrapper for a AddressAssertionSection promised by a client call.
type AddressAssertionSection_Promise struct{ *capnp.Pipeline }

func (p AddressAssertionSection_Promise) Struct() (AddressAssertionSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressAssertionSection{s}, err
}

func (p AddressAssertionSection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddressZoneSection struct{ capnp.Struct }

// AddressZoneSection_TypeID is the unique identifier for the type AddressZoneSection.
const AddressZoneSection_TypeID = 0xb6e3b8602914cca6

func NewAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func NewRootAddressZoneSection(s *capnp.Segment) (AddressZoneSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4})
	return AddressZoneSection{st}, err
}

func ReadRootAddressZoneSection(msg *capnp.Message) (AddressZoneSection, error) {
	root, err := msg.RootPtr()
	return AddressZoneSection{root.Struct()}, err
}

func (s AddressZoneSection) String() string {
	str, _ := text.Marshal(0xb6e3b8602914cca6, s.Struct)
	return str
}

func (s AddressZoneSection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressZoneSection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressZoneSection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressZoneSection) Signatures() (Signature_List, error) {
	p, err := s.Struct.Ptr(1)
	return Signature_List{List: p.List()}, err
}

func (s AddressZoneSection) HasSignatures() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetSignatures(v Signature_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewSignatures sets the signatures field to a newly
// allocated Signature_List, preferring placement in s's segment.
func (s AddressZoneSection) NewSignatures(n int32) (Signature_List, error) {
	l, err := NewSignature_List(s.Struct.Segment(), n)
	if err != nil {
		return Signature_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s AddressZoneSection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressZoneSection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressZoneSection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressZoneSection) Content() (AddressAssertionSection_List, error) {
	p, err := s.Struct.Ptr(3)
	return AddressAssertionSection_List{List: p.List()}, err
}

func (s AddressZoneSection) HasContent() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressZoneSection) SetContent(v AddressAssertionSection_List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewContent sets the content field to a newly
// allocated AddressAssertionSection_List, preferring placement in s's segment.
func (s AddressZoneSection) NewContent(n int32) (AddressAssertionSection_List, error) {
	l, err := NewAddressAssertionSection_List(s.Struct.Segment(), n)
	if err != nil {
		return AddressAssertionSection_List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

// AddressZoneSection_List is a list of AddressZoneSection.
type AddressZoneSection_List struct{ capnp.List }

// NewAddressZoneSection creates a new list of AddressZoneSection.
func NewAddressZoneSection_List(s *capnp.Segment, sz int32) (AddressZoneSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 4}, sz)
	return AddressZoneSection_List{l}, err
}

func (s AddressZoneSection_List) At(i int) AddressZoneSection {
	return AddressZoneSection{s.List.Struct(i)}
}

func (s AddressZoneSection_List) Set(i int, v AddressZoneSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressZoneSection_Promise is a wrapper for a AddressZoneSection promised by a client call.
type AddressZoneSection_Promise struct{ *capnp.Pipeline }

func (p AddressZoneSection_Promise) Struct() (AddressZoneSection, error) {
	s, err := p.Pipeline.Struct()
	return AddressZoneSection{s}, err
}

func (p AddressZoneSection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type AddressQuerySection struct{ capnp.Struct }

// AddressQuerySection_TypeID is the unique identifier for the type AddressQuerySection.
const AddressQuerySection_TypeID = 0xaa95f2c2154f801a

func NewAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return AddressQuerySection{st}, err
}

func NewRootAddressQuerySection(s *capnp.Segment) (AddressQuerySection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5})
	return AddressQuerySection{st}, err
}

func ReadRootAddressQuerySection(msg *capnp.Message) (AddressQuerySection, error) {
	root, err := msg.RootPtr()
	return AddressQuerySection{root.Struct()}, err
}

func (s AddressQuerySection) String() string {
	str, _ := text.Marshal(0xaa95f2c2154f801a, s.Struct)
	return str
}

func (s AddressQuerySection) SubjectAddr() (SubjectAddr, error) {
	p, err := s.Struct.Ptr(0)
	return SubjectAddr{Struct: p.Struct()}, err
}

func (s AddressQuerySection) HasSubjectAddr() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetSubjectAddr(v SubjectAddr) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSubjectAddr sets the subjectAddr field to a newly
// allocated SubjectAddr struct, preferring placement in s's segment.
func (s AddressQuerySection) NewSubjectAddr() (SubjectAddr, error) {
	ss, err := NewSubjectAddr(s.Struct.Segment())
	if err != nil {
		return SubjectAddr{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s AddressQuerySection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s AddressQuerySection) HasToken() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetToken(v []byte) error {
	return s.Struct.SetData(1, v)
}

func (s AddressQuerySection) Context() (string, error) {
	p, err := s.Struct.Ptr(2)
	return p.Text(), err
}

func (s AddressQuerySection) HasContext() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) ContextBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(2)
	return p.TextBytes(), err
}

func (s AddressQuerySection) SetContext(v string) error {
	return s.Struct.SetText(2, v)
}

func (s AddressQuerySection) Types() (capnp.Int32List, error) {
	p, err := s.Struct.Ptr(3)
	return capnp.Int32List{List: p.List()}, err
}

func (s AddressQuerySection) HasTypes() bool {
	p, err := s.Struct.Ptr(3)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetTypes(v capnp.Int32List) error {
	return s.Struct.SetPtr(3, v.List.ToPtr())
}

// NewTypes sets the types field to a newly
// allocated capnp.Int32List, preferring placement in s's segment.
func (s AddressQuerySection) NewTypes(n int32) (capnp.Int32List, error) {
	l, err := capnp.NewInt32List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.Int32List{}, err
	}
	err = s.Struct.SetPtr(3, l.List.ToPtr())
	return l, err
}

func (s AddressQuerySection) Expires() int64 {
	return int64(s.Struct.Uint64(0))
}

func (s AddressQuerySection) SetExpires(v int64) {
	s.Struct.SetUint64(0, uint64(v))
}

func (s AddressQuerySection) Options() (QueryOption_List, error) {
	p, err := s.Struct.Ptr(4)
	return QueryOption_List{List: p.List()}, err
}

func (s AddressQuerySection) HasOptions() bool {
	p, err := s.Struct.Ptr(4)
	return p.IsValid() || err != nil
}

func (s AddressQuerySection) SetOptions(v QueryOption_List) error {
	return s.Struct.SetPtr(4, v.List.ToPtr())
}

// NewOptions sets the options field to a newly
// allocated QueryOption_List, preferring placement in s's segment.
func (s AddressQuerySection) NewOptions(n int32) (QueryOption_List, error) {
	l, err := NewQueryOption_List(s.Struct.Segment(), n)
	if err != nil {
		return QueryOption_List{}, err
	}
	err = s.Struct.SetPtr(4, l.List.ToPtr())
	return l, err
}

// AddressQuerySection_List is a list of AddressQuerySection.
type AddressQuerySection_List struct{ capnp.List }

// NewAddressQuerySection creates a new list of AddressQuerySection.
func NewAddressQuerySection_List(s *capnp.Segment, sz int32) (AddressQuerySection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 5}, sz)
	return AddressQuerySection_List{l}, err
}

func (s AddressQuerySection_List) At(i int) AddressQuerySection {
	return AddressQuerySection{s.List.Struct(i)}
}

func (s AddressQuerySection_List) Set(i int, v AddressQuerySection) error {
	return s.List.SetStruct(i, v.Struct)
}

// AddressQuerySection_Promise is a wrapper for a AddressQuerySection promised by a client call.
type AddressQuerySection_Promise struct{ *capnp.Pipeline }

func (p AddressQuerySection_Promise) Struct() (AddressQuerySection, error) {
	s, err := p.Pipeline.Struct()
	return AddressQuerySection{s}, err
}

func (p AddressQuerySection_Promise) SubjectAddr() SubjectAddr_Promise {
	return SubjectAddr_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type NotificationSection struct{ capnp.Struct }

// NotificationSection_TypeID is the unique identifier for the type NotificationSection.
const NotificationSection_TypeID = 0x844542c0bc50f248

func NewNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func NewRootNotificationSection(s *capnp.Segment) (NotificationSection, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return NotificationSection{st}, err
}

func ReadRootNotificationSection(msg *capnp.Message) (NotificationSection, error) {
	root, err := msg.RootPtr()
	return NotificationSection{root.Struct()}, err
}

func (s NotificationSection) String() string {
	str, _ := text.Marshal(0x844542c0bc50f248, s.Struct)
	return str
}

func (s NotificationSection) Token() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s NotificationSection) HasToken() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s NotificationSection) SetToken(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s NotificationSection) Type() NotificationType {
	return NotificationType(s.Struct.Uint16(0))
}

func (s NotificationSection) SetType(v NotificationType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s NotificationSection) Data() (string, error) {
	p, err := s.Struct.Ptr(1)
	return p.Text(), err
}

func (s NotificationSection) HasData() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s NotificationSection) DataBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return p.TextBytes(), err
}

func (s NotificationSection) SetData(v string) error {
	return s.Struct.SetText(1, v)
}

// NotificationSection_List is a list of NotificationSection.
type NotificationSection_List struct{ capnp.List }

// NewNotificationSection creates a new list of NotificationSection.
func NewNotificationSection_List(s *capnp.Segment, sz int32) (NotificationSection_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return NotificationSection_List{l}, err
}

func (s NotificationSection_List) At(i int) NotificationSection {
	return NotificationSection{s.List.Struct(i)}
}

func (s NotificationSection_List) Set(i int, v NotificationSection) error {
	return s.List.SetStruct(i, v.Struct)
}

// NotificationSection_Promise is a wrapper for a NotificationSection promised by a client call.
type NotificationSection_Promise struct{ *capnp.Pipeline }

func (p NotificationSection_Promise) Struct() (NotificationSection, error) {
	s, err := p.Pipeline.Struct()
	return NotificationSection{s}, err
}

type NotificationType uint16

// NotificationType_TypeID is the unique identifier for the type NotificationType.
const NotificationType_TypeID = 0xcbd9cd959c154da1

// Values of NotificationType.
const (
	NotificationType_heartbeat          NotificationType = 0
	NotificationType_capHashNotKnown    NotificationType = 1
	NotificationType_badMessage         NotificationType = 2
	NotificationType_rcvInconsistentMsg NotificationType = 3
	NotificationType_noAssertionsExist  NotificationType = 4
	NotificationType_msgTooLarge        NotificationType = 5
	NotificationType_unspecServerErr    NotificationType = 6
	NotificationType_serverNotCapable   NotificationType = 7
	NotificationType_noAssertionAvail   NotificationType = 8
)

// String returns the enum's constant name.
func (c NotificationType) String() string {
	switch c {
	case NotificationType_heartbeat:
		return "heartbeat"
	case NotificationType_capHashNotKnown:
		return "capHashNotKnown"
	case NotificationType_badMessage:
		return "badMessage"
	case NotificationType_rcvInconsistentMsg:
		return "rcvInconsistentMsg"
	case NotificationType_noAssertionsExist:
		return "noAssertionsExist"
	case NotificationType_msgTooLarge:
		return "msgTooLarge"
	case NotificationType_unspecServerErr:
		return "unspecServerErr"
	case NotificationType_serverNotCapable:
		return "serverNotCapable"
	case NotificationType_noAssertionAvail:
		return "noAssertionAvail"

	default:
		return ""
	}
}

// NotificationTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func NotificationTypeFromString(c string) NotificationType {
	switch c {
	case "heartbeat":
		return NotificationType_heartbeat
	case "capHashNotKnown":
		return NotificationType_capHashNotKnown
	case "badMessage":
		return NotificationType_badMessage
	case "rcvInconsistentMsg":
		return NotificationType_rcvInconsistentMsg
	case "noAssertionsExist":
		return NotificationType_noAssertionsExist
	case "msgTooLarge":
		return NotificationType_msgTooLarge
	case "unspecServerErr":
		return NotificationType_unspecServerErr
	case "serverNotCapable":
		return NotificationType_serverNotCapable
	case "noAssertionAvail":
		return NotificationType_noAssertionAvail

	default:
		return 0
	}
}

type NotificationType_List struct{ capnp.List }

func NewNotificationType_List(s *capnp.Segment, sz int32) (NotificationType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return NotificationType_List{l.List}, err
}

func (l NotificationType_List) At(i int) NotificationType {
	ul := capnp.UInt16List{List: l.List}
	return NotificationType(ul.At(i))
}

func (l NotificationType_List) Set(i int, v NotificationType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type Signature struct{ capnp.Struct }

// Signature_TypeID is the unique identifier for the type Signature.
const Signature_TypeID = 0xcf61cf65228728bc

func NewSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func NewRootSignature(s *capnp.Segment) (Signature, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return Signature{st}, err
}

func ReadRootSignature(msg *capnp.Message) (Signature, error) {
	root, err := msg.RootPtr()
	return Signature{root.Struct()}, err
}

func (s Signature) String() string {
	str, _ := text.Marshal(0xcf61cf65228728bc, s.Struct)
	return str
}

func (s Signature) KeySpace() KeySpaceID {
	return KeySpaceID(s.Struct.Uint16(0))
}

func (s Signature) SetKeySpace(v KeySpaceID) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Signature) Algorithm() SignatureAlgorithmType {
	return SignatureAlgorithmType(s.Struct.Uint16(2))
}

func (s Signature) SetAlgorithm(v SignatureAlgorithmType) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s Signature) ValidSince() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s Signature) SetValidSince(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s Signature) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s Signature) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

func (s Signature) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Signature) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Signature) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Signature_List is a list of Signature.
type Signature_List struct{ capnp.List }

// NewSignature creates a new list of Signature.
func NewSignature_List(s *capnp.Segment, sz int32) (Signature_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return Signature_List{l}, err
}

func (s Signature_List) At(i int) Signature { return Signature{s.List.Struct(i)} }

func (s Signature_List) Set(i int, v Signature) error { return s.List.SetStruct(i, v.Struct) }

// Signature_Promise is a wrapper for a Signature promised by a client call.
type Signature_Promise struct{ *capnp.Pipeline }

func (p Signature_Promise) Struct() (Signature, error) {
	s, err := p.Pipeline.Struct()
	return Signature{s}, err
}

type KeySpaceID uint16

// KeySpaceID_TypeID is the unique identifier for the type KeySpaceID.
const KeySpaceID_TypeID = 0x8c6fb57d7725ec03

// Values of KeySpaceID.
const (
	KeySpaceID_rainsKeySpace KeySpaceID = 0
)

// String returns the enum's constant name.
func (c KeySpaceID) String() string {
	switch c {
	case KeySpaceID_rainsKeySpace:
		return "rainsKeySpace"

	default:
		return ""
	}
}

// KeySpaceIDFromString returns the enum value with a name,
// or the zero value if there's no such value.
func KeySpaceIDFromString(c string) KeySpaceID {
	switch c {
	case "rainsKeySpace":
		return KeySpaceID_rainsKeySpace

	default:
		return 0
	}
}

type KeySpaceID_List struct{ capnp.List }

func NewKeySpaceID_List(s *capnp.Segment, sz int32) (KeySpaceID_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return KeySpaceID_List{l.List}, err
}

func (l KeySpaceID_List) At(i int) KeySpaceID {
	ul := capnp.UInt16List{List: l.List}
	return KeySpaceID(ul.At(i))
}

func (l KeySpaceID_List) Set(i int, v KeySpaceID) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type SignatureAlgorithmType uint16

// SignatureAlgorithmType_TypeID is the unique identifier for the type SignatureAlgorithmType.
const SignatureAlgorithmType_TypeID = 0x824d474588994863

// Values of SignatureAlgorithmType.
const (
	SignatureAlgorithmType_ed25519  SignatureAlgorithmType = 0
	SignatureAlgorithmType_ed448    SignatureAlgorithmType = 1
	SignatureAlgorithmType_ecdsa256 SignatureAlgorithmType = 2
	SignatureAlgorithmType_ecdsa384 SignatureAlgorithmType = 3
)

// String returns the enum's constant name.
func (c SignatureAlgorithmType) String() string {
	switch c {
	case SignatureAlgorithmType_ed25519:
		return "ed25519"
	case SignatureAlgorithmType_ed448:
		return "ed448"
	case SignatureAlgorithmType_ecdsa256:
		return "ecdsa256"
	case SignatureAlgorithmType_ecdsa384:
		return "ecdsa384"

	default:
		return ""
	}
}

// SignatureAlgorithmTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func SignatureAlgorithmTypeFromString(c string) SignatureAlgorithmType {
	switch c {
	case "ed25519":
		return SignatureAlgorithmType_ed25519
	case "ed448":
		return SignatureAlgorithmType_ed448
	case "ecdsa256":
		return SignatureAlgorithmType_ecdsa256
	case "ecdsa384":
		return SignatureAlgorithmType_ecdsa384

	default:
		return 0
	}
}

type SignatureAlgorithmType_List struct{ capnp.List }

func NewSignatureAlgorithmType_List(s *capnp.Segment, sz int32) (SignatureAlgorithmType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return SignatureAlgorithmType_List{l.List}, err
}

func (l SignatureAlgorithmType_List) At(i int) SignatureAlgorithmType {
	ul := capnp.UInt16List{List: l.List}
	return SignatureAlgorithmType(ul.At(i))
}

func (l SignatureAlgorithmType_List) Set(i int, v SignatureAlgorithmType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type HashAlgorithmType uint16

// HashAlgorithmType_TypeID is the unique identifier for the type HashAlgorithmType.
const HashAlgorithmType_TypeID = 0xef2306d933494fde

// Values of HashAlgorithmType.
const (
	HashAlgorithmType_noHashAlgo HashAlgorithmType = 0
	HashAlgorithmType_sha256     HashAlgorithmType = 1
	HashAlgorithmType_sha384     HashAlgorithmType = 2
	HashAlgorithmType_sha512     HashAlgorithmType = 3
)

// String returns the enum's constant name.
func (c HashAlgorithmType) String() string {
	switch c {
	case HashAlgorithmType_noHashAlgo:
		return "noHashAlgo"
	case HashAlgorithmType_sha256:
		return "sha256"
	case HashAlgorithmType_sha384:
		return "sha384"
	case HashAlgorithmType_sha512:
		return "sha512"

	default:
		return ""
	}
}

// HashAlgorithmTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func HashAlgorithmTypeFromString(c string) HashAlgorithmType {
	switch c {
	case "noHashAlgo":
		return HashAlgorithmType_noHashAlgo
	case "sha256":
		return HashAlgorithmType_sha256
	case "sha384":
		return HashAlgorithmType_sha384
	case "sha512":
		return HashAlgorithmType_sha512

	default:
		return 0
	}
}

type HashAlgorithmType_List struct{ capnp.List }

func NewHashAlgorithmType_List(s *capnp.Segment, sz int32) (HashAlgorithmType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return HashAlgorithmType_List{l.List}, err
}

func (l HashAlgorithmType_List) At(i int) HashAlgorithmType {
	ul := capnp.UInt16List{List: l.List}
	return HashAlgorithmType(ul.At(i))
}

func (l HashAlgorithmType_List) Set(i int, v HashAlgorithmType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type PublicKey struct{ capnp.Struct }

// PublicKey_TypeID is the unique identifier for the type PublicKey.
const PublicKey_TypeID = 0x8cfae4b3459db40f

func NewPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func NewRootPublicKey(s *capnp.Segment) (PublicKey, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PublicKey{st}, err
}

func ReadRootPublicKey(msg *capnp.Message) (PublicKey, error) {
	root, err := msg.RootPtr()
	return PublicKey{root.Struct()}, err
}

func (s PublicKey) String() string {
	str, _ := text.Marshal(0x8cfae4b3459db40f, s.Struct)
	return str
}

func (s PublicKey) Type() SignatureAlgorithmType {
	return SignatureAlgorithmType(s.Struct.Uint16(0))
}

func (s PublicKey) SetType(v SignatureAlgorithmType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s PublicKey) Key() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s PublicKey) HasKey() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PublicKey) SetKey(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s PublicKey) ValidFrom() int64 {
	return int64(s.Struct.Uint64(8))
}

func (s PublicKey) SetValidFrom(v int64) {
	s.Struct.SetUint64(8, uint64(v))
}

func (s PublicKey) ValidUntil() int64 {
	return int64(s.Struct.Uint64(16))
}

func (s PublicKey) SetValidUntil(v int64) {
	s.Struct.SetUint64(16, uint64(v))
}

// PublicKey_List is a list of PublicKey.
type PublicKey_List struct{ capnp.List }

// NewPublicKey creates a new list of PublicKey.
func NewPublicKey_List(s *capnp.Segment, sz int32) (PublicKey_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PublicKey_List{l}, err
}

func (s PublicKey_List) At(i int) PublicKey { return PublicKey{s.List.Struct(i)} }

func (s PublicKey_List) Set(i int, v PublicKey) error { return s.List.SetStruct(i, v.Struct) }

// PublicKey_Promise is a wrapper for a PublicKey promised by a client call.
type PublicKey_Promise struct{ *capnp.Pipeline }

func (p PublicKey_Promise) Struct() (PublicKey, error) {
	s, err := p.Pipeline.Struct()
	return PublicKey{s}, err
}

type CertificateObject struct{ capnp.Struct }

// CertificateObject_TypeID is the unique identifier for the type CertificateObject.
const CertificateObject_TypeID = 0xfb92513472887325

func NewCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertificateObject{st}, err
}

func NewRootCertificateObject(s *capnp.Segment) (CertificateObject, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return CertificateObject{st}, err
}

func ReadRootCertificateObject(msg *capnp.Message) (CertificateObject, error) {
	root, err := msg.RootPtr()
	return CertificateObject{root.Struct()}, err
}

func (s CertificateObject) String() string {
	str, _ := text.Marshal(0xfb92513472887325, s.Struct)
	return str
}

func (s CertificateObject) Type() ProtocolType {
	return ProtocolType(s.Struct.Uint16(0))
}

func (s CertificateObject) SetType(v ProtocolType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s CertificateObject) Usage() CertificateUsage {
	return CertificateUsage(s.Struct.Uint16(2))
}

func (s CertificateObject) SetUsage(v CertificateUsage) {
	s.Struct.SetUint16(2, uint16(v))
}

func (s CertificateObject) HashAlgo() HashAlgorithmType {
	return HashAlgorithmType(s.Struct.Uint16(4))
}

func (s CertificateObject) SetHashAlgo(v HashAlgorithmType) {
	s.Struct.SetUint16(4, uint16(v))
}

func (s CertificateObject) Data() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s CertificateObject) HasData() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s CertificateObject) SetData(v []byte) error {
	return s.Struct.SetData(0, v)
}

// CertificateObject_List is a list of CertificateObject.
type CertificateObject_List struct{ capnp.List }

// NewCertificateObject creates a new list of CertificateObject.
func NewCertificateObject_List(s *capnp.Segment, sz int32) (CertificateObject_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return CertificateObject_List{l}, err
}

func (s CertificateObject_List) At(i int) CertificateObject {
	return CertificateObject{s.List.Struct(i)}
}

func (s CertificateObject_List) Set(i int, v CertificateObject) error {
	return s.List.SetStruct(i, v.Struct)
}

// CertificateObject_Promise is a wrapper for a CertificateObject promised by a client call.
type CertificateObject_Promise struct{ *capnp.Pipeline }

func (p CertificateObject_Promise) Struct() (CertificateObject, error) {
	s, err := p.Pipeline.Struct()
	return CertificateObject{s}, err
}

type ProtocolType uint16

// ProtocolType_TypeID is the unique identifier for the type ProtocolType.
const ProtocolType_TypeID = 0x869060a0330d319a

// Values of ProtocolType.
const (
	ProtocolType_pTUnspecified ProtocolType = 0
	ProtocolType_pTTLS         ProtocolType = 1
)

// String returns the enum's constant name.
func (c ProtocolType) String() string {
	switch c {
	case ProtocolType_pTUnspecified:
		return "pTUnspecified"
	case ProtocolType_pTTLS:
		return "pTTLS"

	default:
		return ""
	}
}

// ProtocolTypeFromString returns the enum value with a name,
// or the zero value if there's no such value.
func ProtocolTypeFromString(c string) ProtocolType {
	switch c {
	case "pTUnspecified":
		return ProtocolType_pTUnspecified
	case "pTTLS":
		return ProtocolType_pTTLS

	default:
		return 0
	}
}

type ProtocolType_List struct{ capnp.List }

func NewProtocolType_List(s *capnp.Segment, sz int32) (ProtocolType_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return ProtocolType_List{l.List}, err
}

func (l ProtocolType_List) At(i int) ProtocolType {
	ul := capnp.UInt16List{List: l.List}
	return ProtocolType(ul.At(i))
}

func (l ProtocolType_List) Set(i int, v ProtocolType) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type CertificateUsage uint16

// CertificateUsage_TypeID is the unique identifier for the type CertificateUsage.
const CertificateUsage_TypeID = 0xaddb752fe579c78e

// Values of CertificateUsage.
const (
	CertificateUsage_cUTrustAnchor CertificateUsage = 0
	CertificateUsage_cUEndEntity   CertificateUsage = 1
)

// String returns the enum's constant name.
func (c CertificateUsage) String() string {
	switch c {
	case CertificateUsage_cUTrustAnchor:
		return "cUTrustAnchor"
	case CertificateUsage_cUEndEntity:
		return "cUEndEntity"

	default:
		return ""
	}
}

// CertificateUsageFromString returns the enum value with a name,
// or the zero value if there's no such value.
func CertificateUsageFromString(c string) CertificateUsage {
	switch c {
	case "cUTrustAnchor":
		return CertificateUsage_cUTrustAnchor
	case "cUEndEntity":
		return CertificateUsage_cUEndEntity

	default:
		return 0
	}
}

type CertificateUsage_List struct{ capnp.List }

func NewCertificateUsage_List(s *capnp.Segment, sz int32) (CertificateUsage_List, error) {
	l, err := capnp.NewUInt16List(s, sz)
	return CertificateUsage_List{l.List}, err
}

func (l CertificateUsage_List) At(i int) CertificateUsage {
	ul := capnp.UInt16List{List: l.List}
	return CertificateUsage(ul.At(i))
}

func (l CertificateUsage_List) Set(i int, v CertificateUsage) {
	ul := capnp.UInt16List{List: l.List}
	ul.Set(i, uint16(v))
}

type ServiceInfo struct{ capnp.Struct }

// ServiceInfo_TypeID is the unique identifier for the type ServiceInfo.
const ServiceInfo_TypeID = 0xeab015ca8107699b

func NewServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func NewRootServiceInfo(s *capnp.Segment) (ServiceInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfo{st}, err
}

func ReadRootServiceInfo(msg *capnp.Message) (ServiceInfo, error) {
	root, err := msg.RootPtr()
	return ServiceInfo{root.Struct()}, err
}

func (s ServiceInfo) String() string {
	str, _ := text.Marshal(0xeab015ca8107699b, s.Struct)
	return str
}

func (s ServiceInfo) Name() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s ServiceInfo) HasName() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfo) NameBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s ServiceInfo) SetName(v string) error {
	return s.Struct.SetText(0, v)
}

func (s ServiceInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s ServiceInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s ServiceInfo) Priority() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfo) SetPriority(v uint32) {
	s.Struct.SetUint32(4, v)
}

// ServiceInfo_List is a list of ServiceInfo.
type ServiceInfo_List struct{ capnp.List }

// NewServiceInfo creates a new list of ServiceInfo.
func NewServiceInfo_List(s *capnp.Segment, sz int32) (ServiceInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfo_List{l}, err
}

func (s ServiceInfo_List) At(i int) ServiceInfo { return ServiceInfo{s.List.Struct(i)} }

func (s ServiceInfo_List) Set(i int, v ServiceInfo) error { return s.List.SetStruct(i, v.Struct) }

// ServiceInfo_Promise is a wrapper for a ServiceInfo promised by a client call.
type ServiceInfo_Promise struct{ *capnp.Pipeline }

func (p ServiceInfo_Promise) Struct() (ServiceInfo, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfo{s}, err
}

type Obj struct{ capnp.Struct }

// Obj_TypeID is the unique identifier for the type Obj.
const Obj_TypeID = 0xeb2fd278248964aa

func NewObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func NewRootObj(s *capnp.Segment) (Obj, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Obj{st}, err
}

func ReadRootObj(msg *capnp.Message) (Obj, error) {
	root, err := msg.RootPtr()
	return Obj{root.Struct()}, err
}

func (s Obj) String() string {
	str, _ := text.Marshal(0xeb2fd278248964aa, s.Struct)
	return str
}

func (s Obj) Type() ObjectType {
	return ObjectType(s.Struct.Uint16(0))
}

func (s Obj) SetType(v ObjectType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s Obj) Value() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s Obj) HasValue() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Obj) SetValue(v []byte) error {
	return s.Struct.SetData(0, v)
}

// Obj_List is a list of Obj.
type Obj_List struct{ capnp.List }

// NewObj creates a new list of Obj.
func NewObj_List(s *capnp.Segment, sz int32) (Obj_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Obj_List{l}, err
}

func (s Obj_List) At(i int) Obj { return Obj{s.List.Struct(i)} }

func (s Obj_List) Set(i int, v Obj) error { return s.List.SetStruct(i, v.Struct) }

// Obj_Promise is a wrapper for a Obj promised by a client call.
type Obj_Promise struct{ *capnp.Pipeline }

func (p Obj_Promise) Struct() (Obj, error) {
	s, err := p.Pipeline.Struct()
	return Obj{s}, err
}

const schema_fb2d77234707241e = "x\xda\xacz{t\x14e\x9a\xf7\xf3TuS\x98[" +
	"\xa7\xa8\xe4H\"\xa1?\xb9\x9c\x11\xe6\x80\x10\x08h<" +
	"\x9c\xa4\x83\x19\x09$$\x95\xee\x8cC\xbea\xa5\xba\xfb" +
	"\xa5S\xd0\xa9\x0aU\xd5!\xcd\x91\x8d\xb8^\xc0\xd5Q" +
	"Y\x98\x03\x0c\x9e\x01\x8fz\xd4\x95#\xee\xe8\xac\xa8\x8c" +
	"\x97\xf52\xa0\xac\x97\xc3\xcc\xcazC\x19\xd7\x1d\x85\x99" +
	"\x913\xceYt\xdd\xda\xf3\xbe\xd5\xd5]}\x89\x10f" +
	"\xff\xe0\xa4\xba\xfby\xdf\xf7\xb9\xfc\x9e\xe7\xf9=o1" +
	"\xaf\xbf\xac\x95\x9b\xef\xef\xae\x01\x90O\xfb'\xd8\xb1e" +
	"\xbb\xb7\xb6_\xd7u3\x88\xb5\x9c=u\x86p\xdd\xf4" +
	"\x8ds\xbe\x01\xc0\x05\x95eQ\x94./\x13\x00\xa4\x86" +
	"\xb2\x04\xa0\xbd\xa1\xfa\xfd\x1f\xbeSw\xcb\xdf\x81\xfc}" +
	"D\x00\x9f\x00\xb0\xa0\xa3\xec,\x02J\xab\xcbZ\x00\xed" +
	"eg{\x9e{\xa1\xad\xfd\x16\x90k\x11s{\xf99" +
	"*\xb9\xa5l9J;\xd9v\xf7\x96=\x0ehw\xbd" +
	">\xe7q\xbdL\xb8\x15\xc4\xef\xbb\xbb\xcd*\xff\x04\xc1" +
	"g\xef\x99_\xb9`\xdf\x9a{n+R\xa9\xa1|\x12" +
	"Js\xca\xe9\x1e\xb3\xca\x17\x03\xda/\xedx\xfc\xcbs" +
	"\xf3\xacm\xce\x1e~\xa4\x9b\xcc/\x7f\x89\xaa\x14*\xa7" +
	"*\x9d\xaajO\x9f:\xfb\xabm N\xcd\x0a(\xe5" +
	"\xfdT`\x90\x09\xf0\xa7gn\xdc\xfc\x94~g\xd1Y" +
	"w\x95s(\xedfg\xed,\x0f\x02\xda\x81'\xefk" +
	"\xff\xc5\xef\xbe\xbe\x93Z\xc7{\xac\xa3{Jw\x95\x7f" +
	"\x9d\x15\xfe\x0c\xd0n\xad~\xfd\xee\xdb\x87+\xb7;\xe7" +
	"2\xe36T\xf4R\xe3\xda\xaf\x8f~<w\xfa\xd5;" +
	"<f\xaf\xae\xf8\x9c\xfer\xe0\x86\xa7\xae\xfd\xc3\x7f~" +
	"\xb1\xcb\xf3\x8b\\\xf1\x0c\xfd\xe5\xbf\xe6\xfe\xff\xffn\x8e" +
	"<\xbf\xd7kf\xa8\x82y\xbe\xaf\x82Z\xf1\xab\xaa\xbf" +
	"\x19\xd9\xb7\xe6\xf5\xbd^3S\x15Q*\xb0\x85\x09|" +
	"v\xf5\xce\xab\xf6\x1f\x9a\xf7s\x10k\xf9<3\xf7W" +
	"\xf4\xa3\xf4T\x05]\xf0D\xc5\xed\x9c\xb4\xba\xea{\x00" +
	"\xf6o\xff\xc3\x94\x16\xfb\xcb\xf7y\xd4\xef\xab\xea\xa7\xaa" +
	"L\xba\xa6\xfa\xcc\xc9\xea\xc5\xf7{\x94\x0cU1\xf5[" +
	":\xe5\xaf\xef\xfdL\xbf\xbf\xf0\x08\xa9\xa9\xea\xac\x14\xaa" +
	"\xa2\xbeYRu\x9dD\xe8\x93\xbd\xe9\xf7;R\x8b\xde" +
	"\xff\xf0A\xcf6]U\xcc\xd6\xfa\x9b\xbak_:\xbb" +
	"\xf3\xd1B\x10\xf9\xa9\xcc\x92\xaa\xe5(\xc9U\x8e\xf8\xf5" +
	"\x08h\xfb\xcaox\xb6\xdb>\xf2\x8fE\xf1;\x1c(" +
	"C\xe9X\x80\x1e{$\xf0\x1a\xa0\xfd\x93\xd7\xd2\x9f^" +
	"\x99z\xef@\x91$\xa9nD)UM%7TS" +
	"T\xc5\xdf\xfaI\xd7\x03\x1fo\xfd\xa7\"K6W\x9f" +
	"\x95\xb61\xc1[\xabo\x97~C\x9f\xec\x87\xde\xa8\x99" +
	"\xb5\xe6\xe9S\xbf\x04\xb1\xd6\xab.3\xe9pu\x1bJ" +
	"\xc7\xd8\x82#\xd5\x14\x16\xa3\xff\x92>Z\xf7L\xcf!" +
	"o\x0a\xbd\"~B\xe3tB\xa4q\xea\x1bx\xb5\xad" +
	"\xf5\xfe\xdb\x9e\xf5\xf8\xe5\x9c\xf8\x0e\xf5\xcb\x9c\xda7\xb7" +
	"\xfe\xfb\xa6\xda\xc3\xa5\xce9#NB\xe9[\x91\x9es" +
	"N\xfc\x0c\xf0\x9b\xd1\xf6\xdb\xa6\x0e,9\xec\x81\x8b_" +
	"bYQ+\xd1S\xfe8\xf1\xb7\xff\x10:\xfdo/" +
	"\x14\xec5\x81\x0a6I\x93Pj\x97X`%\xe6b" +
	"\xc3\xf8\xf3\x0d'\xde[\xf3\xaa\x17}\x87j&q\x80" +
	"\xd2\xdb5t\xbb\xd7\x16'\xb6\xfd\xfc\xd0\xaeW=J" +
	"\x7fY\xc3q\xe0\xb3\xf7w\xd5\xee\xddy\xec\xc4\xebE" +
	">\xff\xb4\xa6\x11\xa5\xafj\xa8\xc6_\xd6|\x04h\x7f" +
	"\x94\x92\x07\xdb\xee\\\xf4\x06\x0d;Wh\xdf\xee\xdaI" +
	"(=RK\x1f\x1f\xace:=w\xc5\xed\xd3\xc8\x9b" +
	"\xca\x9b%\x93\x11/\xfdZ\xaa\xbc\x94J_ri\x90" +
	"J\xdf}\xe8\xab\x15\xa1\xe9\xa7\xde,\xe5\xbbY\x93\xcb" +
	"P\xbaz2]\xd74\x99\xc6\xe8!\xc1\xde\xdd\xea\xbf" +
	"\xe3\xb8\xc7\x9a\xf9ue\xd4\x9a/^>\xfcd\\\xf9" +
	"\xc3q\xaf#f\xd5\x1d\xa5~]RG\x1d\xf1\xa5\xef" +
	"G\xefT\xfc\xf3\x9f\xde+u\xce\xea\xbau(m\xa8" +
	"\xa3\xe7\x0c\xd6\xd1sNl\xfdE\xd3/\x8f\xfc\xeb\x07" +
	"^,\xa8\xf5\x9f\xd3\xdd6\xd7\xd3\xddf=\xf3E\xef" +
	"\xc6\xa6\xbf|\xe8Qd\x7f=K\xb5\xe9S\x0e.\x0a" +
	"HO\x9d\xf4\xa6\xfb\xce\xfa^\xbat?[Z\xff\xd8" +
	"C?}\xf7g\xf7~\x0cb\xad/\xcf\xef/\xd6O" +
	"B\xe9\xedz\x01 \xfcF=\x8f\xe1w\xeb9\x04\xb0" +
	"\xf7TW\xed\xb9|\xd1\xe8)O\xbe\x1f\xab_N\x8f" +
	"\xda\xb7\xe4\xe1\xd3\xd7<~\xf7\xefJ\xd6\xf4C\xf5e" +
	"(\x1d\xa1\xbbI\xaf\xd4\xd3\x9a\xfe3U\xd8r\xb4\xf6" +
	"\xe0\xe7\x85\xd2LCrY\x19J\xa9\xcbX\x9e]F" +
	"\xa5\x1f\x8do\x9b1\xf2\xce\x95_\x94\x92\x96*\xa7\x1c" +
	"\x95\xea\xa6\xd0\xa7\xda)\x1b\x01\xed\xe5\xcf\xcf\xeeX\xb1" +
	"\xf7\xd0\xe9\x02\xdf\xb2\xb2\xb0aJ#J[\xa8\xf0\x82" +
	"\xcdSX\xc4?\xec\xeeXpb\xc2\xf4?\x16\x01\xef" +
	"PC3JG\x1a\x98\xca\x0d\xb4\xab\xbd\xff\xc1\xba\x87" +
	"\x84\x9f\xfe\xe9\xcfE\x95\xf1L\xc34\x94\xbee\x92\xe7" +
	"\x1a\x04\xfa\x0f\xc0\xfe\xfb\xda\x93\x9fD\xf6^\xf3\x95'" +
	"&\x1f7\xb0\x98LV\x8fT-=x\xf8/\x9e_" +
	"~\xd3\xc0`\xb3\xfd\xd4\xfe9\xcf~t\xc77E\xc1" +
	"8\xd6\xc0\xa1t\x82\xee\x1b>\xde\xc0c\xf8d\x03\x0b" +
	"\xc6Ls\xab\xb1P\xde\xfeMI'~@\xf5?\xc3" +
	"\xb4\xfa}\x03\x85\xd1\xc3\x93'>}\xb9\xde\xfdm\x91" +
	"\xa5/N\xe5P:6\x95.:2\xf5{\xd4)\xc1" +
	"\xe7\xcf\xbd`-\xfe\xdb\xff\xf1\xe2ww\x90\xb5\x91\x03" +
	"\xc1\x16\x98c\x0f\x19\xba\xa5_i(>U3\xbb\xcc" +
	"\xc4\xdc\x982\xa4\x0d5\x87\xd5\x84\xa6X)\x83\x84\x92" +
	"\x09\xddP\xad\x81\xc1\x88\x90\x1e\"=\x88r5r\x00" +
	"\xe2\xac6\x00D\xf1\xf2F\x00\xe4\xc4\xba\xe5\x00\xc8\x8b" +
	"\xb5\xcb\x01FI\xbc\xb1\xa9i\xfe\xd5A\x12_\xb8\xf0" +
	"*\x9b\xc4\xe2\xa6\xd2\xd8\xb4\x08\x00\x9c\xe7\x05W-\xa4" +
	"\xcf\xee\xb1\x13\xf2\x8e\xed\"\xa6\xa9$H\x98\xc4,U" +
	"\xd7\xaeW\xad\x81\xb0\x9a\x98;\xac$\xd5x\x9ff\xa9" +
	"\xc9\x19\xbd$h\xa6\x92\x96)\xfbx\x1f\x80\x0f\x01\xc4" +
	"\xca~\x00\xb9\x82Gy2\x87\xb6+\x0a\xbc\x9aD?" +
	"p\xe8\x07\x1c\xc3\xc4\x95\xba\xa5\xaeUc\x0a=)s" +
	" \x005\xb0\"\xbbu{#\x80\xdc\xca\xa3\xdc\xc9!" +
	"b\x0dMY\xb1c6\x80|-\x8fr\x0f\x87\"\x87" +
	"5\xcc\x1b]\xf4\xcbe<\xca\x11\x0e\x83\x96\xbe\x9eh" +
	"X\x09\x1cV\x02\x06\xac\xf4\x10\xc1@\xae*\x02b\x00" +
	"0\x10W,\x05+\x80\xc3\x0a\x8f\x82\x17\xec\x8c\x1f\x18" +
	"\xfa\xe0\x8c\x1e\xc5\x10\x94A3\xbb\x9a\xcf[\xddC\xbf" +
	"\x8d\xe9\xc9Hz\x08Y\xdc&2ME\x83\xc5\xad\xb2" +
	"\x91\xc6 \xd2\xa7\x99C$\x06Au\xadJ\xe2\xc1\xa1" +
	"H\xa43<.e\x06\x14s`F/a!\x01o" +
	"L\xa8?&\xf2(\xd7p\x18\xa0BE\xa6\xe6\xc7b" +
	"\x99b\x0e(\xd1$\xf1l\xc8\xe7\x07\xf9\xbc\x1b\xe6[" +
	"\xbf\x82\xa4\xc3CJ\x8ct\\\xcbB\xeac\xb6\xfb\x0d" +
	"\x00\xdbPT\xcd\\A\xd2\x10d\x02\xd9\xf5\\\xbe\xf7" +
	"R\xd1\x96\xa4\x1a[A\xd2\x0c\xf2Y=\x14\xaa\xc7\x8f" +
	"y\x94\x07r\x88 \xd3\x00\xe45<\xcaI\x0f\"\xd4" +
	"^\x00y\x80G\xd9\xe2P\xe4\xb9\x1a\xe4\x01\xc4\x0d\x14" +
	"\xaaC<\xca7rY`d\xb9\xb8\x03\x0ca=I" +
	"\xbb\xd8\xb1\xddX\x03\x0ef\xc1<\x0e\x84\xe7{\xb5G" +
	"1\x94A4\xc7\x15\xdf8I\x12\x8b\x84\xd5\x04\x8dI" +
	"\x80F9\xbb\xdc\x7f\xa1\xf0ha\x07\x8f\xef\xdc\x98A" +
	"\x14\x8b\x84\xadT\xb4d\xc6\xb7\xe5\xc00j:+Q" +
	"\xcc\xf1]\x0a\xf01\x9d\xd2\xa1Y\xc4\x18V\x92s\xa3" +
	"$\xa1j\x0ckB\xc1\xf6\x8d\xb9\xed\x83L\xea<\xe8" +
	"-a\x03\xaf&(p\xae\xe0\xfd\x1e\xe2\x8b\xa3\xed\xc0" +
	"8\x9a4\x1fg\x03'\xcdD\x011\xcb0\xd0\xe5\x81" +
	"R\x1d6\x03'U\xa2\x80\\\x96=\xa2;CH\x88" +
	"\xbd\xc0\x89\xe7\x04\xe4\xb3$\x0c\xddF$\x9e1\x80\x13" +
	"?\x15\xd0\x97e\x12\xe8v\x00\xf1D?p\xe2\xdb\x02" +
	"\xfa\xb3t\x07]\x9a'\xbe\xb2\x098\xf1\xb0\x80\x13\xb2" +
	"d\x1f\xdd\x01D|\x82\xae{D@!;\xbe\xa1\xcb" +
	"c\xc4\xfb\xa8.;\x05\x9c\x98\xed\x92\xe8\x8e\x8c\xe26" +
	"\xban\x8b\x80\x97d\xa7\x1ctg715\x1b8Q" +
	"\x15\x02\xa6\x9a0[\xb1E\x89\xc7\xc3j\xa2\x15m\x17" +
	"p\x80\xb9O\xa1$\x04\x93a&h'\x88\xb5T\xd7" +
	",\x02\xfc\x88\xe5|\x0c\xa7\xa2\xeb\x08\xb4\xc4\xac~]" +
	"#\xadh\xbb\xd0\x01>\x15m\xcdK\xa1\xd6\xfc\xe4i" +
	"u\x0aI+\xad\x8c\x1eJ\x00\x90\x9b\x05<}\xea;" +
	"AD\x11\xce_<\xc4{\x94@^\x86p\x85Y\x1c" +
	"di\xcc\x0a\x19\x03\x94;i\xa2;\xea\x8a\"\xf5\xa7" +
	"_\xc8X\xd4\x838\xae<\xa5Q(\xca\xd3|\x8bC" +
	"\xf1\xb8ALSN\x11#\x9d\xd7-'g\xf3fw" +
	"\x14@\xde\xc5\xa3\xfc\x00\x87\xa2[\x1c\xf7\xd3d\xda\xcb" +
	"\xa3\xfc0-\x8e\x9cS\x1c\x1f\xa4\x09\xbc\x8fG\xf91" +
	"Z\x1cy\xa78>B%\x1f\xe0Q~\x81C\xf4\xd5" +
	"\xa0\x0f@<L\x05\x9f\xe6Q~\x99C\xd1\xef\xabA" +
	"?\x80\xf8\"\xfd\xf29\x1e\xe5w9\xb4M\x1a\xfe\x98" +
	"\x15\x02!\x1e7\xb0:\xc7]\x01\xb1\x1a\x0a\x9a\xf1h" +
	"\x8cbg\xc4r\xf39Hk\xb0\x89U\x80=<\xa2" +
	"\x0f8\xfa8JF\x86T\x83\x98nq\x1d\xd5\x87\xa8" +
	"\xb5Y\xb1@n\xfe\x04\xa4_\x8e\xd1\x82\x98\xab\xba\x87" +
	"r\x9e\xfa\x7f\xcc\xf6UN\x03\xee{\x94\x11\xa7\xbeM" +
	"\x8c8\xc9\xdb\x01\xd0'\xca\xf7\x03\xa0_\x94\xd7\x01\xe0" +
	"\x04\xb1\xeb(\x00\x0a\xa2\xbc\x07\xc0\x1eT\xb5\xf6\xc6\xf6" +
	"N\x05\x82\x16\xd1bi\xfa\xb9S1\xade\xa8\x0f\x85" +
	"4s#1\x02au\x13\xa1_whk\xf5Nh" +
	"!\xcaz%A\xec\x98\x12\x1b \xf1\x90\x86T\xc6\xec" +
	"\xd6\x92\x98\xb6\x1d\xfb\xe2!4MbP\xf5\x04\xb3{" +
	"\xbd\xcd\x1c\x151\x14\x08\xc4T-ak\xfa\x0f\x89\xa1" +
	"\xaeU9\x87 ]K\x92$\xa18\xb6\xd8\x9a\xdec" +
	"\xe8J\xccBu\x98,Ub\x03*\xaf%\xc6p\xc2" +
	"Rz\x02cY$\xd8G\x91W\xccD\xa2\x00v\xac" +
	"/b\xa4L+\x04A-6\xa0\x1bv\xac\xaf]\x8b" +
	"\xb7k\x16\x08\xaa\x95\x1e#/:4+\xc8\x92\x90m" +
	"\xc9\xf2\xc2\xbd\xc2@\xf7nD\x9c\xdf\x08\x9c8\x93\x96" +
	"Yw\xdcAw\x90\x12\xeb\xa6\x01'V\x0aN\x89o" +
	"E\x81h\xf1\xfc\xd4)\x99\x01\xb4\xcc\xb8\x09P\xc0\x0d" +
	"\xa2\x1e\x1e\xe0\xe2_\xed\xcf\xf0\x80[<\xf8\xdfB\x11" +
	"|#\x8f\xf2V\x0f\xfeo\xa5_\xde\xc4\xa3\xbc\xf7\xfc" +
	"\xb0\xb6\xcd\x0c?\x07>\x87\xdf\xea\xdc\x84\xec\x00\xb3\x10" +
	"\xee\xceg\xcd\xca-\xc8\x0e\xaf\x05H\x1e\x1f7\xc8\x10" +
	"Qo\x0b\x9d\x96k\xa1\x82\xaaY,\xb7|\xe3<\xc0" +
	"i\x0a\x19z\x89c\xf1\xdc^\xca\xe7\x9c\x0d\x1c\x9e\xeb" +
	"\x09Hc\x8e\xace\x03B\xda2Q\xba\xd1\x13\x904" +
	"\x8d\xd2\x08\x8f\xf2\x0eO@\xee]\x07 \xdf\xe3T\xa9" +
	"Ru$\xe7H\xd1\xd3>\x1cG^P|\xec\x982" +
	"\xa4D\xd5\xa4\x0a\x01K\xcd\xc9U8uh\\\xbeb" +
	"\x15\xbc\x14\x11\xf7\x06\xc2T\x13\x05JT\x8fY\xbd\xc2" +
	"\x03\x8a\x11w\x0eA\xad\xa0\xceS\x0f\xee\xe0Q>\xe8" +
	"q\xeb\x01\xea\xc1\xc7x\x94\x7f\xedq\xeb+4#^" +
	"\xe6Q~\xcb\xe3\xd6ct\xf9\xafy\x94\x8fs(\xfa" +
	"2\x85\xfemJ\x97\xdf\xe2Q~\x9f\x16z\xbfS\xe8" +
	"OP\xc9\xe3<\xca'\xb9\x12\xd8\xcd^\x0e\x8c\xcb\xe5" +
	"\x99\xc4\xea\x07A\xd7H~b\xe4\x12\xc56\x14-A" +
	"2\xc4\xdb\x95a\xdfE\xf4\".(\\@x\\\x9e" +
	"\xe2\xb0\x94,\xa4\xc7\x1ap6yt\xcb\x9eS~\xc1" +
	"9\x19J2\xba\xe40~\x13\xdc\x0d\xc6\x9a~\x83Z" +
	"$3\xda\xcf`Q#\xbd\xac0+7\xb3\x0e\xb5\xba" +
	"\x9fu\xa8U{X\x87Z\xb5\x9du\xa8UQ\xd6\xa1" +
	"\xfanv:\xd4\x1d\x008\x91\xfd\xb1\x07\x88bXQ" +
	"\xa2\x00Z\x14\xdet\x04Y\xc9\xe9\xd6\x0aM\xdf\xa8A" +
	"T\x893\xbd\xf9\x04\xb1\x8d\xd8p\x87\x16\xd354U" +
	"\x93\x06\xb6\x8b7i\xd7\x09\xb1\xa6\x84\xb4\xe1\xb6\x8f\xa8" +
	"&Z\xf6\xa0\x99\x88\xe8z\xa7\x02\x82\x91 v\x8aM" +
	"\xaca\xc2\x1b\xc3\xc4h7\x0c0\x09}Z\xa9[K" +
	"i2%\x09\xebO\xb9]B\xc3\x8a\x9a\xf4\xf0\xb8\x12" +
	"=z\x0c\x947fP\xbe\xcf\x83\xf2\xfbf{(\x8e" +
	"\x8b\xf2\xfdm9\x8a\x83\x19\x90?8\xdb\xc3p|\xe8" +
	"\x80\xfc\x91\xb6\x0c\xc3\xa1\x89\xe3\xe7\x1d\x90\x1f\xa0_>" +
	"\xecP\x9c\x82\xab\x03M\x19\x1c\x13\xa2\xee\xf8\x98\xbd\x0a" +
	"r\xc6\xc7\x8b'/\\\xe1\xfdO\x8bs\x01D\xbdR" +
	"\x93\xf5\xca\xe6\xe5\x9e\xce\xe5z\xe5V\x9a\xbc\xb7\xf0(" +
	"\xdf\xe3\x19\x80\xef\xa2\x05\xe1N\x1e\xe5]\x9e\x01xg" +
	"\x7f\xce\xa9.\xc7\xf3\xfa\xd4^\x9f\x99\xdb\x01\x00\x03\xb9" +
	"\x175\x8eq\xb6\x92\xb9\x8c\xa2iY49;\xe4>" +
	"\xacj\xc0\xc7\xc8w\x8e\xcb\xce\xe5\x8b;d\x97F\x86" +
	"\xb7\xcd\x17\xf6\xf9~O\x07q}\x90\x8ef:\xc88" +
	"\xfb\xfc\xff]\xd1*nJ\xde\x81\xb8\xea\xaf\xabX\x99" +
	"R\x02\x17\xd3\xc0\xdd\xb5\x17\xd7\x96J\x92\xb0\x90K]" +
	"\xc3$\x16\xa0\x7f/\x84\x89Q\xbf\xc7y\x94o\xf2D" +
	"hs\x7f&B\xbb<\x11\xda\xd9\x96i\xfc\x17\xc0\xc4" +
	"\x8a\xfbR\xf6\x86{<}\xa9\xa8\x03]\xdc\x95\xa0{" +
	"K\xe3uuo\xe1\xf5h\xc1\x85\xd2xNr\xc7\xef" +
	"\x11\xabhh\x1dc@&Z\xbcd\xbb\xf3\x02\x80h" +
	"\xf1\xf3\\\xe7i\xfa\xd2\x0cU\xb20\xdd\x83\x98\x11\x07" +
	"\x11\xcb\xce?\xa3S\x15\x8a\xf0[\xc0v2A\x8e\xc7" +
	"\x8d\xa2;`#w\xdf\xebB\xa9\x8b2\xc3N\x1e\xe5" +
	"\x1fy\x0a^\x1fEM\x0f\x8f\xf2\x8f9\xb4\x15\x07\xa7" +
	"?\x80\xa02\xa8&\xd3\x1e\xf3\xc8Zu\xa4\x93@@" +
	"KX\x038\x118\x9c\x088\x9a\x11?\x8f\x17\xc2\xc4" +
	"\x18Vc\x84NxEZ\xce\xbe\xd0\x9b\xea\xe59\xd5" +
	"\xf3\x1aL`H7,\x14\x80C\x81)\xa0\xd2J\x9b" +
	"\xa6u8\xa3\xe4\x18\x9d\xa2;\xba\xceQfbV\x99" +
	"Y\xf4\xe0\x19<\xca\xf3r\xca\xcc\xa1\xed\xf4\x0a\x1e\xe5" +
	"\x85\xdcX\xbd+8\xac$S\xe4<u\xd9\x93\xf9\xc1" +
	"\x98\x9b\xf9\x9e\xfe\x14-\xd5\x9f<\x157\x9b\xf9\xbb\xfb" +
	"3m\xe7IO\xe6?A\x97\x1f\xe4Q~\xce\xc3M" +
	"\x0f\xd1\xe5O:\x17\x13n9X\x09BQs\xfe\xab" +
	"\x8b\xc0\x05\x92\xd3\xd2\x8e\xa1L+\xf3\xb2\xa6e`0" +
	"\x92\xff\xb2\xa6\x9f1\xba\x99\xcd\x8c\xd154;/k" +
	"\x9a\x19Ur\xd6\x01\x9f\xd0[\xcc\x01\xa5\xb1i\x11\xfd" +
	"\xb3\xe0\xaa\x85\xf4O\xd3\xfc\xc61N\xf3\x94\x07\xc1\x09" +
	"B\x0f\xef\xf7\xce\xce\xe3|\xafSXM\x84q\x93]" +
	"w\xf8\x19+\xc5\xad\xcep\xf701\"K{ \xaf" +
	"\x80\xec\xb1S\x86\xd6<2\xc7PP\xd5\xccf+i" +
	"\x9a\xbc1|\xfe\xeb\x8c\x96n\x16\xab\xb1_\x0f\xe4&" +
	"\xceF\xef\xfb\x81\x0c\xfc\xd4\xe5\xb9\xf7\x03.i\xdc@" +
	"W'y\x94Gr9\x92\xfd\x7f1\x99\x1cIQG" +
	"` \xf7?\x1b2\xe4g \x13~\x878e_\x85" +
	"z\xdf6}wb9\xe6P\xdc\xb0l\x9e\xc7\xb4\xdc" +
	"\xd6\xcc\x80\xb3\xa5\x97\x01gs/\x03N\xda`\xa3@" +
	"j\x1d\x1b\x056\xf4\xb2Q`\xb0\x9f\x8d\x02\xaa\xc1F" +
	"\x01B\xe7\x83KD\x85\x8a\x949#D\xb9\xb8\xaa\x1f" +
	"\xa0E\x8f\xacT\x06\x89\xadG:z\x16\x85\xe2q@" +
	"\x83=/\xcc>\xf7\x92\xb8j\x10p\x92\xdb\xd6#\xce" +
	"\xcd\x13\x042\x1f\xe9j\x93\xd0\xe9B\x8f\xd0hth" +
	"\xc0\xaf\xd5m=\xe2\x14G\x08\xb2\xf2\xc8\xf6I\xa8\xa6" +
	"\x05\x82\xa1\x18\xb9O\x01C\xd1\xe8\xca\x0em\xad\xa1\xac" +
	"\x00\x9e\xa4m=\xd2>b\xb9\x1f.\xb2\x17\x9e\xef\x1d" +
	"EA\x06\xffo\x00\x00\x00\xff\xffE\x83\\\x07"

func init() {
	schemas.Register(schema_fb2d77234707241e,
		0x824d474588994863,
		0x838419d256dc1071,
		0x844542c0bc50f248,
		0x85070a6faf2dcb4d,
		0x869060a0330d319a,
		0x897430f9f1af94c2,
		0x89bef2e379450ee3,
		0x8c6fb57d7725ec03,
		0x8cfae4b3459db40f,
		0x920d76878fcb1040,
		0x9439232ee1625745,
		0x98ebe8ee44b55fad,
		0x9cbf543afc5b2ef8,
		0x9ccb60a0785e0ebe,
		0x9f30b9a1389539e7,
		0xa00b05371373e6d6,
		0xa23710e0ed103b12,
		0xa26fe791fa514c3f,
		0xa5dedc367594e97a,
		0xaa95f2c2154f801a,
		0xabc9ff4fbb5f0b04,
		0xaddb752fe579c78e,
		0xb288e1a44d8ed064,
		0xb6e3b8602914cca6,
		0xb950ba19ca79c37f,
		0xbb86a24042c66855,
		0xbd157ada88cf152d,
		0xbd3d681e8600457f,
		0xc0d7ec4193d608ef,
		0xc660dbd95ff47272,
		0xc698b99f896737c7,
		0xcbd9cd959c154da1,
		0xcc368c426d5175df,
		0xcf61cf65228728bc,
		0xcfe323414bf5b98f,
		0xd48a054099ff07a6,
		0xd4ee6164b4bdc4eb,
		0xdbf0b70cd25804f1,
		0xddcec9b635b388d9,
		0xdef6357752ebba29,
		0xe0b5130f36b01c23,
		0xe1919bd896a6ac1a,
		0xe37f36219a0e109a,
		0xe48faf3beca83da0,
		0xeab015ca8107699b,
		0xeb2fd278248964aa,
		0xecb99c4b492abf4a,
		0xef2306d933494fde,
		0xf4f09607a66adddc,
		0xf53b9c54e2e0158b,
		0xf6bdb0430ec96918,
		0xfb8adfbb2da1e392,
		0xfb92513472887325,
		0xfd4f6f21b80818a8,
		0xfe7e3774c0f9bf1f)
}
